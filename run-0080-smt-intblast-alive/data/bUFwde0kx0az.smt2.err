ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:40:16 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         25202 MiB
ramon: sys.mem.avail        61751 MiB
ramon: sys.nprocs           1390
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/bUFwde0kx0az.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             90518
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   6387    458  1260/1141/101      87/10     7   23   19.27)
(smt.stats    1    202   8908   1204  2051/1842/102     192/10     7   23   19.37)
(smt.stats    2    313  11800   2392  2082/1874/103     298/21     9   29   19.56)
(smt.stats    3    414  13263   3768  2392/2158/106     397/22    10   31   19.66)
(smt.stats    4    525  14425   5554  2403/2167/108     504/22    10   31   19.76)
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 17 := 17&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 17&65536
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 17 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 18&65536
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 18 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 1 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228223&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 18&65536
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 18 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 0 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 0 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65534 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65532 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 64 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 128 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 512 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8192 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16384 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 32768 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 64 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 186 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 128 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 128 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 512 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 512 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 65532 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 64 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 128 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 512 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8192 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16384 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32768 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8192 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1152 := 2228224&65536
(smt.stats    5    647  16497   7786  2593/2344/320     659/60    13   81   20.54)
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16384 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32768 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32768 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas       :deletions     )
(smt.stats    6    748  19255  12832  2694/2450/423     798/87    15  115   21.03)
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 128 := 276929&131072
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2160897&131072
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 2160897 := 18 << 18
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2160961&131072
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 2160961 := 18 << 18
(smt.stats    7    859  22542  15593  2917/2498/423    1056/97    15  115   21.54)
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 4718592&131072
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 4751421 := 18 << 18
(smt.stats    8    981  26702  21829  3134/2856/448    1330/254    18  140   21.73)
ramon: poll                 wall=1.000s usage=0.944s mem=23420KiB load=0.94 rootload=0.93
(smt.stats    9   1115  30444  26541  3267/2893/451    1457/267    19  165   22.02)
ramon: poll                 wall=2.000s usage=1.940s mem=23824KiB load=1.00 rootload=1.00
(smt.stats   10   1216  32006  27849  3480/3072/451    1609/297    20  170   22.21)
ramon: poll                 wall=3.000s usage=2.935s mem=23828KiB load=0.99 rootload=0.99
(smt.stats   11   1327  32589  28370  3624/3271/451    1747/298    20  170   22.30)
ramon: poll                 wall=4.000s usage=3.931s mem=23828KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1452  35405  34308  3889/3580/454    2192/350    21  172   22.40)
(smt.stats   13   1586  41359  41036  3961/3617/458    2607/462    22  184   22.59)
(smt.stats   14   1733  48649  53007  4073/3722/462    3155/541    24  228   22.78)
ramon: poll                 wall=5.000s usage=4.927s mem=24196KiB load=1.00 rootload=0.99
(smt.stats   15   1834  54113  61173  4127/3772/462    3384/542    24  228   22.87)
(smt.stats   16   1945  59359  70996  4299/3884/462    3964/631    25  232   22.97)
(smt.stats   17   2067  63722  83927  4325/4000/484    4376/823    27  293   23.16)
ramon: poll                 wall=6.000s usage=5.924s mem=24840KiB load=1.00 rootload=1.00
(smt.stats   18   2201  68856  94981  4508/4028/484    4839/832    27  293   23.35)
(smt.stats   19   2348  72351 104744  4867/4232/484    5229/914    28  298   23.54)
ramon: poll                 wall=7.000s usage=6.921s mem=24868KiB load=1.00 rootload=1.00
(smt.stats   20   2509  76808 118978  5030/4719/486    6196/942    29  299   23.63)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   21   2610  82195 132221  5112/4763/487    6490/1079    31  308   23.73)
(smt.stats   22   2721  88458 144002  5331/4813/487    6740/1082    31  308   23.83)
(smt.stats   23   2843  94584 159964  5502/5036/487    7028/1091    31  308   23.83)
(smt.stats   24   2977  97021 166943  5615/5304/488    7362/1215    32  321   24.02)
ramon: poll                 wall=8.000s usage=7.918s mem=25384KiB load=1.00 rootload=1.00
(smt.stats   25   3124 101589 178959  5685/5314/489    7980/1216    32  321   24.11)
ramon: poll                 wall=9.000s usage=8.913s mem=25632KiB load=1.00 rootload=0.99
(smt.stats   26   3285 109196 202120  5887/5515/491    8636/1636    34  331   24.21)
(smt.stats   27   3462 115525 221895  6111/5662/492    9464/1713    35  338   24.40)
(smt.stats   28   3563 118994 229940  6195/5851/492    9965/1714    35  338   24.49)
(smt.stats   29   3674 124366 245846  6288/5914/492   10267/1720    35  338   24.49)
ramon: poll                 wall=10.000s usage=9.884s mem=25976KiB load=0.97 rootload=0.97
(smt.stats   30   3796 128754 261541  6435/6056/497   10585/1933    36  346   24.69)
(smt.stats   31   3930 130496 267142  6688/6351/498   10855/1934    36  346   24.78)
(smt.stats   32   4077 136195 286412  6722/6375/499   11285/1980    37  406   24.88)
ramon: poll                 wall=11.000s usage=10.880s mem=26532KiB load=1.00 rootload=1.00
(smt.stats   33   4238 142648 303819  6956/6404/500   11611/2096    38  413   25.07)
(smt.stats   34   4415 147225 309083  7259/6731/500   11863/2098    38  413   25.26)
ramon: poll                 wall=12.000s usage=11.877s mem=26976KiB load=1.00 rootload=0.99
(smt.stats   35   4609 155432 328940  7599/7105/502   12847/2191    39  431   25.65)
ramon: poll                 wall=13.000s usage=12.873s mem=27448KiB load=1.00 rootload=1.00
(smt.stats   36   4710 158411 336355  7803/7276/502   13178/2194    39  431   26.10)
ramon: poll                 wall=14.000s usage=13.870s mem=27772KiB load=1.00 rootload=1.00
(smt.stats   37   4821 162050 345745  8152/7543/502   13803/2200    39  431   26.29)
ramon: poll                 wall=15.000s usage=14.865s mem=27992KiB load=1.00 rootload=0.99
(smt.stats   38   4943 168543 371239  8273/7796/502   14347/2201    39  431   26.48)
(smt.delete-inactive-clauses  :num-deleted-clauses 1282)
(smt.stats   39   5077 174864 383677  8313/7944/503   14318/2445    40  433   26.48)
ramon: poll                 wall=16.000s usage=15.863s mem=28288KiB load=1.00 rootload=1.00
(smt.stats   40   5224 187474 414466  8507/7978/503   15060/2449    40  433   26.58)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   41   5385 199927 438059  8631/8195/504   15489/2582    41  438   26.67)
ramon: poll                 wall=17.000s usage=16.860s mem=28364KiB load=1.00 rootload=1.00
(smt.stats   42   5562 208805 459107  8724/8300/504   16838/2588    41  438   26.67)
(smt.stats   43   5756 216825 484969  8914/8414/505   17951/2909    42  438   26.86)
ramon: poll                 wall=18.000s usage=17.855s mem=28516KiB load=1.00 rootload=0.99
(smt.stats   44   5969 225833 521954  9137/8570/505   19289/2909    42  438   27.15)
(smt.stats   45   6070 228638 532104  9186/8796/505   19668/2912    42  438   27.24)
(smt.stats   46   6181 233722 549659  9325/8872/505   20201/2921    42  438   27.35)
ramon: poll                 wall=19.000s usage=18.851s mem=28860KiB load=1.00 rootload=1.00
(smt.stats   47   6303 236636 573637  9440/9041/507   20671/3123    43  443   27.44)
(smt.stats   48   6437 241974 599336  9619/9080/509   21219/3127    43  443   27.54)
ramon: poll                 wall=20.000s usage=19.849s mem=29088KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 18:40:36 2024
ramon: root.execname        z3
ramon: root.utime           19.890s
ramon: root.stime           0.000s
ramon: group.total          19.904s
ramon: group.utime          19.896s
ramon: group.stime          0.008s
ramon: group.mempeak        29604KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.056s
ramon: loadavg              0.99
