ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:27:46 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29724 MiB
ramon: sys.mem.avail        62088 MiB
ramon: sys.nprocs           1377
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/0htTAj0yE0Zy.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             588325
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   196.078     10000        49          0            1        2)
(sat.ddfw       1      1   96.1635     20001        98          1            1        3)
(smt.stats    0    101    945    634   692/473/104     128/26     5   16   51.47)
(sat.ddfw       1      1   101.523     40001       196          2            1        5)
(smt.stats    1    202   2061   2117   792/708/108     284/59     7   22   51.56)
(sat.ddfw       1      1   89.8204     70001       343          3            1        8)
(smt.stats    2    313   3064   3525   896/810/118     432/83     8   36   51.66)
(smt.stats    3    414   3859   5297  1069/996/123     571/89     9   38   51.75)
(sat.ddfw       1      1   77.5194    110001       539          4            1       12)
(smt.stats    4    525   4635   6704  1154/1011/123     705/91     9   38   51.75)
(sat.ddfw       1      1   67.5662    160000       784          5            1       17)
(smt.stats    5    647   5190   7729  1370/1088/123     855/112    10   42   51.85)
(smt.stats :restarts  :decisions   :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts   :propagations         :lemmas          :deletions    )
(smt.stats    6    748   5902   9640  1505/1398/123    1048/113    10   42   51.95)
(smt.stats    7    859   6832  11389  1564/1445/123    1235/115    10   42   51.95)
ramon: poll                 wall=1.002s usage=1.016s mem=54200KiB load=1.01 rootload=1.01
(smt.stats    8    981   7499  14304  1621/1502/123    1380/118    10   42   51.95)
(sat.ddfw       1      1   59.1726    220001      1078          6            1       23)
(smt.stats    9   1115   8093  17381  1709/1563/124    1612/192    11   43   52.05)
(smt.stats   10   1216   8308  20457  1733/1647/124    1729/192    11   43   52.05)
(smt.stats   11   1327   8737  22998  1744/1659/124    1859/192    11   43   52.05)
(smt.stats   12   1449   9246  26921  1763/1672/124    2058/192    11   43   52.05)
(smt.stats   13   1583   9933  30448  1780/1683/124    2252/192    11   43   52.15)
(sat.ddfw       1      1   52.4345    290001      1421          7            1       30)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   14   1730  10612  35871  1784/1703/124    2430/192    11   43   52.15)
(smt.stats   15   1831  11042  39470  1811/1705/124    2553/193    11   43   52.15)
(smt.stats   16   1942  11492  42879  1815/1734/125    2687/287    12   44   52.15)
(smt.stats   17   2064  11818  47575  1831/1744/125    2838/287    12   44   52.15)
(smt.stats   18   2198  12440  50177  1844/1750/126    2995/308    13   45   52.25)
(smt.stats   19   2345  13116  56075  1894/1767/126    3199/308    13   45   52.25)
(sat.ddfw       1      1   44.4939    370001      1813          8            1       38)
(smt.stats   20   2506  13780  63236  1922/1824/130    3420/316    14   46   52.40)
(smt.stats   21   2607  14328  68222  1990/1845/130    3559/320    14   46   52.40)
(smt.stats   22   2718  14632  70965  2006/1917/130    3676/368    15   49   52.40)
ramon: poll                 wall=2.000s usage=1.955s mem=54484KiB load=0.94 rootload=0.93
(smt.stats   23   2840  14997  74468  2017/1925/130    3812/368    15   49   52.40)
(smt.stats   24   2974  15594  78339  2066/1939/130    3997/371    15   49   52.40)
(smt.stats   25   3121  15895  86055  2066/1981/130    4148/371    15   49   52.40)
(smt.stats   26   3282  16510  91743  2091/1982/130    4386/374    15   49   52.49)
(sat.ddfw       1      1   40.1965    460001      2254          9            1       47)
(smt.stats   27   3459  17225  97602  2135/2010/130    4773/374    15   49   52.49)
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 1 := 2 << 1
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 1 := 2 << 1
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 0&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 0 := 1 << 1
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 0&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 6075 := 0 << 1
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 0&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 6075 := 0 << 1
(smt.stats   28   3563  17538 101712  2167/2078/143    4941/589    16   51   52.59)
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65538 << 6
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65538 << 6
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65538 << 6
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65537 << 6
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65537 << 5
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65537 << 4
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65537 << 3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65537 << 2
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65537 << 2
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65537 << 2
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65537 << 4
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 1&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131073 := 65537 << 4
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 131071&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131071 := 131070 << 3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 131071&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131071 := 65538 << 3
(smt.stats   29   3674  18238 104582  2238/2138/179    5103/594    16   51   52.69)
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 131071&1
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 131071&1
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 131070&1
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 131070 := 65537 << 15
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&1
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65536 := 65537 << 15
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 14
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 13
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 12
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 7
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 8
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 11
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 10
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 9
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 1 := 65537&3
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 16
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 2 := 2&3
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 2 := 65537 << 16
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 2 := 2&3
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 2 := 65537 << 16
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 6075 := 65537 << 16
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 0 := 65537 << 16
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 0 := 65537 << 16
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 3 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 1 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
band: (band[17] (shl[17] (bv2int %0) (mod #115 17)) (if (or #364 #365 #366 #367 #368 #369 #370 #371 #372 #373 #374 #375 #376 #377) 0 (if #378 1 #382))) 1 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
band: (band[17] (shl[17] (bv2int %0) (mod #115 17)) (if (or #364 #365 #366 #367 #368 #369 #370 #371 #372 #373 #374 #375 #376 #377) 0 (if #378 1 #382))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
band: (band[17] (shl[17] (bv2int %0) (mod #115 17)) (if (or #364 #365 #366 #367 #368 #369 #370 #371 #372 #373 #374 #375 #376 #377) 0 (if #378 1 #382))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
band: (band[17] (shl[17] (bv2int %0) (mod #115 17)) (if (or #364 #365 #366 #367 #368 #369 #370 #371 #372 #373 #374 #375 #376 #377) 0 (if #378 1 #382))) 1 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
band: (band[17] (shl[17] (bv2int %0) (mod #115 17)) (if (or #364 #365 #366 #367 #368 #369 #370 #371 #372 #373 #374 #375 #376 #377) 0 (if #378 1 #382))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
band: (band[17] (shl[17] (bv2int %0) (mod #115 17)) (if (or #364 #365 #366 #367 #368 #369 #370 #371 #372 #373 #374 #375 #376 #377) 0 (if #378 1 #382))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65536&3
band: (band[17] (shl[17] (bv2int %0) (mod #115 17)) (if (or #364 #365 #366 #367 #368 #369 #370 #371 #372 #373 #374 #375 #376 #377) 0 (if #378 1 #382))) 2 := 65536&3
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 14
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 14
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 13
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 4&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 4 := 65537 << 13
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 13
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 12
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 12
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 11
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 4&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 4 := 65537 << 11
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 4&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 4 := 65537 << 11
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 4&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 4 := 65537 << 10
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 4&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 4 := 65537 << 10
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 4&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 4 := 65537 << 9
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 9
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 8
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 8
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 7
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65532&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65532 := 65537 << 7
(smt.stats   30   3796  19837 109182  2515/2268/271    5248/614    16   51   53.07)
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65533&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65533 := 65537 << 13
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&1
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 1 := 65537&1
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 15
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 4
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 2
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 6
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 5
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 65537&0
shl: (shl[32] (bv2int %0) (mod (+ #115 #443 #439) 32)) 65537 := 65537 << 5
(smt.stats   31   3930  21342 114641  2529/2401/276    5391/700    17   95   53.17)
(smt.stats   32   4077  23583 121170  2565/2424/280    5629/714    18  100   53.36)
(sat.ddfw       1      1   36.9686    560001      2745         10            1       57)
(smt.stats   33   4238  26365 129985  2667/2476/280    5862/714    18  100   53.66)
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 131008&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 131064 := 4094 << 5
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 130976&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 131064 := 4093 << 5
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   34   4415  28512 140351  2704/2567/293    6192/753    19  100   53.86)
ramon: poll                 wall=3.000s usage=2.956s mem=56196KiB load=1.00 rootload=0.99
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 0&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 5 := 65536 << 8
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 0&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 5 := 65536 << 8
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 0&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 65533 := 65536 << 8
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 0&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 65533 := 65536 << 8
(smt.stats   35   4609  30136 145909  2730/2591/303    6495/753    20  136   53.95)
(smt.stats   36   4710  31112 149694  2755/2623/308    6649/753    20  136   54.06)
(smt.stats   37   4821  31896 156973  2771/2638/310    6874/771    21  150   54.16)
(sat.ddfw       1      1   34.2572    670001      3284         11            1       68)
(smt.stats   38   4943  32529 163335  2796/2641/310    7070/771    21  150   54.16)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   39   5077  33882 172326  2896/2735/310    7384/782    22  156   54.25)
(smt.stats   40   5224  34388 178199  2896/2735/315    7569/782    22  156   54.25)
(smt.stats   41   5385  36062 187981  2902/2738/315    7793/827    23  161   54.35)
(smt.stats   42   5562  37073 199156  2908/2749/319    8117/844    24  163   54.46)
(sat.ddfw       1      1   31.8894    790001      3872         12            1       80)
(smt.stats   43   5756  39154 213087  3041/2838/319    8426/845    24  163   54.65)
ramon: poll                 wall=4.000s usage=3.951s mem=57188KiB load=1.00 rootload=1.00
(sat.ddfw       1      1    29.796    920001      4509         13            1       93)
(smt.stats   44   5969  42151 220926  3166/2924/333    8886/889    25  172   55.25)
(smt.stats   45   6070  42875 224598  3271/3074/333    9130/889    25  172   55.25)
ramon: poll                 wall=5.000s usage=4.956s mem=57956KiB load=1.00 rootload=1.01
(sat.ddfw       1      1   28.0224   1060001      5196         14            1      108)
(smt.stats   46   6181  45231 231118  3283/3079/335    9455/919    26  195   55.25)
(smt.stats   47   6303  47494 243567  3355/3105/335    9700/919    26  195   55.34)
(smt.stats   48   6437  50141 255566  3518/3316/343   10077/987    27  206   55.44)
(sat.ddfw       1      1   26.5252   1210001      5931         15            1      123)
(smt.stats   49   6584  51999 263017  3533/3331/349   10684/987    27  206   55.53)
ramon: poll                 wall=6.000s usage=5.993s mem=58016KiB load=1.04 rootload=1.03
(smt.stats   50   6745  54152 272672  3548/3342/349   11373/987    27  206   55.77)
(smt.stats   51   6922  55474 281967  3588/3347/349   11728/987    27  206   55.86)
(sat.ddfw       1      1   25.2845   1370001      6715         16            1      139)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   52   7116  59792 298186  3688/3413/349   12440/1120    28  212   56.06)
(smt.stats   53   7329  63960 325202  3774/3512/350   12819/1121    28  212   56.16)
ramon: poll                 wall=7.000s usage=6.992s mem=58620KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   23.9201   1540001      7549         17            1      156)
(smt.stats   54   7563  67097 345222  3788/3579/350   13413/1173    29  214   56.16)
(smt.stats   55   7664  68254 358612  3797/3588/350   13574/1173    29  214   56.26)
(smt.stats   56   7775  70169 369761  3805/3604/350   13827/1173    29  214   56.26)
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 122880&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 120707 := 76111 << 13
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 106496&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 104323 := 76125 << 13
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 122880&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 89858 := 76127 << 13
(sat.ddfw       1      1   23.1541   1720001      8431         18            1      174)
ramon: poll                 wall=8.000s usage=8.069s mem=58876KiB load=1.08 rootload=1.07
(smt.stats   57   7897  71941 373121  3872/3604/350   14060/1174    29  214   56.45)
(smt.stats   58   8031  73603 380319  3951/3748/366   14343/1217    30  215   56.45)
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 0&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 4 := 0 << 14
band: (band[17] (shl[32] (bv2int %0) (mod #444 32)) (if (or #465 #466 #467 #468 #469 #470 #471 #472 #473 #474 #475 #476 #477 #478 #479) 0 (if #480 1 #523))) 0 := 0&0
shl: (shl[17] (bv2int %0) (mod (bv2int %1) 17)) 4 := 0 << 14
(smt.stats   59   8178  75729 393507  4008/3776/377   14992/1219    30  215   56.64)
(smt.stats   60   8339  77243 399900  4070/3834/377   15238/1219    30  215   56.64)
(sat.ddfw       1      1   21.8743   1910001      9362         19            1      193)
ramon: poll                 wall=9.000s usage=9.008s mem=59132KiB load=0.94 rootload=0.94
(smt.stats   61   8516  80193 413456  4155/3944/379   15800/1372    31  294   56.74)
(sat.ddfw       1      1   20.5952   2110001     10343         20            1      214)
(smt.stats   62   8710  85333 438209  4367/4146/380   16443/1374    31  294   56.83)
ramon: poll                 wall=10.000s usage=9.985s mem=59388KiB load=0.98 rootload=0.98
(sat.ddfw       1      1   19.7387   2320001     11372         21            1      235)
(smt.stats   63   8923  88776 451616  4575/4225/390   17065/1463    32  304   57.12)
ramon: poll                 wall=11.000s usage=10.986s mem=59476KiB load=1.00 rootload=1.00
(smt.stats   64   9157  94370 473298  4612/4404/391   17632/1463    32  304   57.32)
(smt.stats   65   9414  96281 495184  4642/4409/391   18234/1463    32  304   57.87)
(smt.stats   66   9515  97867 502253  4694/4477/391   18703/1540    33  308   57.87)
(sat.ddfw       1      1   18.9247   2540001     12451         22            1      257)
(smt.stats   67   9626  99847 515029  4696/4479/392   19294/1540    33  308   57.96)
ramon: poll                 wall=12.000s usage=11.982s mem=60504KiB load=1.00 rootload=0.99
(smt.stats   68   9748 101461 519345  4736/4479/392   19640/1542    33  308   58.06)
(smt.stats   69   9882 103620 538955  4863/4579/392   20148/1546    33  308   58.15)
(sat.ddfw       1      1   18.1488   2770001     13578         23            1      280)
(smt.delete-inactive-clauses  :num-deleted-clauses 366)
(smt.stats   70  10029 106572 555826  4892/4649/392   20278/1696    34  309   58.15)
ramon: poll                 wall=13.000s usage=12.982s mem=60504KiB load=1.00 rootload=1.00
(smt.stats   71  10190 110431 582970  4896/4677/392   20710/1696    34  309   58.25)
(sat.ddfw       1      1   17.4292   3010001     14754         24            1      305)
ramon: poll                 wall=14.000s usage=13.982s mem=60760KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations          :lemmas           :deletions     )
(smt.stats   72  10367 112725 598730  4965/4680/392   21383/1697    34  309   58.34)
(smt.stats   73  10561 115331 611647  5069/4818/392   21640/1697    34  309   58.44)
(sat.ddfw       1      1    16.765   3260001     15980         25            1      330)
ramon: poll                 wall=15.000s usage=14.981s mem=61016KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.980s mem=61096KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   16.1501   3520001     17254         26            1      356)
(smt.stats   74  10774 116964 615793  5238/4859/392   22242/1700    34  309   58.63)
ramon: poll                 wall=17.000s usage=16.980s mem=61096KiB load=1.00 rootload=1.00
(sat.ddfw       1      1    15.579   3790001     18578         27            1      383)
(smt.stats   75  11008 119819 650479  5554/5189/393   22948/1846    35  312   58.63)
ramon: poll                 wall=18.003s usage=17.984s mem=61096KiB load=1.00 rootload=1.01
(sat.ddfw       1      1   15.0521   4070001     19951         28            1      412)
ramon: poll                 wall=19.000s usage=18.980s mem=61352KiB load=1.00 rootload=0.99
(smt.stats   76  11265 123833 689806  5779/5501/394   23788/1971    36  312   58.92)
(sat.ddfw       1      1   14.5729   4360001     21372         29            1      441)
ramon: poll                 wall=20.000s usage=20.049s mem=61312KiB load=1.07 rootload=1.07
ramon: end                  Fri Nov  1 21:28:06 2024
ramon: root.execname        z3
ramon: root.utime           20.030s
ramon: root.stime           0.020s
ramon: group.total          20.060s
ramon: group.utime          20.036s
ramon: group.stime          0.024s
ramon: group.mempeak        61568KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.013s
ramon: loadavg              1.00
