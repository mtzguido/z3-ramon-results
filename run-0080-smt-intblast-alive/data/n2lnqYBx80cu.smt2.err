ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:58:05 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         24738 MiB
ramon: sys.mem.avail        61750 MiB
ramon: sys.nprocs           1397
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/n2lnqYBx80cu.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             147360
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   1574    104  1061/953/99      98/20     4   17   19.27)
(smt.stats    1    202   1866    765  1862/1637/99     218/25     4   17   19.27)
(smt.stats    2    313   4395   3007  2004/1849/101     366/83     6   19   19.27)
(smt.stats    3    414   5390   4215  2375/2184/109     459/101     8   36   19.47)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 1 := 34359738367 << 1
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 0&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 0 := 34359738367 << 1
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 0&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 0 := 2 << 1
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 1 := 1&1073741823
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 1 := 2 << 30
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 1 := 1&1073741823
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 1 := 2 << 30
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 1 := 1&1073741823
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 1 := 2 << 30
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 1073741823 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 1073741822 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 17179869184 := 17179869185 << 30
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 17179869184 := 17179869185 << 30
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 1 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 2 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 4 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 8 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 16 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 32 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 32 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 64 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 128 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 256 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 512 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 1024 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 1024 := 1073741824&1073741823
(smt.stats    4    525   6755   5966  2547/2228/119     561/120    10   43   19.90)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 1 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 29 := 17179869185 << 30
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 1 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 2 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 2 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 1 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 2 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 8 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 4 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 4 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 4 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 4 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 16 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 128 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 128 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 1024 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 2048 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 4096 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 8192 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 16384 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 32768 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 65536 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 131072 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 262144 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 524288 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 1048576 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 2097152 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 4194304 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 8388608 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 16777216 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 33554432 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 67108864 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 134217728 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 268435456 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 536870912 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 536870912 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 67108864 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 134217728 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 268435456 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 134217728 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 67108864 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 37748736 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 37748736 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 50331648 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 41943040 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 41943040 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 41943040 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 35651584 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 35651584 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 35651584 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 35651584 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 33554432 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 512 := 1073741824&1073741823
(smt.stats    5    647   9773   9937  2751/2529/354     830/223    14  100   20.69)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 512 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 512 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 256 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 64 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 64 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 64 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 32 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 32 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 32 := 1073741824&1073741823
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1073741824&1073741823
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 1 (if #565 3 #659))) 32 := 1073741824&1073741823
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    748  12504  14609  2776/2546/365     927/220    15  112   20.78)
(smt.stats    7    859  14551  17193  2856/2571/375    1084/223    16  114   20.78)
(smt.stats    8    981  16903  21972  2937/2713/393    1226/264    19  123   20.88)
(smt.stats    9   1115  20288  28477  2963/2723/393    1366/265    19  123   20.88)
(smt.stats   10   1216  24416  32680  2995/2756/393    1458/276    20  131   21.02)
(smt.stats   11   1327  26657  37000  3124/2848/394    1582/279    21  132   21.31)
(smt.stats   12   1449  29469  43973  3171/2916/394    1739/280    21  132   21.31)
(smt.stats   13   1583  32783  48863  3219/2955/394    1936/283    21  132   21.40)
ramon: poll                 wall=1.000s usage=0.946s mem=22604KiB load=0.95 rootload=0.93
(smt.stats   14   1730  35823  53991  3285/3011/394    2091/283    21  132   21.40)
(smt.stats   15   1831  39046  59045  3343/3069/395    2192/381    22  134   21.50)
(smt.stats   16   1942  41708  65947  3434/3196/398    2373/392    23  138   21.60)
(smt.stats   17   2064  43741  70071  3462/3209/398    2538/392    23  138   21.69)
(smt.stats   18   2198  48803  78215  3494/3249/398    2720/392    23  138   21.79)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 23&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 23&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 24&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 24&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 24&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 32&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 24&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 32&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 64&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 128&4194303
(smt.stats   19   2345  53485  88606  3596/3318/440    2936/525    25  143   21.89)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 64&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 256&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 64&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 256&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 512&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 512&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1024&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 512&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 512&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 320&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1024&4194303
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 2048&4194303
(smt.stats   20   2506  56930  98257  3704/3465/528    3255/567    26  166   22.28)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 2048&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 2048&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 4096&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 4096&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 2048&17179869168
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   21   2607  60280 106936  3752/3477/529    3408/643    27  178   22.45)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 4096&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 8192&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 16384&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 8192&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 16384&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 32768&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 65536&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 131072&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 65536&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 131072&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 65536&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 131072&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 524288&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 524288&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1048576&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 524288&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1048576&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 2097152&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 524288&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 524288&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 524288&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 1048576&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 2097152&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 4194304&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 0 := 262144&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 262146&17179869168
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 144116356307222530 := 33 << 34
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 262146&17179869168
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 144116390666960898 := 33 << 34
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 262146&17179869168
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 144116321947484162 := 33 << 34
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 270336&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 270336&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 270336&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 270336&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 327680&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 270336&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 263168&17179869168
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (= #678 63) 0 (if #680 1 #831))) 262144 := 262146&17179869168
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 144116356307222530 := 33 << 34
(smt.stats   22   2718  62919 116402  3875/3579/647    3597/689    29  205   22.74)
(smt.stats   23   2840  66403 127602  3915/3643/657    3759/690    29  205   22.83)
(smt.stats   24   2974  69473 137932  3949/3709/664    4031/847    31  225   22.93)
(smt.stats   25   3121  72998 149912  3967/3713/666    4231/848    31  225   22.93)
ramon: poll                 wall=2.000s usage=1.946s mem=24344KiB load=1.00 rootload=0.99
(smt.stats   26   3282  78691 164953  4023/3758/666    4550/889    32  228   23.02)
(smt.stats   27   3459  82898 175272  4076/3834/669    4892/930    33  228   23.22)
(smt.stats   28   3560  87031 181044  4164/3891/669    5159/930    33  228   23.53)
(smt.stats   29   3671  90233 187934  4327/4015/669    5374/1054    34  233   23.63)
(smt.stats   30   3793  94465 195433  4449/4125/670    5542/1083    35  233   23.83)
(smt.stats   31   3927  98571 208623  4463/4153/672    5742/1119    36  234   23.92)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   32   4074 101142 215899  4480/4170/674    6087/1119    36  234   24.02)
(smt.stats   33   4235 108394 237197  4496/4186/677    6503/1171    38  264   24.21)
ramon: poll                 wall=3.000s usage=2.946s mem=25800KiB load=1.00 rootload=1.00
(smt.stats   34   4412 117927 267754  4603/4288/681    7016/1197    40  294   24.50)
(smt.stats   35   4606 122458 276140  4644/4317/687    7522/1197    40  294   24.70)
(smt.stats   36   4707 126768 285686  4670/4342/687    7608/1370    41  327   24.70)
(smt.stats   37   4818 131600 302722  4736/4391/687    7764/1374    41  327   24.89)
(smt.stats   38   4940 137746 321004  4757/4447/687    8050/1374    41  327   24.89)
(smt.delete-inactive-clauses  :num-deleted-clauses 129)
(smt.stats   39   5074 142432 338680  4774/4464/693    8196/1443    42  327   24.89)
ramon: poll                 wall=4.000s usage=3.945s mem=26436KiB load=1.00 rootload=1.00
(smt.stats   40   5221 147971 353251  4904/4556/695    8389/1481    43  374   24.99)
(smt.stats   41   5382 152146 373507  4957/4600/697    8749/1502    44  374   25.28)
(smt.stats   42   5559 153633 384063  5113/4747/698    9223/1502    44  374   25.38)
(smt.stats   43   5753 160125 401193  5153/4756/699    9613/1575    45  376   25.47)
ramon: poll                 wall=5.000s usage=4.945s mem=27072KiB load=1.00 rootload=1.00
(smt.stats   44   5966 167991 422849  5305/4939/701   10462/1613    46  378   25.76)
(smt.stats   45   6067 170140 428110  5309/4943/702   10752/1681    47  385   25.76)
(smt.stats   46   6178 174460 442178  5315/4949/704   11210/1681    47  385   25.95)
(smt.stats   47   6300 178204 462047  5333/4962/705   11653/1756    48  394   26.14)
(smt.stats   48   6434 182545 478453  5485/5048/706   12145/1828    49  400   26.34)
ramon: poll                 wall=6.000s usage=5.945s mem=27916KiB load=1.00 rootload=1.00
(smt.stats   49   6581 193110 504777  5494/5112/706   12672/1828    49  400   26.43)
(smt.stats   50   6742 202384 524710  5569/5117/706   13542/1833    49  400   26.53)
(smt.stats   51   6919 212529 556482  5725/5257/707   14166/1974    50  400   26.72)
ramon: poll                 wall=7.000s usage=6.945s mem=28440KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   52   7113 219344 575933  5972/5489/710   15124/2070    51  422   27.11)
ramon: poll                 wall=8.000s usage=7.945s mem=28900KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.003s usage=8.948s mem=29068KiB load=1.00 rootload=1.00
(smt.stats   53   7326 231491 622341  6261/5622/710   16330/2080    51  422   27.30)
(smt.stats   54   7560 241033 663521  6420/5936/710   17236/2199    52  432   27.59)
(smt.stats   55   7661 246383 691022  6463/6081/711   18602/2497    53  452   27.75)
ramon: poll                 wall=10.000s usage=9.944s mem=29316KiB load=1.00 rootload=1.00
(smt.stats   56   7772 250310 710758  6473/6091/713   19470/2497    53  452   27.84)
(smt.stats   57   7894 253814 732097  6474/6092/713   19683/2497    53  452   27.84)
(smt.stats   58   8028 256850 747988  6506/6122/715   20834/2542    54  495   27.94)
(smt.stats   59   8175 264399 774646  6562/6149/716   21399/2547    54  495   28.03)
ramon: poll                 wall=11.000s usage=10.944s mem=29544KiB load=1.00 rootload=1.00
(smt.stats   60   8336 271620 806210  6688/6208/717   21689/2775    55  542   28.13)
(smt.stats   61   8513 276334 836525  6738/6335/718   22443/2869    56  547   28.13)
ramon: poll                 wall=12.000s usage=11.944s mem=29696KiB load=1.00 rootload=1.00
(smt.stats   62   8707 284729 876247  7000/6374/718   23282/2880    56  547   28.43)
(smt.stats   63   8920 290700 922712  7137/6755/720   23737/3006    57  550   28.64)
ramon: poll                 wall=13.000s usage=12.943s mem=30232KiB load=1.00 rootload=0.99
(smt.stats   64   9154 299850 975125  7173/6791/726   25714/3114    58  562   28.84)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   65   9411 314914 1042056  7349/6792/726   27055/3129    58  562   29.03)
ramon: poll                 wall=14.000s usage=13.943s mem=30776KiB load=1.00 rootload=1.00
(smt.stats   66   9512 317799 1054209  7384/6997/726   28040/3636    59  565   29.38)
(smt.stats   67   9623 323539 1093767  7526/7010/726   28618/3644    59  565   29.47)
(smt.stats   68   9745 326668 1115781  7781/7168/726   28941/3651    59  565   29.67)
ramon: poll                 wall=15.000s usage=14.943s mem=31072KiB load=1.00 rootload=1.00
(smt.stats   69   9879 331170 1149931  8062/7484/726   29598/3660    59  565   29.67)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10026 336442 1185306  8113/7716/726   31152/3660    59  565   29.76)
ramon: poll                 wall=16.000s usage=15.943s mem=31504KiB load=1.00 rootload=1.00
(smt.stats   71  10187 342995 1215765  8176/7734/726   31786/3664    59  565   29.96)
(smt.stats   72  10364 347412 1240216  8441/7884/726   32347/3671    59  565   30.18)
(smt.stats   73  10558 352621 1270285  8621/8187/726   33543/3673    59  565   30.56)
ramon: poll                 wall=17.000s usage=16.942s mem=32092KiB load=1.00 rootload=1.00
(smt.stats   74  10771 358802 1301724  8759/8295/727   34185/4465    60  569   30.56)
(smt.stats   75  11005 363155 1361712  8821/8439/730   35432/4554    61  598   30.75)
(smt.stats   76  11262 368366 1405820  8879/8451/732   35895/4554    61  598   30.85)
ramon: poll                 wall=18.000s usage=17.942s mem=32560KiB load=1.00 rootload=1.00
(smt.stats   77  11544 373907 1469068  8896/8507/732   37022/4556    61  598   30.95)
(smt.stats   78  11645 378132 1528357  8901/8517/733   37227/4904    62  663   31.04)
(smt.stats   79  11756 382789 1565282  8905/8521/734   38368/4904    62  663   31.14)
(smt.stats   80  11878 390034 1603093  8920/8536/734   39414/4904    62  663   31.23)
ramon: poll                 wall=19.000s usage=18.942s mem=33000KiB load=1.00 rootload=1.00
(smt.stats   81  12012 394295 1638567  8936/8552/739   41409/5078    63  742   31.52)
(smt.stats   82  12159 405398 1709977  8937/8553/739   42936/5078    63  742   31.71)
ramon: poll                 wall=20.000s usage=19.936s mem=33312KiB load=0.99 rootload=0.99
ramon: end                  Fri Nov  1 18:58:25 2024
ramon: root.execname        z3
ramon: root.utime           19.960s
ramon: root.stime           0.020s
ramon: group.total          19.994s
ramon: group.utime          19.966s
ramon: group.stime          0.028s
ramon: group.mempeak        33824KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.058s
ramon: loadavg              1.00
