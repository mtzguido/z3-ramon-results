ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:45:39 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         40919 MiB
ramon: sys.mem.avail        61709 MiB
ramon: sys.nprocs           1254
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/hzxyYeLRagLs.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3050609
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   3410    845  1093/962/93      94/5     6   16   18.94)
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 0 := 41 << 2
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 0 := 80 << 2
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 0 := 80 << 2
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 0 := 68719476737 << 2
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1 := 1&164
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&164
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 2 := 41 << 2
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&164
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 2 := 41 << 2
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&274877907104
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 68719476737 := 68719476776 << 2
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&274877907104
band: (band[39] (shl[39] (bv2int %0) (mod #110 39)) (if (= #579 38) 0 (if #581 1 #685))) 1 := 274877907104&1
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&274877907104
band: (band[39] (shl[39] (bv2int %0) (mod #110 39)) (if (= #579 38) 0 (if #581 1 #685))) 1 := 274877907104&1
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1 := 1&274877907104
(smt.stats    1    202   4890   2619  1552/1389/132     198/9    12   28   19.35)
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&156
band: (band[39] (shl[39] (bv2int %0) (mod #110 39)) (if (= #579 38) 0 (if #581 1 #685))) 1 := 156&1
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 1&156
band: (band[39] (shl[39] (bv2int %0) (mod #110 39)) (if (= #579 38) 0 (if #581 1 #685))) 1 := 156&1
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1 := 1&156
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1 := 1&156
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 0&68719476734
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 68719476734 := 68719476736 << 1
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 0&2
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 2 := 79 << 1
(smt.stats    2    313   7027   4900  1593/1419/133     312/22    13   31   19.54)
(smt.stats    3    415   8148   6984  1988/1783/147     418/32    16   42   19.54)
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 2 := 137438953471&40
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 4 := 137438953471&40
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 8 := 137438953471&40
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 8 := 137438953471&64
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 2 := 137438953471&64
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&64
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 32 := 137438953471&64
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 64 := 137438953471&64
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 549755813952 := 38 << 38
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&64
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 32 := 137438953471&64
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 64 := 137438953471&64
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 549755813952 := 38 << 38
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 64 := 137438953471&64
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 549755813952 := 38 << 38
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 64 := 137438953471&148
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 64 := 137438953471&146
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 64 := 137438953471&64
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 10445360463936 := 38 << 38
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&64
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&64
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&64
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&80
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&94
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&92
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&88
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&144
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&144
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&144
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&80
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&80
(smt.stats    4    526   9084   8974  2115/1881/240     451/55    19  115   20.02)
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&80
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&80
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&528
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&272
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&528
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&1040
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&1040
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&528
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&528
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&286
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&272
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&272
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&2064
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&4112
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&8208
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&8208
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&8208
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&16400
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&32784
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&16400
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&32784
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&65552
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&2064
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&2064
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&30
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&28
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&24
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&16
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 549755813904 := 38 << 38
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&16
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 9895604650000 := 38 << 38
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&16
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 9895604650000 := 38 << 38
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&22
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&20
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 16 := 137438953471&24
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 24 := 137438953471&24
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 9895604650008 := 38 << 38
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 24 := 137438953471&24
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 9895604650008 := 38 << 38
(smt.stats    5    648  10874  13393  2251/2040/379     646/108    22  157   20.70)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    749  12041  14063  2306/2050/379     784/110    22  157   20.79)
ramon: poll                 wall=1.000s usage=0.902s mem=22220KiB load=0.90 rootload=0.90
(smt.stats    7    860  14822  18637  2445/2127/379     960/113    22  157   20.98)
(smt.stats    8    982  16485  21947  2498/2253/387    1090/203    24  179   20.98)
(smt.stats    9   1116  23078  30590  2585/2375/390    1244/223    26  187   21.08)
(smt.stats   10   1217  26974  36329  2784/2517/390    1572/224    26  187   21.47)
ramon: poll                 wall=2.000s usage=1.902s mem=22888KiB load=1.00 rootload=0.99
(smt.stats   11   1328  28971  39300  2915/2531/390    1758/227    26  187   21.85)
ramon: poll                 wall=3.000s usage=2.901s mem=23292KiB load=1.00 rootload=1.00
(smt.stats   12   1450  31268  44986  3031/2776/392    2171/322    27  189   21.94)
(smt.stats   13   1584  38796  54683  3051/2784/395    2431/328    27  189   22.03)
(smt.stats   14   1731  46318  70642  3188/2804/395    2898/507    28  206   22.03)
(smt.stats   15   1832  49507  78707  3374/2941/395    3209/510    28  206   22.13)
(smt.stats   16   1943  53590  88979  3487/3232/398    3707/704    30  214   22.22)
(smt.stats   17   2065  58235  96239  3500/3239/407    4180/706    30  214   22.31)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   18   2199  66274 106933  3528/3273/409    4542/928    31  229   22.31)
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1047596 := 1048575&274877907002
(smt.stats   19   2346  73338 126381  3716/3384/416    4783/1078    33  294   22.41)
(smt.stats   20   2507  78651 144746  3873/3491/416    5314/1079    33  294   22.60)
ramon: poll                 wall=4.000s usage=3.901s mem=23816KiB load=1.00 rootload=1.00
(smt.stats   21   2608  83477 155769  3977/3623/416    5818/1081    33  294   22.70)
(smt.stats   22   2719  88396 169848  4137/3741/416    6167/1084    33  294   22.70)
(smt.stats   23   2841  92698 185592  4390/3908/416    6484/1091    33  294   22.90)
(smt.stats   24   2975  95843 200455  4565/4152/416    6927/1093    33  294   22.90)
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1322 := 2147483647&366503919619
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   25   3122 101543 210153  4672/4318/416    7357/1102    33  294   22.99)
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1179 := 2147483647&366503922717
(smt.stats   26   3283 106461 227635  5004/4439/422    7784/1578    34  302   23.19)
ramon: poll                 wall=5.000s usage=4.901s mem=24604KiB load=1.00 rootload=1.00
(smt.stats   27   3460 111853 251721  5329/4808/422    8547/1656    35  302   23.38)
(smt.stats   28   3561 115959 267257  5445/5138/422    9250/1659    35  302   23.47)
(smt.stats   29   3672 120186 288944  5567/5197/422    9977/1667    35  302   23.57)
(smt.stats   30   3794 124415 313130  5786/5327/422   10503/1669    35  302   23.66)
(smt.stats   31   3928 128575 336202  5990/5542/422   11030/1671    35  302   23.85)
(smt.stats   32   4075 133010 346600  6056/5795/422   11599/1671    35  302   24.04)
ramon: poll                 wall=6.000s usage=5.901s mem=25384KiB load=1.00 rootload=1.00
(smt.stats   33   4236 141521 358949  6063/5808/422   11880/1671    35  302   24.04)
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1046504 := 1048575&1046508
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1046508 := 1048575&1046508
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 1649268488172 := 412317122043 << 21
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1046508 := 1048575&1046508
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 1649268488172 := 412317122043 << 21
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 1046508 := 1048575&1046508
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 1649268488172 := 412317122043 << 21
(smt.stats   34   4413 146062 373761  6168/5809/422   12430/1680    35  302   24.14)
(smt.stats   35   4607 157787 415690  6250/5990/428   13563/2556    36  306   24.43)
(smt.stats   36   4708 161299 424513  6313/5999/428   13966/2740    37  306   24.43)
(smt.stats   37   4820 165251 438024  6411/6082/428   14286/2743    37  306   24.43)
(smt.stats   38   4942 169339 454770  6497/6170/428   14725/2748    37  306   24.43)
(smt.delete-inactive-clauses  :num-deleted-clauses 41)
(smt.stats   39   5076 173561 472316  6578/6263/428   15540/2751    37  306   24.52)
ramon: poll                 wall=7.000s usage=6.901s mem=25936KiB load=1.00 rootload=1.00
(smt.stats   40   5223 180410 496422  6640/6367/428   16070/2758    37  306   24.62)
(smt.stats   41   5384 187574 521732  6798/6400/428   16597/2767    37  306   24.81)
(smt.stats   42   5561 193287 557036  6950/6693/431   17480/3216    38  313   24.81)
ramon: poll                 wall=8.000s usage=7.900s mem=26336KiB load=1.00 rootload=1.00
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 64 := 255&273803116800
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 140 := 255&273803116800
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 128 := 255&273803116800
(smt.stats   43   5755 202063 590585  7037/6701/431   17771/3224    38  313   24.90)
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 255&273803116800
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 32709396136192 := 68585259024 << 9
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 255&273803116800
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 32709396136192 := 68585259024 << 9
band: (band[39] (if (or #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 #716 ...) 0 (if #728 1 #800)) (shl[64] (bv2int %0) (mod #905 64))) 0 := 255&273803116800
shl: (shl[64] (bv2int %0) (mod (+ #110 #904) 64)) 32709396136192 := 68585259024 << 9
(smt.stats   44   5968 207482 611344  7195/6936/438   18471/3349    39  338   25.09)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   45   6069 211393 626708  7209/6949/439   18718/3349    39  338   25.09)
(smt.stats   46   6180 217093 646755  7225/6963/442   18891/3654    40  347   25.09)
(smt.stats   47   6302 223041 689447  7240/6978/442   19262/3654    40  347   25.20)
(smt.stats   48   6436 228604 722084  7260/6998/444   19732/3789    41  384   25.20)
(smt.stats   49   6583 234968 756492  7274/7011/444   20511/3789    41  384   25.29)
ramon: poll                 wall=9.000s usage=8.900s mem=26748KiB load=1.00 rootload=1.00
(smt.stats   50   6744 245785 836009  7287/7025/444   21494/3962    42  386   25.39)
(smt.stats   51   6921 252488 871674  7304/7042/444   21954/3962    42  386   25.49)
(smt.stats   52   7115 259189 896178  7312/7050/444   22396/3962    42  386   25.69)
(smt.stats   53   7328 270434 977428  7317/7055/448   23180/4428    43  393   25.69)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   54   7562 279649 1011473  7340/7078/450   23872/4542    44  426   25.78)
ramon: poll                 wall=10.000s usage=9.900s mem=27276KiB load=1.00 rootload=1.00
(smt.stats   55   7663 285544 1052080  7341/7079/450   23976/4542    44  426   25.88)
(smt.stats   56   7774 287563 1063369  7486/7079/450   24221/4644    45  439   26.07)
(smt.stats   57   7896 290558 1080243  7575/7233/450   24538/4644    45  439   26.07)
(smt.stats   58   8030 293685 1093653  7583/7321/450   25069/4644    45  439   26.07)
(smt.stats   59   8177 299172 1134012  7616/7354/452   25655/4819    46  443   26.17)
(smt.stats   60   8338 304697 1173276  7631/7369/453   25949/4977    47  474   26.26)
(smt.stats   61   8515 312829 1205285  7650/7386/460   26491/4978    47  474   26.26)
ramon: poll                 wall=11.000s usage=10.900s mem=27692KiB load=1.00 rootload=0.99
(smt.stats   62   8709 317995 1216607  7899/7390/460   26534/5091    48  842   26.36)
(smt.stats   63   8922 328177 1238703  8082/7820/461   27114/5098    48  842   26.36)
(smt.stats   64   9156 336383 1298769  8096/7831/461   27958/5098    48  842   26.48)
ramon: poll                 wall=12.000s usage=11.899s mem=27936KiB load=1.00 rootload=1.00
(smt.stats   65   9413 346318 1348166  8185/7842/461   28817/5406    49  869   26.58)
(smt.stats   66   9514 349292 1365146  8194/7932/461   29706/5406    49  869   26.67)
(smt.stats   67   9625 354799 1394215  8196/7934/461   30000/5406    49  869   26.67)
(smt.stats   68   9747 358987 1429516  8206/7942/461   30239/5406    49  869   26.67)
(smt.stats   69   9881 366499 1487271  8208/7946/461   30389/5406    49  869   26.67)
(smt.delete-inactive-clauses  :num-deleted-clauses 1253)
(smt.stats   70  10028 371988 1518343  8213/7950/461   29452/5406    49  869   26.77)
ramon: poll                 wall=13.000s usage=12.899s mem=28204KiB load=1.00 rootload=1.00
(smt.stats   71  10189 374223 1524960  8410/7952/461   29663/5407    49  869   26.95)
ramon: poll                 wall=14.000s usage=13.899s mem=28704KiB load=1.00 rootload=1.00
(smt.stats   72  10366 376891 1532954  8862/8360/461   30008/5411    49  869   27.23)
(smt.stats   73  10560 383054 1562302  9072/8750/461   30731/5413    49  869   27.23)
ramon: poll                 wall=15.000s usage=14.899s mem=28876KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   74  10773 392291 1625791  9293/8823/461   31524/5419    49  869   27.33)
(smt.stats   75  11007 399241 1697374  9637/9113/461   32721/5419    49  869   27.43)
(smt.stats   76  11264 417815 1861279  9652/9390/461   33558/5419    49  869   27.43)
ramon: poll                 wall=16.000s usage=15.898s mem=28996KiB load=1.00 rootload=1.00
(smt.stats   77  11546 429581 1924277  9838/9392/461   34227/5429    49  869   27.71)
(smt.stats   78  11647 433603 1948080 10012/9665/461   34839/5430    49  869   27.71)
(smt.stats   79  11758 438356 1982617 10144/9756/461   35144/5433    49  869   27.71)
(smt.stats   80  11880 442218 2014450 10254/9890/461   35689/5433    49  869   27.81)
ramon: poll                 wall=17.000s usage=16.898s mem=29304KiB load=1.00 rootload=1.00
(smt.stats   81  12014 446488 2046078 10278/9999/461   36433/5435    49  869   27.90)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   82  12161 452221 2081481 10289/10024/461   36872/5435    49  869   28.10)
(smt.stats   83  12322 456319 2103031 10577/10064/461   37217/5436    49  869   28.28)
ramon: poll                 wall=18.000s usage=17.881s mem=29864KiB load=0.98 rootload=0.98
(smt.stats   84  12693 469202 2180756 10957/10340/461   38737/5443    49  869   28.47)
(smt.stats   85  12906 475384 2229209 11174/10736/463   39761/6662    50  877   28.66)
ramon: poll                 wall=19.000s usage=18.881s mem=30348KiB load=1.00 rootload=1.00
(smt.stats   86  13140 480648 2269695 11455/10972/463   40503/6666    50  877   28.85)
ramon: poll                 wall=20.000s usage=19.881s mem=30548KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 15:45:59 2024
ramon: root.execname        z3
ramon: root.utime           19.930s
ramon: root.stime           0.010s
ramon: group.total          19.949s
ramon: group.utime          19.933s
ramon: group.stime          0.016s
ramon: group.mempeak        30804KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.068s
ramon: loadavg              0.99
