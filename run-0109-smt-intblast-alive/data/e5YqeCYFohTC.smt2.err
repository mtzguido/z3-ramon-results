ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:39:46 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         41085 MiB
ramon: sys.mem.avail        61709 MiB
ramon: sys.nprocs           1253
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/e5YqeCYFohTC.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3031740
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   5229    507  1145/987/101     101/20     9   14   19.14)
(smt.stats    1    202   6985   1284  2023/1766/101     218/29     9   14   19.24)
(smt.stats    2    313   7898   2666  2200/2023/106     329/48    11   26   19.34)
(smt.stats    3    414   9444   4059  2251/2068/110     458/61    13   31   19.45)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1276 << 1
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1276 << 1
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1276 << 1
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 1 := 1&595
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511628371 := 1276 << 1
(smt.stats    4    525  12367   5323  2352/2144/111     592/65    14   35   19.54)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1277
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1277
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1277
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1277
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1278
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1278 := 1276 << 1
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 225 := 638 << 2
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 225 := 638 << 2
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 225 := 638 << 2
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 225 := 638 << 2
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 1 := 1&2552
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 1 := 1&2552
(smt.stats    5    647  16561   7372  2423/2232/143     802/103    16   45   19.65)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 2199023255552 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 2199023255552 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 2 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 2 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 2 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 226 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 250 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 144 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 143 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 128 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 128 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 65 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 66 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 68 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 72 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 80 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 144 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 128 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 30 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 30 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 35 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 128 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 26 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 24 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 18 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  21365  10193  2562/2354/254     904/127    19   64   20.08)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 2 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 28 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 24 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 16 := 144&32256
(smt.stats    7    859  26602  15498  2628/2404/271    1027/141    22   80   20.30)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 4 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 4 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 4 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 2 := 144&32256
(smt.stats    8    981  29086  19543  2868/2640/306    1149/196    24  110   20.39)
ramon: poll                 wall=1.000s usage=0.901s mem=22108KiB load=0.90 rootload=0.89
(smt.stats    9   1115  33203  23329  2985/2750/309    1295/216    26  117   20.88)
(smt.stats   10   1216  35423  26793  3097/2776/309    1413/220    26  117   20.88)
(smt.stats   11   1327  38373  30852  3114/2869/309    1549/220    26  117   20.98)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  42470  36960  3165/2900/309    1690/223    26  117   21.08)
(smt.stats   13   1583  47324  42172  3187/2942/310    1843/266    27  119   21.24)
(smt.stats   14   1730  53156  48221  3282/3029/312    2008/283    28  122   21.34)
ramon: poll                 wall=2.000s usage=1.901s mem=22704KiB load=1.00 rootload=1.00
(smt.stats   15   1831  53960  49244  3403/3107/312    2112/283    28  122   21.53)
(smt.stats   16   1942  56012  52372  3674/3425/314    2258/291    29  123   21.53)
(smt.stats   17   2064  59764  58172  3725/3465/318    2468/333    31  131   21.53)
(smt.stats   18   2198  63410  68585  3789/3517/318    2679/334    31  131   21.66)
(smt.stats   19   2345  68752  79489  3851/3565/318    2913/335    31  131   21.66)
(smt.stats   20   2506  72689  87547  3881/3606/319    3180/418    32  133   21.76)
(smt.stats   21   2607  75198  93563  3900/3620/320    3396/447    33  135   21.76)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308161
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308164
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308168
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1308168 := 5110 << 4
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308162
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308168
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1308168 := 5110 << 4
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308168
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1308168 := 5110 << 4
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308162
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308168
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1308168 := 5110 << 4
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 2 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 2 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 9&81760
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 10222 := 2555 << 5
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 9&81760
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 10222 := 2555 << 5
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 9&81760
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 81090 := 2555 << 5
(smt.stats   22   2718  78455 100847  4005/3680/326    3630/466    34  138   22.08)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 4 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 4 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 3 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 9&81760
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 1 := 9&81760
(smt.stats   23   2840  81840 106498  4044/3727/347    3850/468    34  138   22.29)
ramon: poll                 wall=3.000s usage=2.901s mem=23620KiB load=1.00 rootload=1.00
(smt.stats   24   2974  85583 114503  4095/3773/347    4027/515    35  144   22.38)
(smt.stats   25   3121  91784 125958  4110/3810/352    4218/549    36  145   22.38)
(smt.stats   26   3282  99510 137199  4258/3820/352    4454/580    37  160   22.48)
ramon: poll                 wall=4.000s usage=3.901s mem=23808KiB load=1.00 rootload=1.00
(smt.stats   27   3459 104515 147915  4481/4005/352    4769/586    37  160   22.59)
(smt.stats   28   3560 108755 155282  4528/4193/353    4931/638    38  163   22.85)
ramon: poll                 wall=5.000s usage=4.900s mem=24160KiB load=1.00 rootload=1.00
(smt.stats   29   3671 113114 163718  4627/4230/353    5146/641    38  163   22.85)
(smt.stats   30   3793 117852 178253  4783/4339/353    5402/647    38  163   22.94)
(smt.stats   31   3927 122087 191594  4872/4502/354    5728/681    39  167   23.04)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074 126851 200699  4888/4584/355    6130/715    40  170   23.13)
ramon: poll                 wall=6.000s usage=5.900s mem=24476KiB load=1.00 rootload=1.00
(smt.stats   33   4235 134574 223024  4936/4633/357    6474/858    41  175   23.13)
(smt.stats   34   4412 140492 237678  5083/4679/357    6794/860    41  175   23.23)
(smt.stats   35   4606 147208 254409  5112/4804/359    7152/909    42  176   23.32)
(smt.stats   36   4707 150475 265997  5125/4816/359    7341/947    43  180   23.32)
ramon: poll                 wall=7.000s usage=6.900s mem=24656KiB load=1.00 rootload=1.00
(smt.stats   37   4818 155553 281631  5205/4869/360    7555/971    44  180   23.43)
(smt.stats   38   4940 160565 294634  5308/4911/361    7750/975    44  180   23.43)
(smt.delete-inactive-clauses  :num-deleted-clauses 246)
(smt.stats   39   5074 163835 308423  5379/5065/361    7809/1021    45  182   23.53)
(smt.stats   40   5221 168370 318590  5406/5084/361    8164/1022    45  182   23.62)
(smt.stats   41   5382 174884 340375  5476/5112/361    8462/1023    45  182   23.72)
ramon: poll                 wall=8.000s usage=7.899s mem=25092KiB load=1.00 rootload=1.00
(smt.stats   42   5559 178164 355672  5594/5281/362    9083/1095    46  194   23.72)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 91 := 38698033127&141
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 138 := 38698033127&142
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 138 := 38698033127&142
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 138 := 38698033127&138
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 138 := 38698033127&138
(smt.stats   43   5753 184692 378282  5719/5368/368    9663/1199    47  195   23.83)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   44   5966 191264 407469  5751/5436/374   10213/1199    47  195   23.94)
(smt.stats   45   6067 193671 416202  5773/5453/376   10422/1261    48  210   23.94)
(smt.stats   46   6178 197891 425902  5803/5474/376   10581/1261    48  210   24.07)
ramon: poll                 wall=9.000s usage=8.899s mem=25480KiB load=1.00 rootload=1.00
(smt.stats   47   6300 201125 430793  5936/5491/376   10763/1267    48  210   24.12)
(smt.stats   48   6434 204742 442358  6067/5693/377   11012/1303    49  224   24.12)
ramon: poll                 wall=10.000s usage=9.899s mem=25544KiB load=1.00 rootload=1.00
(smt.stats   49   6581 208969 450569  6115/5761/377   11310/1309    49  224   24.21)
(smt.stats   50   6742 216173 497284  6178/5856/378   11678/1347    50  228   24.21)
(smt.stats   51   6919 222685 533079  6220/5873/378   12089/1348    50  228   24.31)
(smt.stats   52   7113 229303 556128  6275/5916/379   12554/1451    51  237   24.41)
ramon: poll                 wall=11.000s usage=10.899s mem=25736KiB load=1.00 rootload=1.00
(smt.stats   53   7326 237002 582026  6397/5988/379   13054/1454    51  237   24.52)
(smt.stats   54   7560 243049 606929  6462/6117/379   13674/1454    51  237   24.61)
(smt.stats   55   7661 247303 627403  6471/6156/379   13906/1454    51  237   24.61)
(smt.stats   56   7772 251475 643063  6482/6158/379   14140/1454    51  237   24.61)
(smt.stats   57   7894 254503 659932  6491/6174/379   14459/1454    51  237   24.71)
(smt.stats   58   8028 257617 677538  6501/6186/380   14991/1609    52  247   24.71)
ramon: poll                 wall=12.000s usage=11.899s mem=26120KiB load=1.00 rootload=1.00
(smt.stats   59   8175 261868 696745  6516/6193/383   15433/1609    52  247   24.80)
(smt.stats   60   8336 268894 719436  6654/6213/383   16009/1723    53  252   24.90)
ramon: poll                 wall=13.000s usage=12.898s mem=26348KiB load=1.00 rootload=1.00
(smt.stats   61   8513 272216 742014  6790/6388/383   16557/1727    53  252   25.01)
(smt.stats   62   8707 277585 763512  6960/6492/383   16897/1729    53  252   25.01)
ramon: poll                 wall=14.000s usage=13.898s mem=26548KiB load=1.00 rootload=1.00
(smt.stats   63   8920 281557 794516  7120/6668/383   17297/1733    53  252   25.11)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   64   9154 288181 812443  7230/6827/384   17989/1859    54  260   25.20)
(smt.stats   65   9411 296835 849421  7313/6998/385   18637/1937    55  261   25.33)
(smt.stats   66   9512 298534 855889  7317/7001/385   18849/1937    55  261   25.44)
(smt.stats   67   9623 302295 880618  7324/7009/385   19104/1937    55  261   25.44)
ramon: poll                 wall=15.000s usage=14.898s mem=26768KiB load=1.00 rootload=1.00
(smt.stats   68   9745 306049 903247  7327/7012/385   19338/1937    55  261   25.44)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 1 := 77396066254&902109
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&902109
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&902105
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&902099
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&902097
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&81809
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&81809
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&81969
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 2597616011830181937 := 3524 << 37
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&81843
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&81841
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&81937
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 2597616011830181905 := 3524 << 37
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 77396066254&81937
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 2597616011830181905 := 3524 << 37
(smt.stats   69   9879 309227 919002  7439/7014/385   19544/1943    55  261   25.55)
(smt.delete-inactive-clauses  :num-deleted-clauses 3071)
(smt.stats   70  10026 312542 941295  7547/7204/405   16981/2026    56  265   25.55)
(smt.stats   71  10187 316492 965005  7775/7235/405   17281/2028    56  265   25.64)
ramon: poll                 wall=16.000s usage=15.898s mem=27116KiB load=1.00 rootload=0.99
(smt.stats   72  10364 319528 979743  8050/7468/405   17605/2151    57  265   25.75)
(smt.stats   73  10558 324956 997428  8320/7859/405   18309/2153    57  265   25.84)
ramon: poll                 wall=17.000s usage=16.898s mem=27224KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   74  10771 332678 1031880  8428/8036/405   18826/2159    57  265   25.84)
(smt.stats   75  11005 340211 1067212  8471/8143/405   19486/2159    57  265   26.10)
(smt.stats   76  11262 351143 1108944  8646/8162/405   20067/2168    57  265   26.10)
ramon: poll                 wall=18.000s usage=17.897s mem=27540KiB load=1.00 rootload=1.00
(smt.stats   77  11544 360643 1148398  8795/8362/405   20850/2172    57  265   26.27)
(smt.stats   78  11645 363701 1169390  8857/8499/405   21095/2174    57  265   26.37)
(smt.stats   79  11756 367628 1195844  8874/8555/405   21213/2175    57  265   26.37)
ramon: poll                 wall=19.002s usage=18.899s mem=27924KiB load=1.00 rootload=1.00
(smt.stats   80  11878 372453 1215965  9021/8569/405   21575/2175    57  265   26.48)
(smt.stats   81  12012 375142 1233823  9096/8734/405   21828/2176    57  265   26.57)
(smt.stats   82  12159 378525 1250701  9252/8811/405   22068/2179    57  265   26.57)
(smt.stats   83  12320 383507 1281737  9328/8974/405   22612/2181    57  265   26.67)
ramon: poll                 wall=20.000s usage=19.897s mem=28096KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 15:40:06 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.010s
ramon: group.total          19.969s
ramon: group.utime          19.953s
ramon: group.stime          0.016s
ramon: group.mempeak        28380KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.072s
ramon: loadavg              0.99
