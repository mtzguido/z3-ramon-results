ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:30:23 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29546 MiB
ramon: sys.mem.avail        62088 MiB
ramon: sys.nprocs           1391
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/1mJgHcUINrNO.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             597796
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 4096&1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 4096&1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 4096&1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370496 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370496 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370496 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 8191 := 2251799813685249 << 13
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 8192 := 4503599627370498 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 8191 := 2251799813685249 << 13
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370496 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1 := 2251799813685249 << 13
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370498 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1 := 2251799813685249 << 13
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4095 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4096 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4095 := 4096&8192
(smt.stats    0    101   2635    356  1343/1189/114      90/9     5   18   52.05)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4094 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 8 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 16 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 32 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 64 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 128 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 256 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 512 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1024 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2048 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1024 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2048 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 1 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4096 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4096 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4095 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4094 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 8 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 16 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 32 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 64 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 128 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 256 := 4096&8192
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   61.3497     10000        49          0            1        2)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 260 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 260 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 260 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 258 := 4096&8192
(smt.stats    1    202   5141   1213  1795/1634/234     276/82     9   52   52.75)
(smt.stats    2    313   8856   2731  2012/1692/234     448/111     9   52   52.84)
(smt.stats    3    414   9464   3617  2711/2043/234     546/173     9   52   53.04)
(smt.stats    4    525  12117   7926  2968/2716/241     676/204    12   63   53.13)
(sat.ddfw       1      1   29.7649     20001        98          1            1        3)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&4504699407499282
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 4504699407499284 := 2252349703749641 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&4504699407499282
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 4504699407499284 := 2252349703749641 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 1&4504699407503358
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&4785658790948862
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 2392829410140160 := 2392829395474431 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&4785658790940670
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 1 := 1&4785658790940670
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&562949953425406
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 1 := 1&562949953425406
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&562949953425406
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 1 := 1&562949953425406
(smt.stats    5    647  16589  11675  3058/2800/263     768/259    15  127   53.33)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    748  20576  14369  3100/2837/266     870/274    17  134   53.42)
(sat.ddfw       1      1   35.1494     40001       196          2            1        5)
(smt.stats    7    859  26439  20517  3148/2870/266     990/274    17  134   53.42)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 3 := 140737488355328&4504699407503359
(smt.stats    8    981  28617  24816  3192/2922/273    1123/288    18  140   53.62)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 36028797018963968&4095
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 36028797018963968&4095
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 36028797018963968&4095
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 4095 := 2305843009213693950 << 55
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 36028797018963968&4095
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 4095 := 2305843009213689858 << 55
(smt.stats    9   1115  31738  32114  3281/2938/278    1452/301    20  149   53.80)
(sat.ddfw       1      1   33.1492     70001       343          3            1        8)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&504403158265491454
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&504403158265491454
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&432345564227571710
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 432345564227571710 := 2305843009213690882 << 54
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&432345564227571710
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 432345564227571710 := 2305843009213690882 << 54
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&288230376151715838
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 288230376151715838 := 2305843009213690888 << 54
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&288230376151715838
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 288230376151715838 := 2305843009213690888 << 54
ramon: poll                 wall=1.003s usage=0.902s mem=56344KiB load=0.90 rootload=0.89
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&288230376151715838
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 288230376151715838 := 2305843009213690882 << 56
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&108086391056895998
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&108086391056895998
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&108086391056895998
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 8192 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 16384 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 32768 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 65536 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 131072 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 262144 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 524288 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1048576 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2097152 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4194304 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 8388608 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 16777216 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 33554432 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 67108864 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217728 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 268435456 := 72057594037927936&72057594037932030
(smt.stats   10   1216  33753  35520  3535/3029/288    1603/307    20  149   54.38)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 524288 := 72057594037927936&90071992547405822
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 524288 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217744 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217744 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217792 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217760 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217760 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217792 := 72057594037927936&72057594037932030
(smt.stats   11   1327  37361  44340  3569/3285/429    1789/447    22  190   54.38)
(smt.stats   12   1449  41788  52399  3646/3365/439    1952/510    24  202   54.67)
(sat.ddfw       1      1   29.5639    110001       539          4            1       12)
(smt.stats   13   1583  47374  66158  3665/3384/441    2221/596    26  218   54.67)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606846975
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 9223372036854775807 := 2305843009213692416 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606846975
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 9223372036854775807 := 2305843009213692416 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606846975
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 2305843009213693951 := 2305843009213692416 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606846975
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 2305843009213693951 := 2305843009213692416 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 2&1152921504606843904
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1152921504606843907 := 1152921504606846208 << 2
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 2&1152921504606843904
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1152921504606843907 := 1152921504606846208 << 2
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 2&1152921504606843904
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1152921504606843907 := 1152921504606846208 << 2
(smt.stats   14   1730  52642  74720  3733/3395/441    2407/600    26  218   54.81)
(smt.stats   15   1831  56481  79859  3851/3546/457    2511/626    28  224   54.99)
(smt.stats   16   1942  59999  91383  3881/3564/466    2647/684    30  247   55.09)
(smt.stats   17   2064  62584  99794  3979/3633/472    2820/705    31  263   55.30)
(sat.ddfw       1      1   26.1775    160000       784          5            1       17)
ramon: poll                 wall=2.000s usage=1.899s mem=58300KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   23.1843    220001      1078          6            1       23)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   18   2198  62992 100261  4033/3695/472    2962/722    31  263   56.26)
ramon: poll                 wall=3.000s usage=2.903s mem=59160KiB load=1.00 rootload=1.00
(smt.stats   19   2345  65227 107164  4598/4101/474    3194/788    32  266   56.15)
(sat.ddfw       1      1   20.7777    290001      1421          7            1       30)
(smt.stats   20   2506  66272 110729  4738/4362/474    3370/801    32  266   56.44)
(smt.stats   21   2607  67519 114912  5223/4754/475    3504/852    33  267   56.44)
ramon: poll                 wall=4.000s usage=3.902s mem=59200KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   18.7793    370001      1813          8            1       38)
(smt.stats   22   2718  68039 115958  5282/4940/475    3619/859    33  267   56.63)
(smt.stats   23   2840  68807 117684  5684/5268/475    3777/877    33  267   56.63)
ramon: poll                 wall=5.003s usage=4.909s mem=59220KiB load=1.00 rootload=1.01
(sat.ddfw       1      1   17.0584    460001      2254          9            1       47)
(smt.stats   24   2974  69116 118491  5864/5518/475    3916/882    33  267   56.92)
(smt.stats   25   3121  71857 128734  6354/5917/475    4080/887    33  267   56.82)
ramon: poll                 wall=6.000s usage=5.905s mem=59960KiB load=1.00 rootload=0.99
(smt.stats   26   3282  76912 152443  6402/6055/475    4360/889    33  267   56.82)
(smt.stats   27   3459  83164 177588  6461/6098/475    4698/891    33  267   56.92)
(sat.ddfw       1      1   15.6397    560001      2745         10            1       57)
(smt.stats   28   3560  85259 190189  6485/6135/476    4962/1134    34  269   57.01)
(smt.stats   29   3671  87277 201213  6544/6154/476    5240/1135    34  269   57.01)
(smt.stats   30   3793  89140 206759  6666/6235/476    5420/1136    34  269   57.01)
ramon: poll                 wall=7.000s usage=6.905s mem=60036KiB load=1.00 rootload=1.00
(smt.stats   31   3927  90658 224829  6800/6327/476    5582/1140    34  269   57.11)
(smt.stats   32   4074  94556 245948  6849/6492/478    5870/1407    35  273   57.37)
(smt.stats   33   4235  98189 260011  6977/6532/478    6214/1455    36  274   57.54)
(sat.ddfw       1      1    14.468    670001      3284         11            1       68)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   34   4412 102635 291165  7121/6693/478    6505/1458    36  274   57.54)
ramon: poll                 wall=8.003s usage=7.924s mem=59952KiB load=1.02 rootload=1.02
(smt.stats   35   4612 112275 337223  7156/6805/483    7101/1655    38  288   57.64)
(smt.stats   36   4713 116553 362269  7179/6808/483    7437/1658    38  288   57.64)
(smt.stats   37   4824 118225 372682  7218/6835/483    7561/1658    38  288   57.73)
(smt.stats   38   4946 121293 389946  7241/6890/485    7807/1808    39  300   57.83)
(smt.delete-inactive-clauses  :num-deleted-clauses 39)
(smt.stats   39   5080 125423 402695  7266/6899/485    7913/1810    39  300   57.83)
(sat.ddfw       1      1   13.5349    790001      3872         12            1       80)
(smt.stats   40   5227 129332 415415  7385/6937/485    8086/1859    40  302   57.83)
ramon: poll                 wall=9.000s usage=9.019s mem=60348KiB load=1.10 rootload=1.10
(smt.stats   41   5388 134598 428729  7551/7077/485    8273/1866    40  302   57.92)
(smt.stats   42   5565 140562 452264  7685/7334/486    8703/2028    41  314   58.23)
(smt.stats   43   5759 148398 474420  7800/7340/486    8991/2031    41  314   58.32)
ramon: poll                 wall=10.000s usage=9.947s mem=60532KiB load=0.93 rootload=0.92
(smt.stats   44   5972 156257 513320  7846/7461/487    9450/2046    42  317   58.32)
(smt.stats   45   6073 158676 531473  7890/7514/487    9671/2046    42  317   58.43)
(sat.ddfw       1      1   12.5072    920001      4509         13            1       93)
(smt.stats   46   6184 162153 549287  7969/7551/488    9817/2150    43  321   58.52)
(smt.stats   47   6306 166564 580905  8050/7645/488    9950/2150    43  321   58.52)
ramon: poll                 wall=11.003s usage=10.871s mem=60760KiB load=0.92 rootload=0.93
(smt.stats   48   6440 170991 608837  8150/7729/488   10164/2150    43  321   58.52)
(smt.stats   49   6587 175289 631357  8262/7821/488   10333/2151    43  321   58.74)
(smt.stats   50   6748 180673 659767  8324/7920/488   10522/2151    43  321   58.88)
(sat.ddfw       1      1   11.7233   1060001      5196         14            1      108)
ramon: poll                 wall=12.000s usage=11.898s mem=61240KiB load=1.03 rootload=1.02
(smt.stats   51   6925 183475 685696  8436/8010/488   10722/2152    43  321   58.88)
(smt.stats   52   7119 187438 707201  8491/8128/488   10940/2152    43  321   58.88)
(smt.stats   53   7332 195383 743467  8555/8148/488   11226/2155    43  321   58.88)
ramon: poll                 wall=13.000s usage=12.836s mem=61552KiB load=0.94 rootload=0.94
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   54   7566 201223 775437  8673/8297/489   11884/2367    44  323   59.07)
(smt.stats   55   7667 202964 783143  8796/8389/490   12025/2370    44  323   59.07)
(sat.ddfw       1      1   10.9417   1210001      5931         15            1      123)
(smt.stats   56   7778 206511 818093  8870/8445/490   12169/2377    44  323   59.17)
ramon: poll                 wall=14.000s usage=13.823s mem=61772KiB load=0.99 rootload=0.99
(smt.stats   57   7900 208399 835236  8988/8559/490   12311/2481    45  324   59.65)
(smt.stats   58   8034 211598 855095  9098/8659/490   12450/2491    45  324   59.74)
(smt.stats   59   8181 214478 876600  9137/8754/490   12583/2494    45  324   59.74)
(smt.stats   60   8342 218526 890391  9148/8777/490   12783/2494    45  324   59.84)
ramon: poll                 wall=15.000s usage=14.841s mem=61980KiB load=1.02 rootload=1.01
(smt.stats   61   8519 224564 923508  9158/8783/490   13091/2495    45  324   59.84)
(smt.stats   62   8713 230137 947127  9173/8795/491   13455/2576    46  325   59.84)
(sat.ddfw       1      1   10.3916   1370001      6715         16            1      139)
(smt.stats   63   8926 237569 996241  9252/8817/491   13722/2577    46  325   59.93)
ramon: poll                 wall=16.003s usage=15.847s mem=62156KiB load=1.00 rootload=1.01
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   64   9160 243411 1045688  9303/8903/493   14170/2737    47  327   60.12)
(smt.stats   65   9417 249828 1101180  9324/8945/493   14664/2760    48  331   60.22)
(smt.stats   66   9518 251894 1118575  9332/8961/493   14822/2760    48  331   60.32)
(smt.stats   67   9629 253611 1135976  9332/8961/493   14942/2760    48  331   60.32)
ramon: poll                 wall=17.003s usage=16.844s mem=62608KiB load=1.00 rootload=1.00
(smt.stats   68   9751 259488 1176125  9347/8976/495   15051/2924    49  347   60.32)
(smt.stats   69   9885 261430 1191240  9354/8983/495   15218/2924    49  347   60.32)
(sat.ddfw       1      1      9.83   1540001      7549         17            1      156)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10032 264546 1217725  9359/8986/496   15376/2924    49  347   60.32)
(smt.stats   71  10193 267884 1244079  9384/8992/496   15546/2933    50  350   60.41)
ramon: poll                 wall=18.003s usage=17.844s mem=62852KiB load=1.00 rootload=1.00
(smt.stats   72  10370 270127 1254857  9500/9026/496   15779/2937    50  350   60.51)
(smt.stats   73  10564 274194 1293459  9541/9157/497   16020/2985    51  351   60.51)
ramon: poll                 wall=19.000s usage=18.840s mem=62980KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   9.32304   1720001      8431         18            1      174)
(smt.stats   74  10777 282988 1355569  9649/9178/498   16274/2994    52  355   60.60)
(smt.stats   75  11011 289381 1400472  9704/9299/498   16603/2995    52  355   60.60)
ramon: poll                 wall=20.000s usage=19.813s mem=63168KiB load=0.97 rootload=0.98
ramon: end                  Fri Nov  1 21:30:43 2024
ramon: root.execname        z3
ramon: root.utime           19.810s
ramon: root.stime           0.010s
ramon: group.total          19.822s
ramon: group.utime          19.810s
ramon: group.stime          0.012s
ramon: group.mempeak        63424KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.013s
ramon: loadavg              0.99
