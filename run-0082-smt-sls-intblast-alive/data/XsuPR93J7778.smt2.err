ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:40:47 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28001 MiB
ramon: sys.mem.avail        62085 MiB
ramon: sys.nprocs           1379
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/XsuPR93J7778.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             842006
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   99.0099     10000        49          0            1        2)
(smt.stats    0    101   4130   2461  1188/1063/103      93/12     7   16   52.16)
(sat.ddfw       1      1    42.021     20001        98          1            1        3)
(smt.stats    1    202   4660   3230  2031/1844/107     200/36     9   21   52.25)
(smt.stats    2    313   5651   5096  2187/1958/107     318/99    10   22   52.35)
(sat.ddfw       1      1    43.956     40001       196          2            1        5)
(smt.stats    3    414   6197   5825  2648/2422/109     431/125    11   23   52.35)
(smt.stats    4    525   6867   7679  2684/2454/118     558/162    13   29   52.46)
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 0&2048
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 0 := 65536 >>l 53
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 0&2048
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 0 := 65536 >>l 53
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 0&2048
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 0 := 65536 >>l 53
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 0&2048
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 0 := 9007199254740992 >>l 53
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 0&2048
lshr: (lshr[48] (bv2int %1) (mod (bv2int %0) 48)) 137438953471 := 137438953471 >>l 37
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 0&2048
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 0 := 9007199254806528 >>l 53
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 0&2048
lshr: (lshr[48] (bv2int %1) (mod (bv2int %0) 48)) 1 := 137438953471 >>l 37
(smt.stats    5    649   7947   9740  2740/2507/125     689/172    14   32   52.56)
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&2048
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 27021597764222976 >>l 53
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&2048
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 27021597764222976 >>l 53
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 2 := 2&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 4 := 4&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 8 := 8&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 16 := 16&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 32 := 32&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 64 := 64&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 128 := 128&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 256 := 256&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 512 := 512&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 64 := 64&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 319 := 319&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 256 := 256&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 1024 := 1024&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 1024 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 256 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 1024 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 64 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 64 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 64 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 128 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 63 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 62 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 60 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 4 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 8 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 4 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 8 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 16 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 32 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 32 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 4 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 16 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 512 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 8 := 8&2048
(smt.stats :restarts  :decisions   :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    750   8824  12268  2904/2601/210     787/181    15   55   52.96)
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&2048
lshr: (lshr[48] (bv2int %1) (mod (bv2int %0) 48)) 2 := 137438953472 >>l 37
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 1 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 2 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 4 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 8 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 16 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 32 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 64 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 128 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 264 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 264 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 272 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 272 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 272 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 272 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 272 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 264 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 264 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 264 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 8 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 32 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 64 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 32 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 64 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 32 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 32 := 2047&2048
(smt.stats    7    861  10137  17605  2978/2724/284     908/186    17   59   53.16)
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2047&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 2 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 1 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 1 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 1 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 2 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 2 := 2047&2048
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&2048
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 1 := 1&2048
(sat.ddfw       1      1   38.7597     70001       343          3            1        8)
(smt.stats    8    983  11686  23078  3032/2787/319    1059/206    19   84   53.25)
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 129&70368744177664
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 281474976710785 := 1179943102371069952 >>l 18
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 2045&70368744177664
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 2045 := 18437736874454810624 >>l 18
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&70368744177664
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 1179943102371069952 >>l 18
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 4501125726208&70368744177664
lshr: (lshr[48] (bv2int %1) (mod (bv2int %0) 48)) 130 := 18004502904832 >>l 2
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 4432406249472&70368744177664
lshr: (lshr[48] (bv2int %1) (mod (bv2int %0) 48)) 130 := 17729624997888 >>l 2
(smt.stats    9   1117  15816  26853  3066/2804/321    1226/234    20   93   53.47)
ramon: poll                 wall=1.000s usage=0.886s mem=55568KiB load=0.89 rootload=0.88
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 34359738368&70368744177664
lshr: (lshr[48] (bv2int %1) (mod (bv2int %0) 48)) 130 := 137438953472 >>l 2
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 130&70368744177664
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 130 := 130&70368744177664
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 130&70368744177664
band: (band[48] (lshr[48] (bv2int %1) (mod #100 48)) (if (= #485 47) 140737488355328 (if #487 70368744177664 #579))) 130 := 130&70368744177664
(smt.stats   10   1218  20057  31473  3160/2891/332    1344/252    22   97   53.66)
(smt.stats   11   1329  22969  37561  3223/2932/333    1569/270    23  104   54.05)
(sat.ddfw       1      1   33.4448    110001       539          4            1       12)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1451  26105  42917  3279/2963/333    1749/270    23  104   54.14)
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 256 := 256&34359738368
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 256 := 256&34359738368
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 32 := 32&34359738368
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 32 := 32&34359738368
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 16 := 16&34359738368
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 16 := 16&34359738368
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&34359738368
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 18446744073709486080 >>l 29
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&34359738368
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 4647714815446351872 >>l 29
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&34359738368
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 4647714815446351872 >>l 29
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&34359738368
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 4647714815446351872 >>l 29
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&34359738368
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 4647714815446351872 >>l 29
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&34359738368
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 4647714815446351872 >>l 29
(smt.stats   13   1585  28958  50813  3309/3018/335    1912/327    24  104   54.25)
(smt.stats   14   1732  33436  58392  3339/3058/340    2050/339    25  110   54.25)
(smt.stats   15   1833  36586  64665  3388/3101/341    2159/343    26  110   54.25)
(smt.stats   16   1944  38048  69594  3394/3125/342    2276/353    27  111   54.37)
(sat.ddfw       1      1   29.0186    160000       784          5            1       17)
(smt.stats   17   2066  40885  75780  3403/3131/342    2405/355    28  115   54.37)
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&0
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 281474976710657 := 18446744073709486080 >>l 16
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&0
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 281474976710657 := 18446744073709486080 >>l 16
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 0&0
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 281474976710656 := 18446744073709486080 >>l 16
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&0
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 131072 >>l 16
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 1&0
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1 := 131072 >>l 16
(smt.stats   18   2200  42196  80748  3423/3141/342    2573/356    28  115   54.46)
ramon: poll                 wall=2.000s usage=1.886s mem=56604KiB load=1.00 rootload=0.99
(smt.stats   19   2347  47494  91179  3447/3172/348    2718/364    29  118   54.46)
(smt.stats   20   2508  52184 101620  3459/3185/350    2914/382    31  123   54.77)
(smt.stats   21   2609  55189 108933  3477/3203/350    3011/382    31  123   54.77)
(smt.stats   22   2720  58035 113685  3530/3245/352    3179/422    32  130   54.77)
(smt.stats   23   2842  63107 120138  3535/3250/352    3315/422    32  130   54.87)
(sat.ddfw       1      1   25.4998    220001      1078          6            1       23)
(smt.stats   24   2976  65067 127754  3543/3258/355    3511/435    33  138   54.87)
(smt.stats   25   3123  68327 135002  3548/3263/355    3747/435    33  138   54.97)
(smt.stats   26   3284  72604 147320  3558/3273/355    3911/476    34  158   54.97)
(smt.stats   27   3461  77008 157910  3617/3279/357    4117/485    35  158   55.07)
ramon: poll                 wall=3.000s usage=2.886s mem=57252KiB load=1.00 rootload=1.00
(smt.stats   28   3562  77983 161523  3628/3340/358    4254/487    36  159   55.07)
(smt.stats   29   3674  80683 171043  3634/3349/358    4386/487    36  159   55.16)
(sat.ddfw       1      1   22.6684    290001      1421          7            1       30)
(smt.stats   30   3796  83749 178576  3649/3352/358    4515/500    37  162   55.16)
(smt.stats   31   3930  84959 187633  3652/3367/358    4721/500    37  162   55.16)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4077  88146 198753  3675/3381/359    4904/506    38  165   55.16)
(smt.stats   33   4238  90915 207482  3681/3395/360    5068/507    38  165   55.26)
(smt.stats   34   4415  93415 219725  3702/3402/360    5245/520    39  167   55.64)
(smt.stats   35   4609  97229 233794  3721/3429/362    5479/524    40  184   55.73)
(smt.stats   36   4710  98222 241608  3735/3438/365    5589/555    41  190   55.73)
(smt.stats   37   4821  99707 249446  3738/3453/367    5676/561    42  215   55.73)
ramon: poll                 wall=4.000s usage=3.881s mem=57796KiB load=0.99 rootload=1.00
(sat.ddfw       1      1   20.3046    370001      1813          8            1       38)
(smt.stats   38   4943 102825 261687  3750/3465/368    5807/561    42  215   55.73)
(smt.delete-inactive-clauses  :num-deleted-clauses 274)
(smt.stats   39   5077 105482 272448  3760/3475/369    5707/568    43  219   55.73)
(smt.stats   40   5224 107402 283124  3765/3480/369    5869/569    44  223   55.73)
(smt.stats   41   5385 111265 298387  3766/3481/369    6057/569    44  223   55.73)
(smt.stats   42   5562 115459 314334  3783/3497/370    4651/575    45 1826   55.84)
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 17729624997890&4398046511104
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 1161946433486585858 := 1161928703861653504 >>l 22
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 17592186044418&4398046511104
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 299067162755074 := 1152921504606912512 >>l 22
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 17592186044417&4398046511104
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 299067162755073 := 1152921504606846976 >>l 22
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 17592186044417&4398046511104
lshr: (lshr[64] (* 65536 (bv2int %1)) (mod (+ 16 #100 #303) 64)) 299067162755073 := 1152921504606846976 >>l 22
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 293203100741&4398046511104
lshr: (lshr[48] (bv2int %1) (mod (bv2int %0) 48)) 4691249611860 := 18764998447440 >>l 6
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 293203100740&4398046511104
lshr: (lshr[48] (bv2int %1) (mod (bv2int %0) 48)) 4691249611845 := 18764998447408 >>l 6
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 0 := 293203100740&4398046511104
lshr: (lshr[48] (bv2int %1) (mod (bv2int %0) 48)) 4691249611845 := 18764998447384 >>l 6
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 512 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 512 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 512 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 512 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 512 := 4398046447104&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 512 := 4398046447104&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 1024 := 4398046447104&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 1024 := 4398046447104&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 2048 := 4398046447104&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 2048 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 2048 := 4398046446662&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 2048 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 4096 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 8192 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 4096 := 4398046446719&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 16384 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 32768 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 65536 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 131072 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 262144 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 81920 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 98304 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 81920 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 81920 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 81920 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 98304 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 98304 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 98304 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 67584 := 4398046446719&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 67584 := 4398046446661&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 67584 := 4398046446719&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 65536 := 4398046446719&4398046511104
band: (band[48] (lshr[64] (* 65536 #99) (mod #304 64)) (if (= #602 63) 18446744073709551616 (if #604 9223372036854775808 #728))) 65536 := 4398046446661&4398046511104
(smt.stats   43   5756 118959 326933  3959/3618/423    4954/619    46 1828   56.20)
(sat.ddfw       1      1   18.4237    460001      2254          9            1       47)
ramon: poll                 wall=5.000s usage=4.881s mem=58624KiB load=1.00 rootload=1.00
(smt.stats   44   5969 122773 342055  4223/3923/450    5285/656    47 1849   56.40)
(smt.stats   45   6070 125189 350596  4232/3932/453    5499/656    47 1849   56.49)
(smt.stats   46   6181 130468 367182  4268/3956/454    5784/756    48 1876   56.49)
(smt.stats   47   6303 134775 389548  4324/4007/454    6056/757    48 1876   56.68)
(smt.stats   48   6437 137340 400872  4443/4101/454    6273/757    48 1876   56.78)
(smt.stats   49   6584 140177 413572  4448/4110/457    6623/899    49 1878   57.08)
(smt.stats   50   6745 143967 432986  4454/4112/457    7013/912    50 1886   57.18)
(smt.stats   51   6922 149097 453820  4462/4124/460    7415/995    51 1891   57.37)
ramon: poll                 wall=6.004s usage=5.932s mem=59548KiB load=1.05 rootload=1.05
(sat.ddfw       1      1   16.7954    560001      2745         10            1       57)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions      )
(smt.stats   52   7117 154301 472305  4514/4167/461    7885/1005    52 1900   57.46)
(smt.stats   53   7330 159359 496946  4525/4178/464    8115/1106    54 1933   57.56)
(smt.stats   54   7564 169833 524903  4544/4197/469    8806/1122    55 1968   57.66)
(smt.stats   55   7665 172112 535360  4547/4200/471    8995/1233    56 1983   58.12)
(smt.stats   56   7776 176751 556116  4561/4211/471    9170/1233    56 1983   58.12)
ramon: poll                 wall=7.000s usage=6.924s mem=60356KiB load=1.00 rootload=0.98
(smt.stats   57   7898 181201 573692  4562/4212/471    9326/1233    56 1983   58.12)
(sat.ddfw       1      1    15.417    670001      3284         11            1       68)
(smt.stats   58   8032 184137 592335  4566/4216/471    9482/1233    56 1983   58.22)
(smt.stats   59   8179 186068 610330  4568/4218/471    9660/1233    56 1983   58.22)
(smt.stats   60   8340 186881 619926  4580/4227/472    9883/1237    57 1992   58.22)
(smt.stats   61   8517 191909 638535  4595/4239/472   10228/1237    57 1992   58.32)
ramon: poll                 wall=8.000s usage=7.921s mem=60676KiB load=1.00 rootload=1.00
(smt.stats   62   8711 206282 680293  4596/4240/472   10477/1237    57 1992   58.32)
(smt.stats   63   8924 216393 714310  4603/4247/473   10911/1296    58 2006   58.79)
(sat.ddfw       1      1   14.2501    790001      3872         12            1       80)
(smt.stats   64   9158 225949 754991  4612/4256/473   11327/1296    58 2006   58.89)
(smt.stats   65   9415 238876 800830  4617/4261/473   11673/1296    58 2006   58.89)
ramon: poll                 wall=9.000s usage=8.921s mem=61020KiB load=1.00 rootload=1.00
(smt.stats   66   9516 241631 813548  4619/4263/474   11810/1330    59 2016   58.98)
(smt.stats   67   9627 242617 822403  4619/4263/474   11957/1330    59 2016   58.98)
(smt.stats   68   9749 244194 832016  4622/4266/474   12085/1330    59 2016   58.98)
(smt.stats   69   9883 248873 848816  4625/4269/475   12234/1338    60 2029   59.09)
(smt.delete-inactive-clauses  :num-deleted-clauses 673)
(smt.stats   70  10030 250029 856423  4626/4270/475   11713/1338    60 2029   59.09)
(smt.stats   71  10191 253598 874191  4627/4271/475   11894/1338    60 2029   59.09)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations          :lemmas          :deletions      )
(smt.stats   72  10368 260730 901470  4644/4284/475   12149/1338    60 2029   59.09)
(sat.ddfw       1      1   13.2477    920001      4509         13            1       93)
ramon: poll                 wall=10.000s usage=9.916s mem=61444KiB load=1.00 rootload=0.99
(smt.stats   73  10562 263712 917059  4655/4295/476    9922/1362    61 4545   59.20)
(smt.stats   74  10775 270722 940850  4709/4300/476   10290/1365    61 4545   59.30)
ramon: poll                 wall=11.000s usage=10.915s mem=61940KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   12.3719   1060001      5196         14            1      108)
(smt.stats   75  11009 272761 947341  4921/4356/476   10609/1376    61 4545   59.58)
(smt.stats   76  11266 277027 968853  5234/4811/476   10882/1376    61 4545   59.58)
ramon: poll                 wall=12.000s usage=11.914s mem=62020KiB load=1.00 rootload=1.00
(smt.stats   77  11548 279034 989388  5254/4886/477   11421/1465    62 4546   59.58)
(smt.stats   78  11649 279754 998698  5256/4891/477   11541/1466    62 4546   59.58)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas          :deletions      )
(smt.stats   79  11760 281374 1009178  5260/4895/477   11715/1466    62 4546   59.67)
(smt.stats   80  11882 285277 1020157  5315/4895/477   11924/1468    62 4546   59.67)
(smt.stats   81  12016 287539 1030684  5382/5017/479   12171/1502    63 4547   59.67)
ramon: poll                 wall=13.000s usage=12.794s mem=62084KiB load=0.88 rootload=0.88
(smt.stats   82  12163 294626 1047866  5402/5027/479   12375/1503    63 4547   59.67)
(sat.ddfw       1      1   11.5243   1210001      5931         15            1      123)
(smt.stats   83  12324 298225 1059622  5438/5042/479   12729/1565    64 4548   59.77)
(smt.stats   84  12501 302384 1074107  5495/5082/479   13078/1569    64 4548   59.77)
(smt.stats   85  12695 306639 1100280  5594/5144/479   13312/1570    64 4548   59.87)
ramon: poll                 wall=14.004s usage=13.782s mem=62572KiB load=0.98 rootload=0.99
(smt.stats   86  12908 310930 1125878  5641/5250/479   13609/1570    64 4548   59.87)
(smt.stats   87  13142 319686 1167563  5685/5305/480   14205/1746    65 4551   60.48)
(sat.ddfw       1      1   10.8578   1370001      6715         16            1      139)
ramon: poll                 wall=15.000s usage=14.762s mem=62712KiB load=0.98 rootload=0.98
(smt.stats   88  13399 328864 1207458  5833/5328/480   14550/1749    65 4551   60.58)
(smt.stats   89  13681 335234 1243278  5863/5498/480   15123/1749    65 4551   60.58)
ramon: poll                 wall=16.004s usage=15.822s mem=62940KiB load=1.06 rootload=1.06
(smt.stats   90  13991 345149 1312108  5886/5511/480   15935/1750    65 4551   60.67)
(smt.stats   91  14092 346247 1320722  5900/5525/480   16074/1750    65 4551   60.77)
(smt.stats   92  14203 349345 1356781  5908/5539/480   16241/1750    65 4551   60.87)
(smt.stats   93  14325 352524 1393703  5918/5551/480   16464/1750    65 4551   60.98)
(smt.stats   94  14459 354417 1419924  5922/5551/480   16609/1750    65 4551   60.98)
(sat.ddfw       1      1    10.179   1540001      7549         17            1      156)
(smt.stats   95  14606 355861 1432080  5934/5556/480   16781/1751    65 4551   60.98)
ramon: poll                 wall=17.000s usage=16.839s mem=63356KiB load=1.02 rootload=1.01
(smt.stats   96  14767 359735 1458439  5968/5567/480   17005/1751    65 4551   60.98)
(smt.stats   97  14944 360894 1479280  5985/5610/480   17210/1751    65 4551   61.08)
(smt.delete-inactive-clauses  :num-deleted-clauses 528)
(smt.stats   98  15138 367326 1516777  5989/5622/480   16947/1751    65 4551   61.08)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas          :deletions      )
(smt.stats   99  15351 368883 1545719  6032/5623/480   17176/1751    65 4551   61.08)
ramon: poll                 wall=18.000s usage=17.903s mem=63316KiB load=1.06 rootload=1.07
(smt.stats  100  15585 377195 1576683  6044/5677/480   17428/1751    65 4551   61.08)
(sat.ddfw       1      1   9.81194   1720001      8431         18            1      174)
(smt.stats  101  15842 382660 1604170  6127/5700/481   17736/1939    66 4551   61.17)
(smt.stats  102  16124 387618 1623253  6185/5795/482   18362/1940    66 4551   61.30)
ramon: poll                 wall=19.000s usage=18.997s mem=63612KiB load=1.09 rootload=1.09
(smt.stats  103  16434 390809 1651478  6206/5827/482   18763/1940    66 4551   61.30)
ramon: poll                 wall=20.000s usage=20.061s mem=64064KiB load=1.06 rootload=1.07
ramon: end                  Fri Nov  1 22:41:07 2024
ramon: root.execname        z3
ramon: root.utime           20.130s
ramon: root.stime           0.010s
ramon: group.total          20.151s
ramon: group.utime          20.131s
ramon: group.stime          0.020s
ramon: group.mempeak        64320KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.090s
ramon: loadavg              1.00
