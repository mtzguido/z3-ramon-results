ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:01:59 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28350 MiB
ramon: sys.mem.avail        62089 MiB
ramon: sys.nprocs           1362
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/jCascHR05Ot4.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             513261
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   220/219     0/0  58       0    18.57   0.00)
(sat.stats    163    790    0   220/219   163/66  58       0    18.87   0.01)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 422 :time 0.00)
(sat.stats    163    790    0   220/219   163/66  58       0    18.87   0.01)
(sat.stats    163    790    0   220/219   163/66  58       0    18.87   0.01)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 2 :time 0.00)
 (sat-probing :cost 549818.87 :time 0.00)
(sat.stats    163    790    0   222/221   162/65  58       0    18.87   0.01)
(sat.stats    186   1076    1   222/221   185/85  58       0    18.87   0.01)
(sat.stats :conflicts    :restarts     :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    329   3320    2   222/221   328/180  58       0    19.06   0.02)
(sat.stats    332   3396    3   222/221   331/180  58       0    19.06   0.02)
(sat.stats    335   3516    4   222/221   334/180  58       0    19.06   0.02)
(sat.stats    338   3636    5   222/221   337/180  58       0    19.06   0.02)
(sat.stats    341   3821    6   222/221   340/180  58       0    19.06   0.02)
(sat.stats    344   3970    7   222/221   343/180  58       0    19.06   0.02)
(sat.stats    347   4102    8   222/221   346/183  58       0    19.06   0.02)
(sat.stats    350   4174    9   223/222   349/185  58       0    19.06   0.02)
(sat.stats    353   4316   10   223/222   352/185  58       0    19.06   0.02)
(sat.stats    356   4335   11   223/222   355/188  58       0    19.06   0.02)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 1305 :time 0.00)
(sat.stats    359   4372   12   222/221   358/191  61       0    19.06   0.02)
(sat.stats    362   4405   13   222/221   361/194  61       0    19.06   0.02)
(sat.stats    365   4446   14   222/221   364/197  61       0    19.06   0.03)
(sat.stats    480   6256   20   222/221   479/252  61       0    19.16   0.04)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 2504 :time 0.00)
 (sat-cleaner :elim-literals 3 :elim-clauses 2 :cost 2877 :time 0.00)
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 1125899906842623 := 1125899906842611 << 11
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
shl: (shl[64] (bv2int %0) (mod (+ #49 #675) 64)) 29087 := 1125899906842611 << 11
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 1 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 2 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 32 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 1 := 1024&1125899906816000
(sat.stats    709  12682   63   562/559   705/334  72       0    20.14   0.15)
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 42 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 692 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 640 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 8 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 112 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 64 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 32 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 512 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 256 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 1024 := 1024&1125899906816000
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 24 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 4 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 16 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 832 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 1024 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 128 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 512 := 1125899906816000&1024
band: (band[50] (if (= #568 49) 1 (if #570 2 #666)) (shl[50] (bv2int %0) (mod #49 50))) 0 := 1024&1125899906816000
band: (band[50] (shl[64] (bv2int %0) (mod #676 64)) (if (or #687 #688 #689 #690 #691 #692 #693 #694 #695 #696 #697 #698 #699 #700 #701) 0 (if #702 1 #798))) 256 := 1125899906816000&1024
 (sat-cleaner :elim-literals 1 :elim-clauses 1 :cost 4381 :time 0.00)
 (sat-cleaner :elim-literals 2 :elim-clauses 1 :cost 5446 :time 0.00)
(sat.stats :conflicts   :restarts       :learned/bin         :gc          :time)
(sat.stats      :decisions   :clauses/bin         :units         :memory       )
(sat.stats   1064  27664   84 26114/26111  1341/652 213       0    25.04   0.51)
ramon: poll                 wall=1.000s usage=0.917s mem=31692KiB load=0.92 rootload=0.90
(sat.stats   1600  33054  200 79330/79327  1948/733 213       0    39.66   1.85)
ramon: poll                 wall=2.000s usage=1.916s mem=41152KiB load=1.00 rootload=1.00
ramon: poll                 wall=3.000s usage=2.915s mem=55796KiB load=1.00 rootload=0.99
ramon: poll                 wall=4.000s usage=3.915s mem=60420KiB load=1.00 rootload=1.00
ramon: poll                 wall=5.000s usage=4.915s mem=64832KiB load=1.00 rootload=1.00
ramon: poll                 wall=6.000s usage=5.915s mem=68612KiB load=1.00 rootload=1.00
ramon: poll                 wall=7.000s usage=6.914s mem=87556KiB load=1.00 rootload=1.00
ramon: poll                 wall=8.000s usage=7.914s mem=90000KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.914s mem=93188KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.913s mem=95032KiB load=1.00 rootload=0.99
ramon: poll                 wall=11.000s usage=10.913s mem=98160KiB load=1.00 rootload=1.00
ramon: poll                 wall=12.000s usage=11.913s mem=99684KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.913s mem=98MiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.912s mem=102MiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.912s mem=102MiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.912s mem=103MiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.911s mem=104MiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.911s mem=105MiB load=1.00 rootload=1.00
ramon: poll                 wall=19.002s usage=18.913s mem=107MiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.910s mem=108MiB load=1.00 rootload=0.99
ramon: end                  Fri Nov  1 21:02:19 2024
ramon: root.execname        z3
ramon: root.utime           19.960s
ramon: root.stime           0.030s
ramon: group.total          20.004s
ramon: group.utime          19.968s
ramon: group.stime          0.036s
ramon: group.mempeak        109MiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.094s
ramon: loadavg              1.00
