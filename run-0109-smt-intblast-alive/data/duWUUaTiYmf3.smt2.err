ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:39:27 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         41048 MiB
ramon: sys.mem.avail        61709 MiB
ramon: sys.nprocs           1253
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/duWUUaTiYmf3.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3030809
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   5950    601  1279/1154/113      91/13     9   18   19.34)
(smt.stats    1    202   8007   2142  2520/2280/114     191/13    10   19   19.53)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 1&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 1&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927934&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927934&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927933&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927932&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927932&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927931&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927922&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927920&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927920&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 72057594037927919&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963959 := 72057594037927934&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963958 := 72057594037927934&36028797018963959
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 72057594037927934 := 72057594037927935 << 55
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963958 := 72057594037927934&36028797018963959
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 72057594037927934 := 72057594037927935 << 55
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963959 := 72057594037927934&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963958 := 72057594037927934&36028797018963959
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 72057594037927934 := 72057594037927935 << 55
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963958 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963956 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963952 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963936 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963904 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 36028797018963840 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 1&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 1&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 2 := 4&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 4 := 72057594037927872&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 72057594037927872&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 32 := 72057594037927872&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 64 := 72057594037927872&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 9&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 10&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 12&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 16&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 10&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 9&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 9 := 11&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 10 := 11&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 9 := 12&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 12&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 16&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8 := 24&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 5 := 8&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 4 := 8&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 8&36028797018963959
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 8 := 72057594037927935 << 55
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 8&36028797018963959
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 8 := 72057594037926913 << 55
(smt.stats    2    313  10291   3997  2640/2391/201     290/18    13   42   20.04)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 11 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 11 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 74 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 40 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 32 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 64 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 128 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 256 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 512 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1024 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1024 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 2048 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 4096 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8192 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 16384 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 32768 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 65536 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 131072 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 262144 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 524288 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1048576 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 2097152 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 4194304 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8388608 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 16777216 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 33554432 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 67108864 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 134217728 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 268435456 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 536870912 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1073741824 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 2147483648 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 4294967296 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8589934592 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 17179869184 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 34359738368 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 68719476736 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 137438953472 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 274877906944 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 549755813888 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1099511627776 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 2199023255552 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 4398046511104 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 8796093022208 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 17592186044416 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 35184372088832 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 70368744177664 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 140737488355328 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 281474976710656 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 562949953421312 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1125899906842624 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 2251799813685248 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 4503599627370496 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 9007199254740992 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 18014398509481984 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 18014398509481984 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1125899906842624 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 562949953421312 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1125899906842624 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1125899906842624 := 36028797018963968&36028797018963959
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1125899906842624 := 36028797018963968&36028797018963959
(smt.stats    3    414  11803   6319  2851/2580/374     482/32    15   79   21.37)
(smt.stats    4    525  15436   8288  2876/2614/402     591/162    19  101   21.68)
(smt.stats    5    647  20641  11663  2961/2640/408     724/178    20  103   21.79)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    748  26517  15081  3009/2707/409     846/183    21  116   21.79)
(smt.stats    7    859  31342  19722  3093/2817/412     994/204    23  118   21.79)
(smt.stats    8    981  34076  24354  3127/2857/420    1211/246    26  129   21.90)
(smt.stats    9   1115  38218  27107  3169/2878/420    1367/280    27  134   22.00)
(smt.stats   10   1216  43635  33028  3191/2919/422    1479/315    29  138   22.00)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 0&36028797018963959
shl: (shl[56] (bv2int %0) (mod (bv2int %1) 56)) 36028797018963958 := 1024 << 55
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 0&36028797018963959
shl: (shl[56] (bv2int %0) (mod (bv2int %1) 56)) 36028797018963958 := 1024 << 55
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 0&36028797018963959
shl: (shl[56] (bv2int %0) (mod (bv2int %1) 56)) 1023 := 1024 << 55
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 0&36028797018963959
shl: (shl[56] (bv2int %0) (mod (bv2int %1) 56)) 1 := 1024 << 55
(smt.stats   11   1327  47074  37819  3240/2937/424    1617/317    29  138   22.10)
(smt.stats   12   1449  50033  41510  3318/3030/433    1765/329    31  146   22.10)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 98&1
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 98 := 512 << 1
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 114&1
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 114 := 512 << 1
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 98&1
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 98 := 512 << 1
(smt.stats   13   1583  53598  46801  3414/3040/437    1955/350    32  159   22.24)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 0&1
shl: (shl[56] (bv2int %0) (mod (bv2int %1) 56)) 72057594037927427 := 0 << 1
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 0&1
shl: (shl[56] (bv2int %0) (mod (bv2int %1) 56)) 2 := 0 << 1
(smt.stats   14   1730  60396  56164  3469/3161/445    2136/378    34  165   22.35)
(smt.stats   15   1831  63474  65198  3503/3197/450    2283/381    35  169   22.35)
ramon: poll                 wall=1.003s usage=1.001s mem=23576KiB load=1.00 rootload=0.99
(smt.stats   16   1942  68713  72828  3585/3264/450    2446/393    36  169   22.54)
(smt.stats   17   2064  74665  78734  3650/3273/469    2608/420    37  172   22.67)
(smt.stats   18   2198  78982  84292  3762/3345/469    2760/456    38  216   22.77)
(smt.stats   19   2345  90645  98644  3898/3453/469    2947/464    38  216   22.86)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   20   2506  99592 111215  3905/3588/470    3144/490    39  220   23.07)
ramon: poll                 wall=2.000s usage=1.997s mem=24316KiB load=1.00 rootload=0.99
(smt.stats   21   2607 108082 125445  3907/3590/471    3253/493    40  222   23.07)
(smt.stats   22   2718 117473 142548  3912/3595/471    3399/493    40  222   23.07)
(smt.stats   23   2840 123976 156707  3925/3608/471    3622/493    40  222   23.07)
(smt.stats   24   2974 129841 169192  3947/3629/472    3829/551    41  223   23.07)
(smt.stats   25   3121 133773 175126  3985/3639/473    4010/552    41  223   23.17)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 4503599627370512&1
band: (band[56] (shl[56] (bv2int %0) (mod #106 56)) (if (= #629 55) 1 (if #631 3 #788))) 1 := 4503599627370512&1
(smt.stats   26   3282 139603 181375  4038/3701/474    4169/613    42  228   23.17)
(smt.stats   27   3459 144788 195138  4090/3773/488    4450/616    43  230   23.26)
(smt.stats   28   3560 148369 201727  4110/3790/488    4595/651    44  236   23.26)
(smt.stats   29   3671 153896 210861  4167/3815/488    4745/654    44  236   23.26)
(smt.stats   30   3793 157944 223003  4249/3879/488    4878/655    44  236   23.26)
(smt.stats   31   3927 160822 232742  4285/3965/488    5023/655    44  236   23.38)
ramon: poll                 wall=3.000s usage=2.996s mem=24624KiB load=1.00 rootload=1.00
(smt.stats   32   4074 164851 242286  4303/3974/490    5197/717    45  238   23.38)
(smt.stats   33   4235 167697 252163  4367/3999/490    5377/718    45  238   23.38)
(smt.stats   34   4412 171113 265219  4408/4064/492    5573/740    46  238   23.47)
(smt.stats   35   4606 181015 294580  4413/4091/492    5816/744    47  239   23.47)
(smt.stats   36   4707 185749 310428  4424/4100/492    5957/745    47  239   23.47)
(smt.stats   37   4818 189933 321027  4519/4113/493    6144/801    48  241   23.67)
(smt.stats   38   4940 192958 334978  4528/4204/495    6325/831    49  245   23.82)
(smt.delete-inactive-clauses  :num-deleted-clauses 142)
(smt.stats   39   5074 196414 345506  4561/4223/498    6362/834    49  245   24.20)
ramon: poll                 wall=4.000s usage=3.996s mem=25776KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   40   5221 198187 351980  4685/4260/498    6526/838    49  245   24.30)
(smt.stats   41   5382 202664 363381  4808/4372/498    6697/893    50  253   24.39)
(smt.stats   42   5559 207495 379928  4831/4505/503    6951/904    51  261   24.49)
(smt.stats   43   5753 214302 391740  4877/4513/503    7223/907    51  261   24.59)
(smt.stats   44   5966 227887 424524  4924/4563/503    7539/948    52  265   24.59)
ramon: poll                 wall=5.000s usage=4.995s mem=25960KiB load=1.00 rootload=0.99
(smt.stats   45   6067 233987 435391  4930/4602/503    7692/948    52  265   24.68)
(smt.stats   46   6178 238737 442930  5006/4604/503    7825/949    52  265   24.68)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 12 := 67553994410557453&4398046511103
(smt.stats   47   6300 241258 452797  5131/4710/503    7971/949    52  265   24.68)
(smt.stats   48   6434 245086 467495  5242/4811/503    8159/950    52  265   24.68)
(smt.stats   49   6581 248572 480042  5252/4925/503    8330/951    52  265   24.80)
(smt.stats   50   6742 252332 507842  5260/4934/503    8516/951    52  265   24.80)
(smt.stats   51   6919 256231 546256  5272/4944/503    8782/951    52  265   24.80)
ramon: poll                 wall=6.000s usage=5.994s mem=26232KiB load=1.00 rootload=1.00
(smt.stats   52   7113 264704 566705  5286/4957/503    9060/951    52  265   24.93)
(smt.stats   53   7326 277532 602211  5327/4969/504    9354/1059    53  265   25.03)
(smt.stats   54   7560 285440 630791  5394/5065/507    9715/1074    54  270   25.03)
(smt.stats   55   7661 290592 645471  5402/5073/507    9833/1074    54  270   25.03)
ramon: poll                 wall=7.000s usage=6.993s mem=26452KiB load=1.00 rootload=1.00
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 6 := 82&15
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 6 := 86&15
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 9151314442816847958 := 72057594037927682 << 4
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   56   7772 294906 659801  5413/5077/508   10090/1084    55  273   25.03)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 6 := 86&15
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 2377900603251621974 := 72057594037927682 << 4
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 6 := 86&15
shl: (shl[64] (bv2int %0) (mod (+ #106 #399) 64)) 2377900603251621974 := 72057594037927934 << 4
(smt.stats   57   7894 298004 671004  5477/5111/514   10286/1085    55  273   25.13)
(smt.stats   58   8028 300472 679185  5489/5158/514   10548/1125    56  276   25.13)
(smt.stats   59   8175 306938 695024  5514/5158/514   10731/1130    56  276   25.13)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 1 := 5&9007199254740989
(smt.stats   60   8336 310067 713322  5637/5294/516   10983/1166    57  287   25.22)
(smt.stats   61   8513 314534 729893  5651/5320/517   11204/1181    58  308   25.22)
(smt.stats   62   8707 322262 757619  5681/5326/518   11574/1182    58  308   25.22)
(smt.stats   63   8920 324610 768483  5690/5355/518   11826/1260    59  322   25.34)
ramon: poll                 wall=8.000s usage=7.993s mem=26684KiB load=1.00 rootload=1.00
(smt.stats   64   9154 330621 783548  5698/5361/518   12162/1260    59  322   25.43)
(smt.stats   65   9411 338869 811307  5793/5446/519   12623/1316    60  322   25.43)
(smt.stats   66   9512 341091 819427  5800/5469/519   12763/1316    60  322   25.43)
(smt.stats   67   9623 349844 845984  5803/5472/519   12886/1316    60  322   25.43)
(smt.stats   68   9745 354022 857201  5863/5475/519   13095/1322    60  322   25.43)
ramon: poll                 wall=9.000s usage=8.993s mem=26956KiB load=1.00 rootload=1.00
(smt.stats   69   9879 357358 870393  6154/5615/519   13400/1329    60  322   25.54)
(smt.delete-inactive-clauses  :num-deleted-clauses 187)
(smt.stats   70  10026 359711 879119  6238/5881/519   13493/1329    60  322   25.65)
(smt.stats   71  10187 364356 896579  6326/5910/519   13910/1333    60  322   25.74)
(smt.stats   72  10364 370596 938384  6382/6003/519   14199/1333    60  322   25.74)
ramon: poll                 wall=10.000s usage=9.993s mem=27156KiB load=1.00 rootload=1.00
(smt.stats   73  10558 375071 960770  6391/6060/519   14708/1333    60  322   25.74)
(smt.stats   74  10771 378812 977671  6408/6062/519   14993/1335    60  322   25.84)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   75  11005 385599 1002834  6455/6124/520   15581/1825    61  323   25.84)
(smt.stats   76  11262 399754 1056124  6466/6131/520   15854/1825    61  323   26.28)
ramon: poll                 wall=11.000s usage=10.993s mem=28068KiB load=1.00 rootload=0.99
(smt.stats   77  11544 410916 1096429  6487/6152/522   16474/1865    62  339   26.38)
(smt.stats   78  11645 413189 1106432  6560/6175/522   16696/1866    62  339   26.47)
ramon: poll                 wall=12.000s usage=11.992s mem=28116KiB load=1.00 rootload=1.00
(smt.stats   79  11756 416317 1121166  6612/6232/522   16883/1869    62  339   26.47)
(smt.stats   80  11878 418680 1130409  6637/6295/522   17021/1869    62  339   26.47)
(smt.stats   81  12012 421088 1143504  6664/6313/522   17296/1869    62  339   26.47)
(smt.stats   82  12159 425987 1172833  6673/6334/522   17502/1869    62  339   26.47)
(smt.stats   83  12320 429468 1189781  6704/6351/522   17689/1869    62  339   26.47)
(smt.stats   84  12497 431516 1228402  6729/6392/522   17912/1869    62  339   26.47)
(smt.stats   85  12691 435555 1256531  6734/6399/524   18145/2028    63  341   26.57)
(smt.stats   86  12904 440675 1306751  6738/6403/524   18410/2028    63  341   26.66)
ramon: poll                 wall=13.000s usage=12.989s mem=28324KiB load=1.00 rootload=1.00
(smt.stats   87  13138 446083 1327993  6877/6409/524   18830/2034    63  341   26.76)
(smt.stats   88  13395 451680 1347026  7096/6556/524   19170/2040    63  341   26.85)
ramon: poll                 wall=14.000s usage=13.988s mem=28332KiB load=1.00 rootload=1.00
(smt.stats   89  13677 462070 1382425  7209/6803/524   19552/2042    63  341   26.95)
(smt.stats   90  13987 470776 1429584  7258/6904/525   19941/2169    64  343   26.95)
(smt.stats   91  14088 472793 1443832  7261/6926/525   20066/2169    64  343   26.95)
(smt.stats   92  14199 476820 1467154  7262/6927/525   20178/2169    64  343   26.95)
(smt.stats   93  14321 480911 1487978  7280/6929/525   20351/2171    64  343   26.95)
(smt.stats   94  14455 485441 1507465  7316/6951/525   20631/2173    64  343   27.04)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   95  14602 487785 1525174  7330/6995/525   20803/2173    64  343   27.04)
ramon: poll                 wall=15.000s usage=14.988s mem=28504KiB load=1.00 rootload=1.00
(smt.stats   96  14763 490561 1544278  7334/6999/525   20987/2173    64  343   27.04)
ramon: poll                 wall=16.000s usage=15.984s mem=28892KiB load=1.00 rootload=1.00
(smt.stats   97  14940 495664 1555527  7590/7257/530   21358/2277    65  349   27.24)
(smt.delete-inactive-clauses  :num-deleted-clauses 89)
(smt.stats   98  15134 499700 1569327  7607/7262/530   21507/2277    65  349   27.24)
(smt.stats   99  15347 509105 1622848  7620/7281/530   21733/2277    65  349   27.24)
(smt.stats  100  15581 514721 1646429  7695/7295/530   22229/2280    65  349   27.33)
ramon: poll                 wall=17.000s usage=16.982s mem=28908KiB load=1.00 rootload=0.99
(smt.stats  101  15838 520772 1707787  7731/7369/530   22539/2280    65  349   27.33)
(smt.stats  102  16120 527755 1767158  7769/7413/530   22859/2282    65  349   27.33)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 10 := 29273397577902914&4194303
(smt.stats  103  16430 538177 1823826  7910/7448/530   23467/2289    65  349   27.63)
ramon: poll                 wall=18.000s usage=17.980s mem=29192KiB load=1.00 rootload=1.00
(smt.stats  104  16770 546492 1870793  7920/7587/531   23860/2476    66  351   27.73)
(smt.stats  105  16871 549487 1884392  7923/7590/531   24174/2476    66  351   27.73)
(smt.stats  106  16982 552894 1897343  7928/7591/531   24367/2477    66  351   27.82)
(smt.stats  107  17104 554812 1910588  7932/7599/531   24516/2477    66  351   27.82)
(smt.stats  108  17238 557723 1933313  7947/7600/531   24650/2477    66  351   27.82)
(smt.stats  109  17385 560758 1960996  7959/7616/531   24805/2477    66  351   27.82)
(smt.stats  110  17546 563667 1979016  7969/7636/531   25191/2477    66  351   27.82)
ramon: poll                 wall=19.000s usage=18.977s mem=29356KiB load=1.00 rootload=1.00
(smt.stats  111  17723 568142 2019137  7972/7639/531   25380/2477    66  351   27.82)
(smt.stats  112  17917 575211 2058675  8052/7648/532   25758/2702    67  379   27.82)
(smt.stats  113  18130 580563 2074136  8057/7724/532   25989/2702    67  379   27.96)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 1125899906842864&127
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 1125899906842912&127
(smt.stats  114  18364 585408 2107530  8173/7725/532   26382/2708    67  379   28.32)
band: (band[56] (shl[64] (bv2int %0) (mod #400 64)) (if (= #807 63) 0 (if #809 1 #939))) 0 := 1125899906847120&127
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats  115  18621 586639 2118118  8544/8172/542   26754/2756    68  381   28.72)
ramon: poll                 wall=20.000s usage=19.976s mem=30204KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 15:39:47 2024
ramon: root.execname        z3
ramon: root.utime           19.960s
ramon: root.stime           0.020s
ramon: group.total          19.986s
ramon: group.utime          19.962s
ramon: group.stime          0.024s
ramon: group.mempeak        30460KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.010s
ramon: loadavg              1.00
