ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:51:08 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27723 MiB
ramon: sys.mem.avail        62084 MiB
ramon: sys.nprocs           1387
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/e5YqeCYFohTC.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             876187
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   94.3396     10000        49          0            1        2)
(sat.ddfw       1      1   46.7336     20001        98          1            1        3)
(smt.stats    0    101   5229    507  1145/987/101     101/20     9   14   52.07)
(sat.ddfw       1      1   47.1698     40001       196          2            1        5)
(smt.stats    1    202   6985   1284  2023/1766/101     218/29     9   14   52.17)
(sat.ddfw       1      1   40.4313     70001       343          3            1        8)
(smt.stats    2    313   7898   2666  2200/2023/106     329/48    11   26   52.26)
(smt.stats    3    414   9444   4059  2251/2068/110     458/61    13   31   52.26)
ramon: poll                 wall=1.000s usage=0.943s mem=54412KiB load=0.94 rootload=0.94
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1276 << 1
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1276 << 1
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1276 << 1
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 1 := 1&595
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511628371 := 1276 << 1
(smt.stats    4    525  12367   5323  2352/2144/111     592/65    14   35   52.39)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1277
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1277
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1277
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1277
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&1278
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1278 := 1276 << 1
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 225 := 638 << 2
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 225 := 638 << 2
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 225 := 638 << 2
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 225 := 638 << 2
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 1&2552
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 1 := 1&2552
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 1 := 1&2552
(smt.stats    5    647  16561   7372  2423/2232/143     802/103    16   45   52.60)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1099511627776 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 2199023255552 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 2199023255552 := 1099511627902 << 8
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 2 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 2 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 2 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 226 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 250 := 549755813951 << 9
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 144 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 143 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 128 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 128 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 65 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 66 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 68 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 72 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 80 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 144 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 128 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 30 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 30 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 35 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 128 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 64 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 32 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 26 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 24 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 18 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 16 := 144&32256
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  21365  10193  2562/2354/254     904/127    19   64   53.01)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 2 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 28 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 24 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 8 := 144&32256
(sat.ddfw       1      1   34.3053    110001       539          4            1       12)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 16 := 144&32256
(smt.stats    7    859  26602  15498  2628/2404/271    1027/141    22   80   53.25)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 4 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 4 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 4 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 8 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 16 := 144&32256
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 144&32256
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 2 := 144&32256
(smt.stats    8    981  29086  19543  2868/2640/306    1149/196    24  110   53.45)
(sat.ddfw       1      1   29.9754    160000       784          5            1       17)
(smt.stats    9   1115  33203  23329  2985/2750/309    1295/216    26  117   53.84)
ramon: poll                 wall=2.004s usage=1.901s mem=56028KiB load=0.95 rootload=0.94
(sat.ddfw       1      1   26.0534    220001      1078          6            1       23)
(smt.stats   10   1216  35423  26793  3097/2776/309    1413/220    26  117   53.93)
(smt.stats   11   1327  38373  30852  3114/2869/309    1549/220    26  117   54.03)
ramon: poll                 wall=3.000s usage=2.883s mem=56436KiB load=0.99 rootload=0.98
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  42470  36960  3165/2900/309    1690/223    26  117   54.13)
(sat.ddfw       1      1   23.1711    290001      1421          7            1       30)
(smt.stats   13   1583  47324  42172  3187/2942/310    1843/266    27  119   54.34)
(smt.stats   14   1730  53156  48221  3282/3029/312    2008/283    28  122   54.43)
(sat.ddfw       1      1   22.0629    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=4.010s mem=56712KiB load=1.13 rootload=1.13
(smt.stats   15   1831  53960  49244  3403/3107/312    2112/283    28  122   54.63)
(smt.stats   16   1942  56012  52372  3674/3425/314    2258/291    29  123   54.63)
(sat.ddfw       1      1   19.7066    460001      2254          9            1       47)
(smt.stats   17   2064  59764  58172  3725/3465/318    2468/333    31  131   54.63)
(smt.stats   18   2198  63410  68585  3789/3517/318    2679/334    31  131   54.85)
ramon: poll                 wall=5.000s usage=5.009s mem=57220KiB load=1.00 rootload=0.99
(smt.stats   19   2345  68752  79489  3851/3565/318    2913/335    31  131   54.85)
(smt.stats   20   2506  72689  87547  3881/3606/319    3180/418    32  133   54.96)
(smt.stats   21   2607  75198  93563  3900/3620/320    3396/447    33  135   54.96)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308161
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308164
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308168
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1308168 := 5110 << 4
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308162
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308168
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1308168 := 5110 << 4
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308168
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1308168 := 5110 << 4
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308162
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&1308168
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 39 #781 #785) 64)) 1308168 := 5110 << 4
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 8 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 2 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 2 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 9&81760
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 10222 := 2555 << 5
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 9&81760
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 10222 := 2555 << 5
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 9&81760
shl: (shl[40] (bv2int %0) (+ 40 (* 1099511627775 #104))) 81090 := 2555 << 5
(smt.stats   22   2718  78455 100847  4005/3680/326    3630/466    34  138   55.29)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 4 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 4 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 3 := 9&81760
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 0 := 9&81760
band: (band[40] (if (= #108 39) 0 (if #571 1 #679)) (shl[40] (bv2int %0) (+ 40 #682))) 1 := 9&81760
(sat.ddfw       1      1   17.8221    560001      2745         10            1       57)
(smt.stats   23   2840  81840 106498  4044/3727/347    3850/468    34  138   55.49)
ramon: poll                 wall=6.000s usage=6.012s mem=57752KiB load=1.00 rootload=1.01
(smt.stats   24   2974  85583 114503  4095/3773/347    4027/515    35  144   55.59)
(smt.stats   25   3121  91784 125958  4110/3810/352    4218/549    36  145   55.59)
(sat.ddfw       1      1   16.2602    670001      3284         11            1       68)
ramon: poll                 wall=7.000s usage=7.010s mem=58100KiB load=1.00 rootload=1.00
(smt.stats   26   3282  99510 137199  4258/3820/352    4454/580    37  160   55.86)
ramon: poll                 wall=8.000s usage=8.008s mem=58188KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   14.9458    790001      3872         12            1       80)
ramon: poll                 wall=9.000s usage=9.007s mem=58140KiB load=1.00 rootload=1.00
(smt.stats   27   3459 104515 147915  4481/4005/352    4769/586    37  160   55.97)
(sat.ddfw       1      1   13.8357    920001      4509         13            1       93)
(smt.stats   28   3560 108755 155282  4528/4193/353    4931/638    38  163   56.23)
ramon: poll                 wall=10.000s usage=10.007s mem=58392KiB load=1.00 rootload=1.00
(smt.stats   29   3671 113114 163718  4627/4230/353    5146/641    38  163   56.23)
(smt.stats   30   3793 117852 178253  4783/4339/353    5402/647    38  163   56.32)
(sat.ddfw       1      1   12.8712   1060001      5196         14            1      108)
ramon: poll                 wall=11.004s usage=11.011s mem=58540KiB load=1.00 rootload=1.00
(smt.stats   31   3927 122087 191594  4872/4502/354    5728/681    39  167   56.42)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074 126851 200699  4888/4584/355    6130/715    40  170   56.51)
ramon: poll                 wall=12.000s usage=12.006s mem=58788KiB load=1.00 rootload=1.00
(smt.stats   33   4235 134574 223024  4936/4633/357    6474/858    41  175   56.51)
(sat.ddfw       1      1   12.0501   1210001      5931         15            1      123)
ramon: poll                 wall=13.000s usage=13.005s mem=58848KiB load=1.00 rootload=1.00
(smt.stats   34   4412 140492 237678  5083/4679/357    6794/860    41  175   56.83)
(smt.stats   35   4606 147208 254409  5112/4804/359    7152/909    42  176   56.92)
(smt.stats   36   4707 150475 265997  5125/4816/359    7341/947    43  180   57.04)
ramon: poll                 wall=14.000s usage=14.008s mem=59308KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   11.3331   1370001      6715         16            1      139)
(smt.stats   37   4818 155553 281631  5205/4869/360    7555/971    44  180   57.04)
(smt.stats   38   4940 160565 294634  5308/4911/361    7750/975    44  180   57.14)
(smt.delete-inactive-clauses  :num-deleted-clauses 246)
ramon: poll                 wall=15.000s usage=15.028s mem=59216KiB load=1.02 rootload=1.02
(smt.stats   39   5074 163835 308423  5379/5065/361    7809/1021    45  182   57.14)
(smt.stats   40   5221 168370 318590  5406/5084/361    8164/1022    45  182   57.25)
(smt.stats   41   5382 174884 340375  5476/5112/361    8462/1023    45  182   57.35)
(sat.ddfw       1      1   10.6925   1540001      7549         17            1      156)
ramon: poll                 wall=16.000s usage=16.024s mem=59572KiB load=1.00 rootload=1.00
(smt.stats   42   5559 178164 355672  5594/5281/362    9083/1095    46  194   57.35)
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 91 := 38698033127&141
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 138 := 38698033127&142
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 138 := 38698033127&142
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 138 := 38698033127&138
band: (band[40] (if (= #318 63) 0 (if #550 1 #774)) (shl[64] (* 2 #102) (mod #789 64))) 138 := 38698033127&138
(smt.stats   43   5753 184692 378282  5719/5368/368    9663/1199    47  195   57.47)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   44   5966 191264 407469  5751/5436/374   10213/1199    47  195   57.58)
ramon: poll                 wall=17.000s usage=17.024s mem=60032KiB load=1.00 rootload=1.00
(smt.stats   45   6067 193671 416202  5773/5453/376   10422/1261    48  210   57.58)
(smt.stats   46   6178 197891 425902  5803/5474/376   10581/1261    48  210   57.71)
(sat.ddfw       1      1    10.126   1720001      8431         18            1      174)
ramon: poll                 wall=18.000s usage=18.026s mem=60080KiB load=1.00 rootload=1.00
(smt.stats   47   6300 201125 430793  5936/5491/376   10763/1267    48  210   57.76)
ramon: poll                 wall=19.000s usage=19.023s mem=60148KiB load=1.00 rootload=0.99
(smt.stats   48   6434 204742 442358  6067/5693/377   11012/1303    49  224   57.76)
(sat.ddfw       1      1   9.61977   1910001      9362         19            1      193)
ramon: poll                 wall=20.000s usage=20.022s mem=60440KiB load=1.00 rootload=1.00
(smt.stats   49   6581 208969 450569  6115/5761/377   11310/1309    49  224   58.21)
ramon: end                  Fri Nov  1 22:51:28 2024
ramon: root.execname        z3
ramon: root.utime           20.070s
ramon: root.stime           0.020s
ramon: group.total          20.096s
ramon: group.utime          20.072s
ramon: group.stime          0.024s
ramon: group.mempeak        60444KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.074s
ramon: loadavg              1.00
