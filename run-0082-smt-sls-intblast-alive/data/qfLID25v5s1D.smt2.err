ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 23:09:31 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27284 MiB
ramon: sys.mem.avail        62083 MiB
ramon: sys.nprocs           1387
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/qfLID25v5s1D.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             936162
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   121.951     10000        49          0            1        2)
(smt.stats    0    101   2604   1282   677/603/107      97/19     3   16   51.55)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&1
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 1 := 0 << 27
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&1
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 1 := 0 << 27
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&1
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 1 := 0 << 27
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&268435455
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 134217726 := 134217728&134217727
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&134217727
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 134217727 := 2 << 27
(sat.ddfw       1      1   63.7006     20001        98          1            1        3)
(smt.stats    1    202   3512   2733  1156/1041/135     249/38     7   38   51.74)
(sat.ddfw       1      1   71.4286     40001       196          2            1        5)
(smt.stats    2    313   4318   5150  1399/1266/140     418/40     8   44   51.84)
(smt.stats    3    414   5805   7408  1435/1300/148     749/124    11   59   52.04)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 3 := 67108864&3
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4 := 67108864&4
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8 := 67108864&8
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 67108864&16
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32 := 67108864&32
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 64 := 67108864&64
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 128 := 67108864&128
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 256 := 67108864&256
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 512 := 67108864&512
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 67108864&1024
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2048 := 67108864&2048
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4096 := 67108864&4096
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8192 := 67108864&8192
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16384 := 67108864&16384
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 67108864&32768
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 65536 := 67108864&65536
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 131072 := 67108864&131072
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 67108864&262144
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 524288 := 67108864&524288
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 67108864&1048576
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 64 := 67108864&64
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16384 := 67108864&16384
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 67108864&32768
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 67108864&32768
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 67108864&262144
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 67108864&1048576
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2097152 := 67108864&2097152
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4194304 := 67108864&4194304
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8388608 := 67108864&8388608
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16777216 := 67108864&16777216
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&33554432
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&33554432
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&33554432
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 50462720 := 67108864&50462720
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 50610176 := 67108864&50610176
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 50610176 := 67108864&50610176
(smt.stats    4    525   6477   8704  1616/1356/217     978/134    12   79   52.54)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 52428800 := 67108864&52428800
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 51380224 := 67108864&51380224
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 58720256 := 67108864&58720256
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 54525952 := 67108864&54525952
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 67108864&262144
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16384 := 67108864&16384
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8192 := 67108864&8192
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5175 := 67108864&5175
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5174 := 67108864&5174
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5156 := 67108864&5156
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5152 := 67108864&5152
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5136 := 67108864&5136
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5120 := 67108864&5120
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4096 := 67108864&4096
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4 := 67108864&4
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4 := 67108864&4
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 67108864&16
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32 := 67108864&32
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 67108864&16
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 67108864&16
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8 := 67108864&8
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 3 := 67108864&3
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 3 := 67108864&3
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&67108864
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 335544320 := 6 << 26
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&67108864
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 335544320 := 6 << 26
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&67108864
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 603979776 := 6 << 26
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&67108864
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 603979776 := 10 << 26
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16777216 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 524288 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2048 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 512 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 384 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 256 := 67108864&134217728
(sat.ddfw       1      1   59.2885     70001       343          3            1        8)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 128 := 67108864&134217728
(smt.stats    5    647   8033  13495  1737/1591/396    1266/247    15  122   52.83)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&134217727
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 402653183 := 4 << 20
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&134217727
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 402653183 := 0 << 20
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&71303168
(smt.stats :restarts  :decisions   :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations          :lemmas         :deletions     )
(smt.stats    6    748   9924  16132  1793/1608/402    1577/301    16  125   53.23)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 131072 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 131072 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 65536 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 524288 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 524288 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4096 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8192 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8192 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2048 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2048 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 256 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 128 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 128 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 512 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 512 := 1048576&71303168
(sat.ddfw       1      1    55.325    110001       539          4            1       12)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
shl: (shl[28] (bv2int %0) (+ 28 (* 268435455 #112))) 6337 := 162 << 21
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
shl: (shl[28] (bv2int %0) (+ 28 (* 268435455 #112))) 6337 := 162 << 21
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
shl: (shl[28] (bv2int %0) (+ 28 (* 268435455 #112))) 6337 := 162 << 21
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 2 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1048576 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1048575 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 2 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1048572 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 16 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 32 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 64 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 128 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 256 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 512 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 2048 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 4096 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8192 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 16384 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 32768 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 65536 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 131072 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 262144 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 524288 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 131072 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 262144 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 524288 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8704 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8320 := 1048576&71303168
(smt.stats    7    859  11929  21078  2038/1870/606    1778/359    18  168   54.30)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8208 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8208 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8256 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8256 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8224 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8224 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8200 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8200 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8200 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8200 := 1048576&71303168
(smt.stats    8    981  14812  27932  2149/1978/632    2122/427    20  207   54.59)
ramon: poll                 wall=1.000s usage=0.789s mem=57104KiB load=0.79 rootload=0.77
(sat.ddfw       1      1   49.8495    160000       784          5            1       17)
(sat.ddfw       1      1    45.012    220001      1078          6            1       23)
(smt.stats    9   1115  17585  30882  2215/1979/632    2412/428    20  207   54.61)
(sat.ddfw       1      1    40.674    290001      1421          7            1       30)
(smt.stats   10   1216  19537  35677  2435/2179/633    2635/462    21  213   54.71)
ramon: poll                 wall=2.000s usage=1.789s mem=57512KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   37.0028    370001      1813          8            1       38)
(smt.stats   11   1327  21894  42186  2667/2358/633    2820/519    22  214   54.80)
(smt.stats   12   1449  24804  52393  2736/2552/635    3277/547    23  220   54.90)
(smt.stats   13   1583  26668  55506  2878/2570/635    3570/552    23  220   55.10)
(sat.ddfw       1      1   33.8219    460001      2254          9            1       47)
ramon: poll                 wall=3.000s usage=2.791s mem=57732KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   31.0849    560001      2745         10            1       57)
(smt.stats   14   1730  27482  57363  3273/2878/635    3780/555    23  220   55.39)
(smt.stats   15   1831  28843  60543  3545/3281/635    4026/559    23  220   55.39)
(sat.ddfw       1      1   28.7732    670001      3284         11            1       68)
(smt.stats   16   1942  31573  66765  3607/3399/637    4356/682    24  224   55.39)
ramon: poll                 wall=4.000s usage=3.790s mem=57896KiB load=1.00 rootload=1.00
(smt.stats   17   2064  35591  74598  3642/3436/642    4843/703    25  226   55.48)
(sat.ddfw       1      1   26.7678    790001      3872         12            1       80)
(smt.stats   18   2198  37762  76924  3855/3501/642    4970/956    26  252   55.76)
ramon: poll                 wall=5.000s usage=4.790s mem=58380KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   25.0241    920001      4509         13            1       93)
ramon: poll                 wall=6.000s usage=5.790s mem=58384KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   23.5215   1060001      5196         14            1      108)
(sat.ddfw       1      1   22.1108   1210001      5931         15            1      123)
ramon: poll                 wall=7.000s usage=6.789s mem=58640KiB load=1.00 rootload=1.00
(smt.stats   19   2345  38140  77765  4033/3719/642    5198/959    26  252   55.96)
(smt.stats   20   2506  41236  83021  4255/4008/644    5605/959    26  252   56.09)
(sat.ddfw       1      1   20.8905   1370001      6715         16            1      139)
(smt.stats   21   2607  44811  93898  4269/4076/644    6382/975    27  258   56.28)
ramon: poll                 wall=8.000s usage=7.785s mem=58932KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   22   2718  48998 106515  4307/4092/647    6983/1069    28  260   56.47)
(smt.stats   23   2840  53285 114657  4343/4156/650    7319/1131    29  270   56.57)
(sat.ddfw       1      1   19.7605   1540001      7549         17            1      156)
(smt.stats   24   2974  57122 125271  4400/4213/656    7868/1213    30  285   56.76)
ramon: poll                 wall=9.000s usage=8.787s mem=59396KiB load=1.00 rootload=1.00
(smt.stats   25   3121  60692 143541  4659/4355/657    8593/1215    30  285   56.96)
(sat.ddfw       1      1   18.8068   1720001      8431         18            1      174)
(smt.stats   26   3282  64968 159512  4790/4539/658    9085/1313    31  314   57.37)
ramon: poll                 wall=10.000s usage=9.787s mem=59728KiB load=1.00 rootload=1.00
(smt.stats   27   3459  70112 184863  4877/4626/668   10296/1371    32  327   57.67)
(smt.stats   28   3560  72520 196279  4946/4684/669   10963/1601    33  371   57.76)
(smt.stats   29   3671  76889 214613  4971/4684/669   11180/1603    33  371   58.08)
(sat.ddfw       1      1   17.8992   1910001      9362         19            1      193)
(smt.stats   30   3793  80738 242385  5034/4759/669   11811/1604    33  371   58.27)
ramon: poll                 wall=11.000s usage=10.787s mem=61008KiB load=1.00 rootload=1.00
(smt.stats   31   3927  84097 260018  5059/4792/669   12828/1604    33  371   58.55)
(smt.stats   32   4074  90669 287890  5091/4818/671   13919/1749    34  375   58.75)
(sat.ddfw       1      1   17.0823   2110001     10343         20            1      214)
ramon: poll                 wall=12.000s usage=11.788s mem=61268KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   16.3399   2320001     11372         21            1      235)
ramon: poll                 wall=13.000s usage=12.786s mem=61228KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.786s mem=61232KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   15.6528   2540001     12451         22            1      257)
(smt.stats   33   4235  97682 311201  5334/4818/671   14312/1754    34  375   59.13)
ramon: poll                 wall=15.000s usage=14.787s mem=61608KiB load=1.00 rootload=1.00
(smt.stats   34   4412 107683 341983  5482/5134/671   14773/1758    34  375   59.22)
(sat.ddfw       1      1   15.0209   2770001     13578         23            1      280)
ramon: poll                 wall=16.000s usage=15.787s mem=61540KiB load=1.00 rootload=1.00
(smt.stats   35   4606 118480 368974  5504/5231/672   15753/1999    35  385   59.52)
(sat.ddfw       1      1   14.4231   3010001     14754         24            1      305)
(smt.stats   36   4707 124357 393092  5552/5249/673   16068/2146    36  399   59.52)
ramon: poll                 wall=17.000s usage=16.785s mem=62176KiB load=1.00 rootload=0.99
(smt.stats   37   4818 130521 421640  5611/5287/673   16368/2151    36  399   59.61)
(sat.ddfw       1      1   13.9876   3260001     15980         25            1      330)
ramon: poll                 wall=18.000s usage=17.862s mem=62308KiB load=1.08 rootload=1.08
(smt.stats   38   4940 133348 439676  5684/5362/674   16913/2170    37  407   59.71)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   39   5074 138062 458346  5731/5427/675   17601/2171    37  407   59.71)
(smt.stats   40   5221 142738 484129  5782/5464/675   17825/2309    38  410   60.06)
ramon: poll                 wall=19.000s usage=18.941s mem=62436KiB load=1.08 rootload=1.08
(smt.stats   41   5382 147221 529937  5824/5529/675   18204/2309    38  410   60.16)
(sat.ddfw       1      1   13.5234   3520001     17254         26            1      356)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   42   5559 151040 557573  5847/5560/675   18867/2310    38  410   60.25)
(smt.stats   43   5753 154848 597965  6034/5614/675   19231/2314    38  410   60.35)
ramon: poll                 wall=20.000s usage=20.025s mem=62524KiB load=1.08 rootload=1.08
ramon: end                  Fri Nov  1 23:09:51 2024
ramon: root.execname        z3
ramon: root.utime           20.090s
ramon: root.stime           0.020s
ramon: group.total          20.115s
ramon: group.utime          20.095s
ramon: group.stime          0.020s
ramon: group.mempeak        62788KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.087s
ramon: loadavg              1.00
