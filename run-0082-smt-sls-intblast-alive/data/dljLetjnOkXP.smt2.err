ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:50:34 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27716 MiB
ramon: sys.mem.avail        62084 MiB
ramon: sys.nprocs           1390
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/dljLetjnOkXP.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             874370
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   73.5294     10000        49          0            1        2)
(sat.ddfw       1      1   37.3172     20001        98          1            1        3)
(smt.stats    0    101   3461    447  1246/1071/105     110/17     3   16   51.95)
(smt.stats    1    202   7719   1512  1311/1166/107     213/26     4   20   52.25)
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 562949953421311&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 562949953421311&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 0&255
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9222809086901354496 := 8 << 8
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 0&255
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9222809086901354496 := 8 << 8
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 16&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 16&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 0&255
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9222809086901354496 := 8 << 8
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2046&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2044&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2040&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2044&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2040&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2032&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2016&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 32&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 32&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 64&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 32&255
(smt.stats    2    313   9492   2812  2187/1933/119     321/27     5   28   52.53)
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 64&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 14&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 11 := 14&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 10 := 14&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 10 := 14&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 9 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 64 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 64 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 384&255
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 384 := 8 << 8
(sat.ddfw       1      1     38.61     40001       196          2            1        5)
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 64 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2048&255
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 1 := 8 << 8
(smt.stats    3    414  11287   4522  2267/2067/234     489/56     8   52   52.86)
(smt.stats    4    525  12214   5740  2674/2437/240     571/126    11   65   52.95)
(smt.stats    5    647  15765  10127  2710/2470/245     701/131    13   82   53.05)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  19972  14288  2728/2484/248     815/160    15   86   53.14)
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 128&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 128&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 128&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223372036854775936 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223372036854775936 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223372036854775936 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223934986808197248 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223372036854775936 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 211 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 211 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 256 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1024 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2048 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4096 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16384 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32768 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 65280 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 256 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1024 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2048 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4096 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16384 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32768 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 49152 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 49152 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 49152 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 14848 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 14848 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 14336 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 12288 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2048 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4096 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 256 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 13893632&65535
(smt.stats    7    859  23745  18237  2835/2499/249     987/170    16   86   53.53)
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1024 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 1 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 2 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 4 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 8 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 65520 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 32 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 64 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 1328 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 194 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 160 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 160 := 13893632&65535
(smt.stats    8    981  25215  20180  3041/2595/330    1188/213    17  102   53.94)
(sat.ddfw       1      1   33.2963     70001       343          3            1        8)
ramon: poll                 wall=1.000s usage=0.993s mem=56132KiB load=0.99 rootload=0.97
(smt.stats    9   1115  28081  23528  3191/2944/400    1398/360    19  141   54.23)
(sat.ddfw       1      1   28.3286    110001       539          4            1       12)
(smt.stats   10   1216  33223  27462  3222/2954/400    1579/362    19  141   54.42)
ramon: poll                 wall=2.000s usage=2.055s mem=57024KiB load=1.06 rootload=1.06
(smt.stats   11   1327  40246  40402  3238/2989/402    1755/442    20  146   54.64)
(sat.ddfw       1      1    24.366    160000       784          5            1       17)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  43396  51124  3265/3017/422    1919/500    23  180   54.74)
ramon: poll                 wall=3.000s usage=2.983s mem=57212KiB load=0.93 rootload=0.92
(sat.ddfw       1      1   20.2912    220001      1078          6            1       23)
(smt.stats   13   1583  45858  55043  3352/3020/422    2063/573    24  207   54.83)
(sat.ddfw       1      1   18.2292    290001      1421          7            1       30)
ramon: poll                 wall=4.000s usage=3.952s mem=57060KiB load=0.97 rootload=0.97
(sat.ddfw       1      1   16.4474    370001      1813          8            1       38)
ramon: poll                 wall=5.000s usage=4.872s mem=57596KiB load=0.92 rootload=0.92
(smt.stats   14   1730  50944  65347  3684/3238/422    2325/579    24  207   55.22)
ramon: poll                 wall=6.000s usage=5.860s mem=57604KiB load=0.99 rootload=0.99
(sat.ddfw       1      1     14.98    460001      2254          9            1       47)
(smt.stats   15   1831  52049  66954  3888/3495/423    2497/671    25  209   55.31)
(smt.stats   16   1942  52934  69061  4100/3762/423    2722/671    25  209   55.41)
ramon: poll                 wall=7.000s usage=6.796s mem=57832KiB load=0.94 rootload=0.94
(sat.ddfw       1      1    13.598    560001      2745         10            1       57)
(smt.stats   17   2064  56813  78269  4198/3873/425    2988/743    26  211   55.51)
ramon: poll                 wall=8.000s usage=7.744s mem=58428KiB load=0.95 rootload=0.95
(smt.stats   18   2198  60692  91802  4377/3959/425    3335/830    27  211   55.78)
(sat.ddfw       1      1   12.6002    670001      3284         11            1       68)
ramon: poll                 wall=9.000s usage=8.744s mem=58700KiB load=1.00 rootload=1.00
(smt.stats   19   2345  64672 106473  4531/4145/425    3610/830    27  211   56.05)
ramon: poll                 wall=10.000s usage=9.743s mem=58456KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   11.7382    790001      3872         12            1       80)
(smt.stats   20   2506  67557 116477  4697/4324/425    3948/833    27  211   56.24)
ramon: poll                 wall=11.000s usage=10.743s mem=58720KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   10.9345    920001      4509         13            1       93)
ramon: poll                 wall=12.000s usage=11.723s mem=58644KiB load=0.98 rootload=0.98
(smt.stats   21   2607  69436 123390  4932/4522/425    4151/839    27  211   56.43)
ramon: poll                 wall=13.000s usage=12.707s mem=58676KiB load=0.98 rootload=0.99
(sat.ddfw       1      1   10.2197   1060001      5196         14            1      108)
(smt.stats   22   2718  71964 133844  5149/4683/425    4341/842    27  211   56.43)
ramon: poll                 wall=14.000s usage=13.663s mem=58976KiB load=0.96 rootload=0.95
(smt.stats   23   2840  75141 152043  5247/4904/425    5150/845    27  211   56.52)
ramon: poll                 wall=15.006s usage=14.578s mem=58932KiB load=0.91 rootload=0.91
(smt.stats   24   2974  78977 172942  5266/4984/425    5561/845    27  211   56.62)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   25   3121  85994 208591  5289/5018/428    6192/1492    28  219   56.72)
(sat.ddfw       1      1   9.47927   1210001      5931         15            1      123)
ramon: poll                 wall=16.002s usage=15.578s mem=59332KiB load=1.00 rootload=1.00
(smt.stats   26   3282  90467 230227  5457/5041/430    6469/1493    28  219   56.81)
ramon: poll                 wall=17.000s usage=16.722s mem=59356KiB load=1.15 rootload=1.14
(sat.ddfw       1      1   8.96459   1370001      6715         16            1      139)
ramon: poll                 wall=18.000s usage=17.850s mem=59564KiB load=1.13 rootload=1.13
(smt.stats   27   3459  93760 247250  5707/5436/431    7146/1538    30  225   57.17)
(smt.stats   28   3560  95931 252811  5778/5439/431    7492/1542    30  225   57.17)
ramon: poll                 wall=19.000s usage=18.852s mem=59564KiB load=1.00 rootload=1.00
(smt.stats   29   3671  99609 279936  5942/5585/431    7937/1542    30  225   57.26)
(sat.ddfw       1      1   8.61108   1540001      7549         17            1      156)
ramon: poll                 wall=20.000s usage=19.973s mem=59820KiB load=1.12 rootload=1.12
ramon: end                  Fri Nov  1 22:50:54 2024
ramon: root.execname        z3
ramon: root.utime           19.990s
ramon: root.stime           0.020s
ramon: group.total          20.020s
ramon: group.utime          19.996s
ramon: group.stime          0.024s
ramon: group.mempeak        60080KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.052s
ramon: loadavg              1.00
