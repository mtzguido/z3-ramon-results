ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:57:58 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27554 MiB
ramon: sys.mem.avail        62083 MiB
ramon: sys.nprocs           1388
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/icYIlVfyPQ0J.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             898732
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   53.1915     10000        49          0            1        2)
(sat.ddfw       1      1   32.1576     20001        98          1            1        3)
(smt.stats    0    101   4786    610  1346/1220/116      93/10    10   31   52.25)
(sat.ddfw       1      1   35.3982     40001       196          2            1        5)
(sat.ddfw       1      1   34.0136     70001       343          3            1        8)
ramon: poll                 wall=1.000s usage=0.897s mem=54764KiB load=0.90 rootload=0.89
(smt.stats    1    202   6232   1150  2193/1864/116     218/12    10   31   52.45)
(sat.ddfw       1      1   28.9436    110001       539          4            1       12)
ramon: poll                 wall=2.000s usage=1.897s mem=54668KiB load=1.00 rootload=1.00
(smt.stats    2    313   7216   1643  2359/2096/117     337/20    11   33   52.64)
(sat.ddfw       1      1   24.8257    160000       784          5            1       17)
(smt.stats    3    414   7632   2075  2536/2294/117     450/20    11   33   52.74)
(smt.stats    4    525   9340   4596  2958/2681/123     583/88    14   37   52.83)
(sat.ddfw       1      1   21.6454    220001      1078          6            1       23)
ramon: poll                 wall=3.000s usage=2.896s mem=55232KiB load=1.00 rootload=1.00
(smt.stats    5    647  14565   7005  3242/2991/124     790/100    16   39   52.93)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas         :deletions    )
(smt.stats    6    748  18994   8736  3286/3034/127     894/135    17   42   52.93)
(smt.stats    7    859  22967  11964  3334/3059/127    1068/136    17   42   53.05)
(smt.stats    8    981  26099  15449  3386/3111/127    1222/136    17   42   53.05)
(sat.ddfw       1      1   19.1991    290001      1421          7            1       30)
(smt.stats    9   1115  31132  18188  3463/3197/128    1418/243    18   44   53.15)
ramon: poll                 wall=4.000s usage=3.953s mem=55320KiB load=1.06 rootload=1.05
(smt.stats   10   1216  34446  19158  3513/3225/128    1527/243    18   44   53.25)
(smt.stats   11   1327  38356  22476  3606/3345/129    1681/319    19   45   53.25)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  40773  26449  3742/3493/130    1820/352    20   46   53.34)
(smt.stats   13   1583  44957  29333  3785/3498/136    1950/365    21   51   53.46)
(sat.ddfw       1      1   17.2414    370001      1813          8            1       38)
ramon: poll                 wall=5.000s usage=4.953s mem=55584KiB load=1.00 rootload=1.00
(smt.stats   14   1730  48390  33038  3962/3681/137    2109/375    22   52   53.56)
(smt.stats   15   1831  50752  34862  4044/3730/137    2221/375    22   52   53.65)
(smt.stats   16   1942  53569  39097  4167/3887/137    2369/375    22   52   53.65)
(sat.ddfw       1      1   15.6304    460001      2254          9            1       47)
(smt.stats   17   2064  56399  44275  4181/3927/137    2504/375    22   52   53.65)
ramon: poll                 wall=6.000s usage=5.954s mem=55800KiB load=1.00 rootload=1.01
(smt.stats   18   2198  59999  47048  4223/3951/137    2686/375    22   52   53.65)
(smt.stats   19   2345  66051  55032  4240/3985/137    2839/375    22   52   53.84)
(smt.stats   20   2506  69630  60551  4272/4013/137    3036/375    22   52   54.02)
(smt.stats   21   2607  71981  63643  4298/4026/137    3152/375    22   52   54.02)
ramon: poll                 wall=7.000s usage=6.955s mem=56084KiB load=1.00 rootload=1.00
(smt.stats   22   2718  75234  66680  4362/4060/137    3270/375    22   52   54.02)
(sat.ddfw       1      1   14.2694    560001      2745         10            1       57)
(smt.stats   23   2840  76967  71866  4410/4133/137    3408/375    22   52   54.02)
(smt.stats   24   2974  78393  76322  4452/4185/137    3550/375    22   52   54.11)
(smt.stats   25   3121  84212  84790  4469/4218/138    3707/563    23   55   54.11)
(smt.stats   26   3282  85541  89333  4492/4234/138    3882/563    23   55   54.11)
ramon: poll                 wall=8.000s usage=7.954s mem=56236KiB load=1.00 rootload=1.00
(smt.stats   27   3459  87392  97729  4566/4306/139    4129/597    24   56   54.11)
(sat.ddfw       1      1   13.1375    670001      3284         11            1       68)
(smt.stats   28   3560  88206 103223  4635/4331/139    4231/597    24   56   54.22)
(smt.stats   29   3671  88780 106700  4684/4404/140    4347/597    24   56   54.22)
(smt.stats   30   3793  89559 110823  4720/4449/140    4472/614    25   57   54.31)
ramon: poll                 wall=9.000s usage=8.951s mem=56544KiB load=1.00 rootload=0.99
(smt.stats   31   3927  90419 122938  4776/4476/140    4618/615    25   57   54.31)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions    )
(smt.stats   32   4074  92561 130283  4798/4538/140    4767/615    25   57   54.55)
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&1
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&1
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&2
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&1
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&2
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&116
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&8
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&116
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&112
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&1
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&1
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&32
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 7 := 281474976710655&8
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 6 := 281474976710655&8
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 4 := 281474976710655&8
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&8
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&32
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&64
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&64
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&64
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&64
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&64
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 64 := 281474976710655&66
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 64 := 281474976710655&72
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&64
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&2
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 29 := 281474976710655&32
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&32
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 1 := 281474976710655&32
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 28 := 281474976710655&32
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 28 := 281474976710655&32
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 64 := 281474976710655&96
(smt.stats   33   4235  95176 139867  4909/4629/241    4950/641    27   75   54.89)
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 2 := 281474976710655&32
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 10 := 281474976710655&34
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 2 := 281474976710655&34
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 281474976710655&8
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 72 := 281474976710655&88
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 72 := 281474976710655&88
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 8 := 281474976710655&24
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 16 := 281474976710655&251920104156043536
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 16 := 281474976710655&251920104156043536
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 16 := 281474976710655&251920104156043536
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 16 := 281474976710655&251920104156043664
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 16 := 281474976710655&251920104156043664
(smt.stats   34   4412  97002 147467  5109/4681/247    5297/670    28   91   55.08)
(smt.stats   35   4606 100932 158375  5132/4867/277    5614/670    28   91   55.18)
(smt.stats   36   4707 105630 167253  5136/4883/277    5764/796    29   97   55.18)
(smt.stats   37   4818 109572 175937  5140/4887/278    5867/846    30  101   55.18)
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 320 := 1125899906842623&1025
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 320 := 1125899906842623&1024
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 512 := 1125899906842623&1024
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 512 := 1125899906842623&1024
(sat.ddfw       1      1   12.1729    790001      3872         12            1       80)
(smt.stats   38   4940 110547 178259  5430/4903/278    6087/850    30  101   55.28)
ramon: poll                 wall=10.000s usage=9.952s mem=57388KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 112)
(smt.stats   39   5074 114052 186046  5436/5182/283    6143/895    31  102   55.37)
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 72 := 1023&200
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 200 := 1023&200
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 57 #879 #883) 64)) 200 := 212 << 9
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 200 := 1023&200
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 57 #879 #883) 64)) 200 := 212 << 9
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 200 := 1023&200
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 57 #879 #883) 64)) 200 := 212 << 9
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 192 := 1023&192
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 57 #879 #883) 64)) 192 := 212 << 9
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 192 := 1023&192
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 57 #879 #883) 64)) 192 := 212 << 9
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 384 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 256 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 32 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 16 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
shl: (shl[58] (bv2int %0) (+ 58 (* 288230376151711743 #109))) 108545 := 106 << 10
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
shl: (shl[58] (bv2int %0) (+ 58 (* 288230376151711743 #109))) 108545 := 106 << 10
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
shl: (shl[58] (bv2int %0) (+ 58 (* 288230376151711743 #109))) 108545 := 106 << 10
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
shl: (shl[58] (bv2int %0) (+ 58 (* 288230376151711743 #109))) 108548 := 106 << 10
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
shl: (shl[58] (bv2int %0) (+ 58 (* 288230376151711743 #109))) 108546 := 106 << 10
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 8 := 1023&108544
(smt.stats   40   5221 116864 195725  5544/5284/301    6387/984    32  105   55.37)
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 512 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 512 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 1 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 2 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 4 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 8 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 16 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 32 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 64 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 128 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 256 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 512 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 16 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 2 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 4 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 4 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 2 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 1 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 2 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 16 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 16 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 8 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 8 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 128 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 256 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 512 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 384 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 256 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 256 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 256 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 128 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 128 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 64 := 1023&108544
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 0 := 1023&108544
band: (band[58] (if (= #113 57) 1 (if #632 3 #795)) (shl[58] (bv2int %0) (+ 58 #798))) 32 := 1023&108544
(smt.stats   41   5382 120180 207837  5633/5369/408    6562/1010    33  135   55.88)
(smt.stats   42   5559 127006 225332  5742/5433/409    6904/1015    34  150   55.98)
(smt.stats   43   5753 134154 246509  5757/5480/413    7174/1122    36  156   56.08)
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 160 := 68719476735&160
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 57 #879 #883) 64)) 160 := 160 << 35
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 192 := 68719476735&192
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 57 #879 #883) 64)) 192 := 160 << 35
band: (band[58] (if (= #415 63) 1 (if #611 3 #872)) (shl[64] (* 2 #107) (mod #887 64))) 192 := 68719476735&192
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 57 #879 #883) 64)) 192 := 160 << 35
(smt.stats   44   5966 138314 257360  5882/5601/421    7609/1178    37  175   56.52)
(smt.stats   45   6067 138504 262087  5891/5608/421    7725/1178    37  175   56.52)
(smt.stats   46   6178 138704 267051  5891/5608/421    7832/1203    38  179   56.52)
ramon: poll                 wall=11.000s usage=10.952s mem=58500KiB load=1.00 rootload=0.99
(smt.stats   47   6300 138891 276691  5892/5609/421    7953/1203    38  179   56.52)
(smt.stats   48   6434 139267 281589  5894/5611/421    8088/1203    38  179   56.63)
(smt.stats   49   6581 144806 291813  5924/5637/422    8317/1242    39  186   56.73)
(sat.ddfw       1      1   11.3379    920001      4509         13            1       93)
ramon: poll                 wall=12.000s usage=11.951s mem=59076KiB load=1.00 rootload=1.00
(smt.stats   50   6742 148834 299218  6129/5645/422    8604/1258    39  186   57.21)
ramon: poll                 wall=13.000s usage=12.950s mem=59636KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   10.6125   1060001      5196         14            1      108)
(smt.stats   51   6919 152668 310193  6435/5948/422    9034/1267    39  186   57.40)
ramon: poll                 wall=14.000s usage=13.950s mem=59700KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   52   7113 159208 326731  6460/6161/424    9472/1381    40  189   57.40)
(smt.stats   53   7326 165524 360297  6473/6174/424    9902/1398    41  198   57.40)
(smt.stats   54   7560 171071 378335  6543/6204/430   10201/1459    42  199   57.60)
ramon: poll                 wall=15.000s usage=14.950s mem=60064KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   9.96876   1210001      5931         15            1      123)
(smt.stats   55   7661 174549 389653  6750/6325/430   10488/1464    42  199   57.91)
ramon: poll                 wall=16.000s usage=15.950s mem=60512KiB load=1.00 rootload=1.00
(smt.stats   56   7772 176986 395926  6929/6472/430   10615/1505    43  210   58.10)
ramon: poll                 wall=17.000s usage=16.951s mem=60428KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   9.39684   1370001      6715         16            1      139)
(smt.stats   57   7894 181038 406930  7173/6662/430   10896/1506    43  210   58.10)
(smt.stats   58   8028 184506 418053  7213/6862/430   11275/1508    43  210   58.29)
(smt.stats   59   8175 189552 437341  7265/6899/431   11916/1548    44  212   58.39)
ramon: poll                 wall=18.003s usage=17.955s mem=60992KiB load=1.00 rootload=1.00
(smt.stats   60   8336 191872 451201  7299/6948/433   12181/1549    44  212   58.48)
(smt.stats   61   8513 196911 474120  7314/6980/436   12943/1636    45  227   58.58)
(smt.stats   62   8707 204362 501630  7370/6992/436   13286/1778    46  243   58.58)
ramon: poll                 wall=19.000s usage=18.948s mem=61192KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   8.89261   1540001      7549         17            1      156)
(smt.stats   63   8920 210902 528745  7605/7152/438   14061/1840    47  259   59.14)
(smt.stats   64   9154 220993 556678  7625/7290/438   14487/1840    47  259   59.24)
ramon: poll                 wall=20.000s usage=19.947s mem=61480KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 22:58:18 2024
ramon: root.execname        z3
ramon: root.utime           20.000s
ramon: root.stime           0.010s
ramon: group.total          20.020s
ramon: group.utime          20.000s
ramon: group.stime          0.020s
ramon: group.mempeak        61764KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.073s
ramon: loadavg              1.00
