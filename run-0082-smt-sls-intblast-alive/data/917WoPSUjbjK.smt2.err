ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:48:47 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29206 MiB
ramon: sys.mem.avail        62087 MiB
ramon: sys.nprocs           1391
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/917WoPSUjbjK.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             662595
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   56.8182     10000        49          0            1        2)
(smt.stats    0    102   5512    686  1209/997/98     113/15     5   17   51.97)
(sat.ddfw       1      1   32.0545     20001        98          1            1        3)
(smt.stats    1    203   7352   1700  2004/1814/104     216/48     8   39   52.07)
(smt.stats    2    314   9216   3480  2059/1871/112     314/62    12   54   52.26)
(smt.stats    3    415  11430   5233  2096/1910/115     400/73    13   60   52.36)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 0 := 1 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 1 := 3&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 3 := 1 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 1 := 2&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 2&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255551 := 1 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 1 := 2&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 2&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2 := 1 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 2&1
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1 := 2&1
(smt.stats    4    526  12481   6098  2243/2042/147     508/94    15   74   52.65)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 21&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 21&1048575
(sat.ddfw       1      1   35.0877     40001       196          2            1        5)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 4 := 22&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 4 := 22&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 4 := 24&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 8 := 24&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 24&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 24&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 22&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 21&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 21&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 2 := 22&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 32&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 32&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 32&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 32&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 32 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 32 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 24 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 19 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 19 := 20 << 20
(smt.stats    5    648  15492   8289  2505/2280/226     629/103    18   94   52.95)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 2 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 4 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1048574 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1048572 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1048568 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 64 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 128 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 256 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 512 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1024 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 2048 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 4096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16384 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 65536 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 262144 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 524288 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1026 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 64 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 64 := 20971520&1048575
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas         :deletions    )
(smt.stats    6    749  16417   9379  2802/2377/226     853/108    18   94   53.94)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 616 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 608 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 704 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 704 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 640 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 640 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1024 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1024 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 2048 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 4096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16384 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 12288 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 4096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 65536 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 524288 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16384 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 2048 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 512 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 512 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 512 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1 := 20971520&1048575
(smt.stats    7    860  18430  13203  2924/2627/389    1080/175    20  129   54.13)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262146 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262144 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262080 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262016 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 261888 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 261632 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 1024 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 2048 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 4096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 16384 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 65536 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 524288 := 20971520&1048575
(smt.stats    8    982  19916  16798  3056/2813/495    1399/291    22  162   54.63)
(sat.ddfw       1      1   31.5126     70001       343          3            1        8)
ramon: poll                 wall=1.002s usage=0.813s mem=56968KiB load=0.81 rootload=0.80
(smt.stats    9   1116  23204  22863  3135/2872/500    1553/321    24  183   54.82)
(sat.ddfw       1      1   29.4334    110001       539          4            1       12)
(sat.ddfw       1      1   28.6527    160000       784          5            1       17)
(smt.stats   10   1217  24334  24277  3326/2892/500    1684/336    25  184   55.21)
ramon: poll                 wall=2.000s usage=1.872s mem=57772KiB load=1.06 rootload=1.05
(sat.ddfw       1      1   25.5868    220001      1078          6            1       23)
ramon: poll                 wall=3.000s usage=2.870s mem=57824KiB load=1.00 rootload=1.00
(smt.stats   11   1328  27128  29908  3531/3131/500    1893/339    25  184   55.41)
(sat.ddfw       1      1   22.9433    290001      1421          7            1       30)
(sat.ddfw       1      1   20.6718    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=3.872s mem=57940KiB load=1.00 rootload=1.01
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1450  29081  33197  3740/3461/503    2219/359    26  186   55.60)
(sat.ddfw       1      1   18.4388    460001      2254          9            1       47)
ramon: poll                 wall=5.002s usage=4.830s mem=58128KiB load=0.96 rootload=0.95
(smt.stats   13   1584  36098  47730  3888/3476/511    2834/594    27  214   55.70)
(sat.ddfw       1      1   16.9952    560001      2745         10            1       57)
ramon: poll                 wall=6.000s usage=5.826s mem=58352KiB load=1.00 rootload=1.00
(smt.stats   14   1731  42130  58514  4116/3642/511    3238/600    27  214   56.04)
ramon: poll                 wall=7.000s usage=6.822s mem=58696KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   15.7143    670001      3284         11            1       68)
(smt.stats   15   1832  44111  61662  4278/3865/511    3511/604    27  214   56.23)
ramon: poll                 wall=8.000s usage=7.889s mem=58720KiB load=1.07 rootload=1.06
(sat.ddfw       1      1   14.8699    790001      3872         12            1       80)
(smt.stats   16   1943  47795  72138  4424/4073/511    4247/607    27  214   56.33)
(smt.stats   17   2065  51939  79673  4479/4187/513    4850/1084    28  218   56.42)
(smt.stats   18   2199  56897  87512  4510/4211/515    5131/1146    29  221   56.52)
ramon: poll                 wall=9.000s usage=8.947s mem=58928KiB load=1.06 rootload=1.06
(smt.stats   19   2346  63813  96872  4633/4254/515    5599/1197    30  229   56.75)
(sat.ddfw       1      1   13.8357    920001      4509         13            1       93)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   20   2507  71912 119293  4804/4526/517    6701/1294    31  230   56.85)
ramon: poll                 wall=10.000s usage=9.944s mem=59136KiB load=1.00 rootload=1.00
(smt.stats   21   2608  79218 130212  4936/4537/517    6930/1465    32  231   56.85)
(smt.stats   22   2719  85582 147015  5184/4671/517    7227/1470    32  231   57.04)
(sat.ddfw       1      1   12.9498   1060001      5196         14            1      108)
ramon: poll                 wall=11.000s usage=10.943s mem=59408KiB load=1.00 rootload=1.00
(smt.stats   23   2841  92205 166412  5369/4931/517    7787/1477    32  231   57.29)
(smt.stats   24   2975  96916 175282  5538/5235/518    8284/1673    33  235   57.39)
ramon: poll                 wall=12.000s usage=11.942s mem=59608KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   12.1743   1210001      5931         15            1      123)
(smt.stats   25   3122 102841 187037  5715/5392/519    9414/1679    33  235   57.58)
ramon: poll                 wall=13.000s usage=12.943s mem=59880KiB load=1.00 rootload=1.00
(smt.stats   26   3283 108927 210614  6059/5486/519   10451/1827    34  237   57.67)
(sat.ddfw       1      1   11.4745   1370001      6715         16            1      139)
ramon: poll                 wall=14.000s usage=13.942s mem=60020KiB load=1.00 rootload=1.00
(smt.stats   27   3460 117588 233668  6259/5977/520   11531/2205    35  239   58.04)
(smt.stats   28   3561 120824 244729  6357/6006/520   11790/2210    35  239   58.04)
ramon: poll                 wall=15.000s usage=14.944s mem=60780KiB load=1.00 rootload=1.00
(smt.stats   29   3672 125152 254546  6722/6167/520   12278/2210    35  239   58.32)
(sat.ddfw       1      1   10.8557   1540001      7549         17            1      156)
ramon: poll                 wall=16.000s usage=15.907s mem=60900KiB load=0.96 rootload=0.96
(smt.stats   30   3794 133053 269199  6904/6459/520   12643/2210    35  239   58.42)
ramon: poll                 wall=17.000s usage=16.907s mem=60936KiB load=1.00 rootload=1.00
(smt.stats   31   3929 140068 306471  7102/6824/521   13794/2577    36  249   58.86)
(smt.stats   32   4076 146012 324572  7177/6832/521   14295/2584    36  249   58.86)
(sat.ddfw       1      1   10.2093   1720001      8431         18            1      174)
ramon: poll                 wall=18.002s usage=17.803s mem=61220KiB load=0.89 rootload=0.90
(smt.stats   33   4237 151144 346125  7648/7335/522   15095/2863    37  255   58.95)
(smt.stats   34   4415 155808 378162  8121/7845/528   16047/3077    38  265   59.24)
(smt.stats   35   4609 160265 399890  8187/7862/528   16803/3077    38  265   59.44)
ramon: poll                 wall=19.000s usage=18.724s mem=62116KiB load=0.92 rootload=0.92
(smt.stats   36   4710 161860 409665  8468/7988/528   16997/3077    38  265   59.63)
(smt.stats   37   4821 164592 432022  8618/8200/528   17460/3077    38  265   59.73)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 248&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 9 := 124 << 1
(smt.stats   38   4943 168558 452558  8693/8327/528   18250/3078    38  265   59.82)
(smt.delete-inactive-clauses  :num-deleted-clauses 186)
(sat.ddfw       1      1   9.60275   1910001      9362         19            1      193)
(smt.stats   39   5077 173684 477529  8769/8412/529   19409/3393    39  281   60.11)
ramon: poll                 wall=20.000s usage=19.694s mem=62420KiB load=0.97 rootload=0.97
ramon: end                  Fri Nov  1 21:49:07 2024
ramon: root.execname        z3
ramon: root.utime           19.690s
ramon: root.stime           0.010s
ramon: group.total          19.708s
ramon: group.utime          19.696s
ramon: group.stime          0.012s
ramon: group.mempeak        62680KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.024s
ramon: loadavg              0.98
