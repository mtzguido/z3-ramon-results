ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:35:11 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28073 MiB
ramon: sys.mem.avail        62085 MiB
ramon: sys.nprocs           1384
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/UY8SciSzPHXE.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             822740
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   88.4956     10000        49          0            1        2)
(sat.ddfw       1      1   45.4591     20001        98          1            1        3)
(smt.stats    0    101   4625    304  1224/1081/108      97/15     6   16   52.06)
(smt.stats    1    202   7868    998  1770/1578/108     202/24     6   16   52.15)
(sat.ddfw       1      1   45.4545     40001       196          2            1        5)
(smt.stats    2    313  10258   4156  1827/1639/109     319/31     7   17   52.35)
(smt.stats    3    414  13415   8410  2031/1838/114     420/36     8   18   52.55)
(smt.stats    4    525  13988   9363  2409/1887/115     529/66     8   18   52.65)
(smt.stats    5    647  17319  17323  2519/2273/122     638/86    10   32   52.65)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  20873  25240  2539/2301/122     732/93    11   41   52.77)
(sat.ddfw       1      1   39.3185     70001       343          3            1        8)
(smt.stats    7    859  23124  29524  2543/2305/124     836/93    12   44   52.98)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 2251799813685248 := 8589932601 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 2251799813685248 := 8589932601 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 8589932601&1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 8589932601&1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 8589932602&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 1125908496775226 := 8589932601 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 17179865202&1
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 8589932601 := 8589932601 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 17179865202&1
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 8589932600 := 8589932601 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 17179865202&1
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 2 := 8589932601 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 17179865202&1
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 1 := 17179865202&1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 17179865202&1
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 1 := 17179865202&1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 17179865202&1
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 1 := 17179865202&1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 1 := 17179865202&1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 1 := 17179865202&1
(smt.stats    8    981  23943  32256  2609/2358/156     953/96    13   47   52.98)
ramon: poll                 wall=1.000s usage=0.950s mem=55396KiB load=0.95 rootload=0.94
(sat.ddfw       1      1   33.5852    110001       539          4            1       12)
(smt.stats    9   1115  24922  33659  2670/2377/167    1091/103    14   52   53.17)
(smt.stats   10   1216  25880  35550  2797/2511/167    1204/106    14   52   53.17)
(sat.ddfw       1      1   28.8013    160000       784          5            1       17)
(smt.stats   11   1327  27520  38477  2854/2584/167    1303/113    15   65   53.30)
ramon: poll                 wall=2.000s usage=1.948s mem=55652KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  29112  40774  2907/2657/168    1442/126    16   67   53.30)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 1022 := 1125899906842622&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 1020 := 1125899906842622&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 1016 := 1125899906842622&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 1008 := 1125899906842622&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 992 := 1125899906842622&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 960 := 1125899906842622&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 80 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 80 := 8589932624&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 104 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 104 := 8589932616&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 98 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 98 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 98 := 8589932614&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 96 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 96 := 8589932640&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 128 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 128 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 128 := 8589932672&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 260 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 260 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 324 := 8589932612&1024
(smt.stats   13   1583  30304  42453  3069/2663/169    1644/130    16   67   53.71)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 833 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 833 := 8589932612&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 833 := 8589932613&1024
(sat.ddfw       1      1   25.8069    220001      1078          6            1       23)
(smt.stats   14   1730  33389  47922  3134/2825/229    1874/133    16   67   53.80)
(sat.ddfw ramon: poll                 wall=3.002s usage=3.000s mem=56240KiB load=1.05 rootload=1.04
      1      1   23.7853    290001      1421          7            1       30)
(smt.stats   15   1831  35317  52299  3267/2915/229    1987/210    17   83   54.00)
(smt.stats   16   1942  36203  55813  3346/3082/233    2100/216    18   88   54.00)
(smt.stats   17   2064  39256  59693  3365/3098/233    2243/216    18   88   54.00)
(smt.stats   18   2198  41305  65896  3384/3118/235    2372/233    19  100   54.10)
(sat.ddfw       1      1   21.0416    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=3.992s mem=56324KiB load=0.99 rootload=1.00
(smt.stats   19   2345  44566  76892  3466/3198/239    2566/240    20  107   54.19)
(smt.stats   20   2506  47571  89655  3483/3217/240    2802/277    21  114   54.29)
(smt.stats   21   2607  50036  99577  3490/3224/241    2904/277    21  114   54.29)
(smt.stats   22   2718  52693 109773  3493/3227/246    3054/301    22  118   54.48)
(sat.ddfw       1      1   18.8917    460001      2254          9            1       47)
(smt.stats   23   2840  56229 123923  3503/3235/246    3219/337    23  124   54.48)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 302&1
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 1 := 302&1
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 302&1
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 1 := 302&1
ramon: poll                 wall=5.000s usage=4.998s mem=56760KiB load=1.01 rootload=1.00
(smt.stats   24   2974  58373 133539  3512/3246/247    3361/353    24  126   54.48)
(smt.stats   25   3121  62440 142327  3523/3255/249    3541/366    25  130   54.62)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 17179863322&1024
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 2251816993548570 := 161 << 11
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 17179863321&1024
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 2251816993548569 := 161 << 11
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 562949953413723&1024
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 562949953413723 := 161 << 11
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 562949953413723&1024
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 562949953413723 := 161 << 11
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 1026 := 161 << 11
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 1022 := 161 << 11
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 1024 := 161 << 11
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 1024 := 161 << 11
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 66 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 68 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 72 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 80 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 96 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 128 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 256 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 512 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 1024 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 512 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 512 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 512 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 1024 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 80 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 72 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 76 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 76 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 76 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 104 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 96 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 128 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 256 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 192 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 128 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 320 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 256 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 256 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 256 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 66 := 329728&1024
(smt.stats   26   3282  65893 156086  3640/3268/249    3737/377    25  130   54.91)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 64 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 329728&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 64 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 320 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 320 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 320 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 256 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 512 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 1024 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 1024 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 1024 := 329728&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 768 := 329728&1024
(smt.stats   27   3459  69557 167377  3703/3416/398    3977/387    26  150   55.10)
(smt.stats   28   3560  75185 181747  3731/3445/398    4106/418    27  174   55.10)
(smt.stats   29   3671  80132 193783  3733/3446/398    4260/418    27  174   55.49)
(smt.stats   30   3793  85881 202267  3838/3507/398    4442/421    27  174   55.59)
(smt.stats   31   3927  89058 211822  3882/3576/399    4705/483    28  176   55.78)
(sat.ddfw       1      1    17.135    560001      2745         10            1       57)
ramon: poll                 wall=6.000s usage=5.996s mem=58244KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074  92451 219874  3910/3579/401    4932/484    28  176   56.14)
ramon: poll                 wall=7.000s usage=7.016s mem=58248KiB load=1.02 rootload=1.02
(sat.ddfw       1      1   15.8114    670001      3284         11            1       68)
(smt.stats   33   4235  94340 223459  4169/3653/401    5182/523    29  181   56.23)
(smt.stats   34   4412 100028 241822  4229/3915/404    5706/626    30  187   56.33)
ramon: poll                 wall=8.000s usage=8.046s mem=59080KiB load=1.03 rootload=1.03
(sat.ddfw       1      1   14.6395    790001      3872         12            1       80)
(smt.stats   35   4606 105015 251505  4306/3942/405    6108/627    30  187   56.76)
ramon: poll                 wall=9.000s usage=9.045s mem=59080KiB load=1.00 rootload=1.00
(smt.stats   36   4707 108145 260082  4431/4052/406    6311/690    31  197   56.85)
(sat.ddfw       1      1    13.577    920001      4509         13            1       93)
ramon: poll                 wall=10.000s usage=10.045s mem=59336KiB load=1.00 rootload=1.00
(smt.stats   37   4818 112317 271104  4498/4129/406    6497/693    31  197   56.95)
(smt.stats   38   4940 114973 282698  4522/4206/409    6756/737    32  197   56.95)
(smt.delete-inactive-clauses  :num-deleted-clauses 219)
ramon: poll                 wall=11.000s usage=11.009s mem=59552KiB load=0.96 rootload=0.96
(sat.ddfw       1      1   12.6468   1060001      5196         14            1      108)
(smt.stats   39   5074 121168 298489  4541/4212/409    6738/737    32  197   57.04)
ramon: poll                 wall=12.000s usage=12.011s mem=60128KiB load=1.00 rootload=1.00
(smt.stats   40   5221 126350 312051  4638/4239/409    7008/779    33  207   57.24)
(smt.stats   41   5382 131458 328745  4686/4331/410    7255/807    34  208   57.24)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 832 := 1125899906842564&1024
(smt.stats   42   5559 136870 347551  4733/4394/410    7638/809    34  208   57.35)
(sat.ddfw       1      1   11.8371   1210001      5931         15            1      123)
ramon: poll                 wall=13.000s usage=13.010s mem=60236KiB load=1.00 rootload=1.00
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 512 := 1125899906828674&8192
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 512 := 1125899906829058&8192
(smt.stats   43   5753 142361 363920  4998/4526/416    8162/888    35  209   57.78)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 512 := 1125899906833154&2048
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 512 := 1125899906833154&2048
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 512 := 1125899906833282&2048
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 512 := 1125899906833154&2048
(smt.stats   44   5966 150003 392551  5051/4736/426    8788/972    37  214   57.98)
(smt.stats   45   6067 153091 402618  5071/4752/426    9022/972    37  214   57.98)
(smt.stats   46   6178 157473 420584  5081/4762/426    9362/972    37  214   57.98)
ramon: poll                 wall=14.000s usage=14.077s mem=60160KiB load=1.07 rootload=1.07
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 9470&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 9470&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 8446&1024
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 2306968909120545022 := 562949953413611 << 11
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   47   6300 162351 445749  5160/4763/426    9606/1094    38  216   58.07)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 8 := 1125899891070976&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 32 := 1125899891070976&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 32 := 1125899891070976&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 64 := 1125899891070976&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 64 := 1125899891070976&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 16 := 1125899891070976&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 16 := 1125899891070976&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 1024 := 1125899891070976&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 1024 := 1125899891070976&1024
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 0 := 1125899891070976&1024
band: (band[50] (shl[50] (bv2int %0) (mod #107 50)) (if (= #609 49) 1 (if #611 2 #707))) 128 := 1125899891070976&1024
(smt.stats   48   6434 164753 459155  5200/4854/431    9889/1107    39  217   58.07)
(sat.ddfw       1      1   11.2289   1370001      6715         16            1      139)
(smt.stats   49   6581 169235 473976  5227/4905/438   10197/1164    40  226   58.27)
ramon: poll                 wall=15.000s usage=15.029s mem=60716KiB load=0.95 rootload=0.95
(smt.stats   50   6742 173762 491525  5267/4918/438   10639/1166    40  226   58.37)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 274877906944 := 274878237760&274877906944
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 3377974598765632 := 562949953413289 << 39
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 274877906944 := 274878235712&274877906944
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 3377974598763584 := 562949953413289 << 39
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 274877906944 := 274878233724&274877906944
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 3377974598761596 := 562949953413289 << 39
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 274877906944 := 274878233664&274877906944
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 3377974598761536 := 562949953413289 << 39
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 274877906944 := 274878231616&274877906944
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 3377974598759488 := 562949953413289 << 39
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 274877906944 := 274878231616&274877906944
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 3377974598759488 := 562949953413289 << 39
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 274877906944 := 274878231616&274877906944
shl: (shl[64] (bv2int %0) (mod (+ #107 #369) 64)) 3377974598759488 := 562949953413289 << 39
(smt.stats   51   6919 180180 517095  5428/4958/438   11021/1170    40  226   58.46)
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 58 := 562949953407616&137438953472
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 42 := 562949953407618&137438953472
band: (band[50] (shl[64] (bv2int %0) (mod #370 64)) (if (= #726 63) 0 (if #728 1 #852))) 42 := 562949953407618&137438953472
(smt.stats   52   7113 187788 546764  5547/5112/443   11474/1241    41  227   58.46)
ramon: poll                 wall=16.000s usage=16.031s mem=61396KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   10.5348   1540001      7549         17            1      156)
(smt.stats   53   7326 197744 581684  5968/5234/443   12014/1261    42  227   58.75)
ramon: poll                 wall=17.002s usage=17.036s mem=61308KiB load=1.00 rootload=1.01
(smt.stats   54   7560 205285 611360  6208/5676/443   13259/1272    42  227   58.85)
(smt.stats   55   7661 208596 633262  6438/5934/443   13623/1273    42  227   59.31)
(smt.stats   56   7772 211435 653047  6608/6135/443   14025/1278    42  227   59.40)
ramon: poll                 wall=18.000s usage=18.030s mem=61752KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   9.97893   1720001      8431         18            1      174)
(smt.stats   57   7894 215022 670676  6798/6299/443   14416/1284    42  227   59.59)
(smt.stats   58   8028 218250 691234  6827/6502/444   15191/1417    43  228   59.59)
(smt.stats   59   8175 224431 732735  6833/6508/446   15657/1417    43  228   59.69)
ramon: poll                 wall=19.000s usage=19.029s mem=62044KiB load=1.00 rootload=1.00
(smt.stats   60   8336 229856 758557  6847/6512/446   15853/1607    44  244   59.69)
ramon: poll                 wall=20.000s usage=20.030s mem=62188KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 22:35:32 2024
ramon: root.execname        z3
ramon: root.utime           20.050s
ramon: root.stime           0.030s
ramon: group.total          20.088s
ramon: group.utime          20.056s
ramon: group.stime          0.032s
ramon: group.mempeak        62444KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.060s
ramon: loadavg              1.00
