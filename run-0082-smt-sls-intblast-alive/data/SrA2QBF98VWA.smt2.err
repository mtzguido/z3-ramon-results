ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:32:05 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28150 MiB
ramon: sys.mem.avail        62086 MiB
ramon: sys.nprocs           1387
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/SrA2QBF98VWA.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             812556
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   68.4932     10000        49          0            1        2)
(sat.ddfw       1      1   35.5907     20001        98          1            1        3)
(sat.ddfw       1      1   36.4299     40001       196          2            1        5)
(smt.stats    0    101   2244    537  1354/1203/116     100/9     7   17   52.26)
ramon: poll                 wall=1.000s usage=0.944s mem=54516KiB load=0.94 rootload=0.93
(sat.ddfw       1      1   31.4465     70001       343          3            1        8)
(smt.stats    1    202   2598    875  1958/1754/116     235/11     7   17   52.26)
(smt.stats    2    313   5997   2198  2016/1813/119     376/25     8   22   52.36)
(smt.stats    3    414   8922   6346  2318/2119/124     498/58    11   31   52.55)
(smt.stats    4    525  10257   9483  2862/2287/124     608/90    12   32   52.68)
(smt.stats    5    647  16096  14085  2870/2618/124     731/90    12   32   52.77)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  19129  15959  2871/2619/125     829/89    13   35   52.87)
(smt.stats    7    859  21304  18041  2871/2619/125     940/89    13   35   52.97)
(smt.stats    8    981  23043  20949  2871/2619/125    1062/89    13   35   52.97)
(smt.stats    9   1115  25792  23605  2871/2619/125    1196/89    13   35   52.97)
(sat.ddfw       1      1   26.7738    110001       539          4            1       12)
(smt.stats   10   1216  27875  26264  2871/2619/125    1297/89    13   35   53.10)
(smt.stats   11   1327  30428  28713  2871/2619/125    1408/89    13   35   53.10)
(smt.stats   12   1449  33027  32168  2871/2619/125    1530/89    13   35   53.10)
(smt.stats   13   1583  34698  35659  2871/2619/125    1664/89    13   35   53.20)
(smt.stats   14   1730  37549  41759  2871/2619/125    1811/89    13   35   53.20)
(smt.stats   15   1831  39574  44356  2871/2619/125    1912/89    13   35   53.20)
(smt.stats   16   1942  41671  46612  2890/2629/125    2023/89    13   35   53.32)
(smt.stats   17   2064  44041  48662  2916/2660/125    2144/89    13   35   53.32)
(smt.stats   18   2198  46140  51737  2916/2660/125    2278/89    13   35   53.32)
(smt.stats   19   2345  48338  56567  2916/2660/125    2425/89    13   35   53.32)
ramon: poll                 wall=2.000s usage=1.941s mem=55540KiB load=1.00 rootload=1.00
(smt.stats   20   2506  50885  61164  2916/2660/125    2586/89    13   35   53.32)
(smt.stats   21   2607  52308  63924  2919/2663/125    2698/89    13   35   53.42)
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&2
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&1
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&1
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&2
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 62 #931 #932) 64)) 9223372036854775808 := 9223372036854775810 << 22
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 62 #931 #932) 64)) 9223372036854775808 := 9223372036854775810 << 22
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 62 #931 #932) 64)) 9223372036854775808 := 9223372036854775810 << 22
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&0
shl: (shl[63] (bv2int %1) (+ 63 (* 9223372036854775807 #131))) 1 := 4611687117939015680 << 23
(smt.stats   22   2718  54117  67363  2943/2687/141    2808/99    14   39   53.42)
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&2
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 4 := 4194303&4
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 62 #931 #932) 64)) 4 := 6 << 22
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
shl: (shl[63] (bv2int %1) (+ 63 (* 9223372036854775807 #131))) 8388607 := 2199023255553 << 23
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 62 #931 #932) 64)) 9223372036854775808 := 9223374235878031362 << 22
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
shl: (shl[63] (bv2int %1) (+ 63 (* 9223372036854775807 #131))) 1 := 2199023255553 << 23
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4194303 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4194302 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4194300 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4194296 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4194288 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4194272 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4194240 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4194176 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4194048 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 256 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 512 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 1024 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 1024 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 2048 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 4096 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 8192 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 16384 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 32768 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 65536 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 131072 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 131072 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 262144 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 524288 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 1048576 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 2097152 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 524288 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 1048576 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 2097152 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 131071 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 131073 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 131072 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&16777216
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 262144 := 4194303&16777216
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&16777216
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 262144 := 4194303&16777216
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&16777216
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 262144 := 4194303&16777216
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 4194303 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 4194302 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 4194300 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 4194296 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 65536 := 4194303&8388608
(sat.ddfw       1      1   23.1584    160000       784          5            1       17)
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4194303&8388608
band: (band[63] (if (= #135 62) 0 (if #675 1 #852)) (shl[63] (bv2int %1) (+ 63 #855))) 65536 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 51328 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 51456 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 51328 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 51456 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 51712 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 52224 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 53248 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 57344 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 65536 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 131072 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 262144 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 524288 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 1048576 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 2097152 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 2097152 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 2097152 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 2097152 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 3932160 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 3670016 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 2097152 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 262144 := 4194303&8388608
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 1048576 := 4194303&8388608
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   23   2840  55125  69717  3189/2865/297    3019/121    14   39   54.39)
(smt.stats   24   2974  55839  71800  3267/2913/313    3185/121    14   39   54.50)
ramon: poll                 wall=3.000s usage=2.938s mem=56724KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   20.2433    220001      1078          6            1       23)
(smt.stats   25   3121  59730  75508  3846/3495/316    3366/127    14   39   54.59)
(sat.ddfw       1      1   17.9625    290001      1421          7            1       30)
ramon: poll                 wall=4.000s usage=3.937s mem=56724KiB load=1.00 rootload=0.99
(smt.stats   26   3282  64506  83080  3943/3683/322    3533/274    16  101   54.84)
(smt.stats   27   3459  70910  91459  3979/3696/326    3734/283    17  102   54.84)
(smt.stats   28   3560  72381  95617  4028/3766/327    3840/301    18  121   54.84)
ramon: poll                 wall=5.000s usage=4.934s mem=56980KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   16.0966    370001      1813          8            1       38)
(smt.stats   29   3671  74471  99557  4190/3777/329    3948/305    18  121   54.94)
(smt.stats   30   3793  76621 102744  4360/3944/329    4075/307    18  121   54.94)
ramon: poll                 wall=6.000s usage=5.932s mem=57236KiB load=1.00 rootload=0.99
(smt.stats   31   3927  79351 108545  4467/4113/329    4192/319    19  152   55.07)
(sat.ddfw       1      1   14.5631    460001      2254          9            1       47)
(smt.stats   32   4074  82886 114731  4608/4232/329    4390/327    19  152   55.07)
ramon: poll                 wall=7.000s usage=7.175s mem=57504KiB load=1.24 rootload=1.25
(smt.stats   33   4235  88590 123433  4842/4403/329    4565/328    19  152   55.16)
(sat.ddfw       1      1   13.9412    560001      2745         10            1       57)
ramon: poll                 wall=8.000s usage=8.173s mem=57504KiB load=1.00 rootload=1.00
(smt.stats   34   4412  91496 128492  5164/4592/329    4755/328    19  152   55.35)
(sat.ddfw       1      1   12.7241    670001      3284         11            1       68)
(smt.stats   35   4606  96432 135583  5549/5121/329    4939/360    19  152   55.51)
ramon: poll                 wall=9.000s usage=9.175s mem=58016KiB load=1.00 rootload=1.00
(smt.stats   36   4707  99046 140841  5682/5313/329    5045/367    19  152   55.60)
(smt.stats   37   4818 102090 146763  5737/5431/329    5160/367    19  152   55.60)
(smt.stats   38   4940 105197 153700  5752/5486/329    5320/367    19  152   55.88)
ramon: poll                 wall=10.000s usage=10.173s mem=58036KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 269)
(smt.stats   39   5074 109173 164044  5793/5523/338    5308/491    20  195   55.88)
(sat.ddfw       1      1   11.7062    790001      3872         12            1       80)
(smt.stats   40   5221 114050 177027  5810/5541/341    5443/527    22  201   55.88)
(smt.stats   41   5382 119307 193080  5891/5604/342    5701/538    23  201   55.98)
(smt.stats   42   5559 121783 202715  5921/5628/342    5895/538    23  201   55.98)
ramon: poll                 wall=11.000s usage=11.171s mem=58292KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   43   5753 125695 217696  5937/5662/343    6114/583    24  202   56.07)
(smt.stats   44   5966 130084 230254  6007/5684/343    6473/584    24  202   56.31)
(smt.stats   45   6067 132083 235413  6026/5750/344    6632/597    25  204   56.31)
(smt.stats   46   6178 136617 247580  6028/5756/344    6749/597    25  204   56.31)
ramon: poll                 wall=12.000s usage=12.172s mem=58864KiB load=1.00 rootload=1.01
(sat.ddfw       1      1   10.8415    920001      4509         13            1       93)
(smt.stats   47   6300 141813 263116  6040/5760/344    6867/597    25  204   56.63)
(smt.stats   48   6434 143493 268488  6050/5776/344    7006/597    25  204   56.63)
(smt.stats   49   6581 144052 273692  6052/5780/344    7176/597    25  204   56.63)
(smt.stats   50   6742 144940 280718  6052/5780/344    7337/597    25  204   56.63)
(smt.stats   51   6919 147372 288614  6053/5781/344    7520/597    25  204   56.73)
(smt.stats   52   7113 152864 303990  6085/5796/347    7799/634    26  205   56.73)
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4611686018427387903&4611686018427387904
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 62 #931 #932) 64)) 13835058055282163712 := 2 << 62
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4611686018427387903&4611686018427387904
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 62 #931 #932) 64)) 13835058055282163712 := 2 << 62
ramon: poll                 wall=13.000s usage=13.171s mem=59120KiB load=1.00 rootload=0.99
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4611686018427387903&4611686018429485054
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4611686018427387903&4611686018429485052
band: (band[63] (if (= #466 63) 0 (if #654 1 #924)) (shl[64] (* 2 #444) (mod #937 64))) 0 := 4611686018427387903&4611686018427387904
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 62 #931 #932) 64)) 13835058055282163712 := 2 << 62
(smt.stats   53   7326 157621 314382  6148/5847/353    8086/661    27  210   56.92)
(sat.ddfw       1      1    10.101   1060001      5196         14            1      108)
ramon: poll                 wall=14.000s usage=14.292s mem=59324KiB load=1.12 rootload=1.13
(smt.stats   54   7560 163025 332854  6227/5901/353    8394/661    27  210   57.02)
(smt.stats   55   7661 166036 343336  6264/5952/355    8619/687    28  212   57.02)
ramon: poll                 wall=15.000s usage=15.346s mem=59344KiB load=1.05 rootload=1.05
(smt.stats   56   7772 167137 346810  6305/6017/355    8781/687    28  212   57.02)
(smt.stats   57   7894 168873 353664  6319/6029/359    9056/784    29  219   57.02)
(sat.ddfw       1      1   9.56206   1210001      5931         15            1      123)
ramon: poll                 wall=16.000s usage=16.469s mem=59192KiB load=1.12 rootload=1.12
ramon: poll                 wall=17.000s usage=17.469s mem=59192KiB load=1.00 rootload=1.00
(smt.stats   58   8028 172444 363116  6355/6042/360    9229/784    29  219   57.02)
(sat.ddfw       1      1   9.03597   1370001      6715         16            1      139)
ramon: poll                 wall=18.000s usage=18.541s mem=59476KiB load=1.07 rootload=1.07
(smt.stats   59   8175 178403 382763  6413/6118/360    9372/831    30  232   57.11)
ramon: poll                 wall=19.000s usage=19.540s mem=59532KiB load=1.00 rootload=1.00
(smt.stats   60   8336 183099 398211  6457/6148/360    9579/831    30  232   57.11)
(sat.ddfw       1      1   8.53971   1540001      7549         17            1      156)
ramon: poll                 wall=20.000s usage=20.538s mem=59544KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 22:32:25 2024
ramon: root.execname        z3
ramon: root.utime           20.580s
ramon: root.stime           0.010s
ramon: group.total          20.596s
ramon: group.utime          20.584s
ramon: group.stime          0.012s
ramon: group.mempeak        59704KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.060s
ramon: loadavg              1.03
