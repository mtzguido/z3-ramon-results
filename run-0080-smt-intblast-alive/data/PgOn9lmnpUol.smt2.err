ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:19:42 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         25834 MiB
ramon: sys.mem.avail        61755 MiB
ramon: sys.nprocs           1391
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/PgOn9lmnpUol.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             21650
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&125
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&125
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&9007199254740991
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 18437736874454810624 := 124 << 43
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 20 := 17592186044415&20
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 20 := 18 << 43
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 20 := 17592186044415&20
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 20 := 18 << 43
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 20 := 17592186044415&20
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 20 := 18 << 43
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 20 := 17592186044415&20
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 20 := 18 << 43
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 20 := 17592186044415&20
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 20 := 18 << 43
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 20 := 17592186044415&20
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 20 := 18 << 43
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 17592186044415 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 17592186044414 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 17592186044412 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&158329674399744
shl: (shl[53] (bv2int %0) (+ 53 (* 9007199254740991 #115))) 9007199254740991 := 9 << 44
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 17592186044411 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 17592186044408 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&158329674399744
shl: (shl[53] (bv2int %0) (+ 53 (* 9007199254740991 #115))) 158329674399745 := 9 << 44
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&158329674399744
shl: (shl[53] (bv2int %0) (+ 53 (* 9007199254740991 #115))) 158329674399745 := 9 << 44
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&158329674399744
shl: (shl[53] (bv2int %0) (+ 53 (* 9007199254740991 #115))) 158329674399745 := 9 << 44
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 16 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 32 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 64 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 64 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 128 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 512 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1024 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2048 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 4096 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 8192 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 16384 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 32768 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 65536 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 131072 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 262144 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 524288 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1048576 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2097152 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1048576 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2097152 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 4194304 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 8388608 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 16777216 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 33554432 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 67108864 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 134217728 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 268435456 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 536870912 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1073741824 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2147483648 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 4294967296 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 8589934592 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 17179869184 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 34359738368 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 68719476736 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 137438953472 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 274877906944 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 549755813888 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1099511627776 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2199023255552 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 4398046511104 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 8796093022208 := 17592186044415&158329674399744
(smt.stats    0    101   2411    837  1387/1266/228      95/14    10   44   20.18)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2050 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2178 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2048 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2048 := 17592186044415&158329674399744
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2048 := 17592186044415&158329674399744
(smt.stats    1    202   4484   2010  2406/2118/228     222/21    10   44   20.37)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 128 := 70368744177663&123145302310912
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 128 := 70368744177663&123145302310912
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 128 := 70368744177663&123145302310912
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&123145302310912
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&123145302310912
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&2046
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&258
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&756
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&512
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&768
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&768
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&258
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&260
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&264
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&264
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&272
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&272
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&1024
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&1280
(smt.stats    2    313   9755   6711  2608/2309/241     404/69    12   47   20.56)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&258
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 256 := 70368744177663&258
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 192 := 70368744177663&256
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 192 := 70368744177663&256
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 192 := 70368744177663&256
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 192 := 70368744177663&224
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 192 := 70368744177663&224
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 192 := 70368744177663&224
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 224 := 70368744177663&240
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 224 := 70368744177663&240
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 224 := 70368744177663&228
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 245 := 70368744177663&248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 246 := 70368744177663&248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 246 := 70368744177663&250
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 246 := 70368744177663&254
(smt.stats    3    414  12062   9711  2730/2493/330     611/180    14   65   20.85)
(smt.stats    4    526  14817  13234  2747/2510/340     784/264    17   91   20.95)
(smt.stats    5    648  22588  21741  2748/2511/341     948/312    18   94   21.06)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 1&2097208
shl: (shl[53] (bv2int %0) (+ 53 (* 9007199254740991 #115))) 1 := 1048604 << 1
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 1&2097208
shl: (shl[53] (bv2int %0) (+ 53 (* 9007199254740991 #115))) 1048603 := 1048604 << 1
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 1&2097208
shl: (shl[53] (bv2int %0) (+ 53 (* 9007199254740991 #115))) 1048603 := 1048604 << 1
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 1&2097208
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 1 := 1&2097208
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 1&2097208
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 1 := 1&2097208
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 1&2097208
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 1 := 1&2097208
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 1&2097208
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 1 := 1&2097208
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations          :lemmas          :deletions    )
(smt.stats    6    749  26872  25660  2785/2511/341    1142/313    18   94   21.16)
(smt.stats    7    860  31909  28789  2796/2554/356    1258/366    19   97   21.16)
(smt.stats    8    982  35934  35858  2827/2585/362    1398/393    22  117   21.25)
(smt.stats    9   1116  39706  42946  2846/2603/364    1588/411    23  119   21.25)
(smt.stats   10   1217  44926  50623  2922/2661/364    1741/467    24  119   21.37)
(smt.stats   11   1328  48836  55175  2934/2673/366    1915/481    25  121   21.47)
(smt.stats   12   1450  52832  62356  2940/2679/368    2056/514    27  125   21.86)
(smt.stats   13   1584  53853  65523  3022/2741/374    2198/514    27  125   21.86)
(smt.stats   14   1731  54510  68824  3022/2742/374    2332/528    28  143   21.86)
(smt.stats   15   1832  60624  74916  3025/2745/375    2458/532    29  144   21.97)
(smt.stats   16   1943  63906  81825  3027/2747/375    2619/532    29  144   21.97)
(smt.stats   17   2065  68566  90818  3034/2754/379    2762/532    30  155   22.09)
(smt.stats   18   2199  73850  95218  3037/2757/380    2882/532    31  172   22.09)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   19   2346  78811 106956  3129/2788/382    3186/550    32  173   22.09)
(smt.stats   20   2507  82696 116162  3149/2869/385    3447/578    33  176   22.21)
ramon: poll                 wall=1.000s usage=0.998s mem=23568KiB load=1.00 rootload=0.98
(smt.stats   21   2608  86678 123109  3200/2908/388    3760/614    34  178   22.42)
(smt.stats   22   2719  92716 136469  3207/2915/393    3896/656    35  239   22.42)
(smt.stats   23   2841  97352 144954  3214/2922/393    4055/656    35  239   22.42)
(smt.stats   24   2975 102166 152859  3217/2925/393    4250/656    35  239   22.52)
(smt.stats   25   3122 108464 163194  3219/2927/393    4416/656    35  239   22.52)
(smt.stats   26   3283 115986 180216  3248/2956/394    4677/700    36  243   22.52)
(smt.stats   27   3460 122981 185690  3248/2956/394    4869/700    36  243   22.52)
(smt.stats   28   3561 125612 190558  3284/2962/394    5052/705    36  243   22.52)
(smt.stats   29   3672 129483 200620  3360/3035/395    5266/764    37  254   22.52)
(smt.stats   30   3794 133107 208803  3441/3145/396    5553/792    38  260   22.74)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1985 := 262143&1985
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 27021597764224961 := 9007199254743286 << 17
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1984 := 262143&1985
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1984 := 262143&1984
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 27021597764224960 := 9007199254743286 << 17
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1984 := 262143&1984
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 27021597764224960 := 9007199254743286 << 17
(smt.stats   31   3928 137080 217805  3501/3177/397    5862/794    38  260   22.89)
(smt.stats   32   4075 142404 226016  3511/3216/408    6104/794    38  260   22.89)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 2186 := 8191&2187
ramon: poll                 wall=2.000s usage=1.996s mem=24520KiB load=1.00 rootload=0.99
(smt.stats   33   4236 148343 237182  3571/3223/409    6401/937    39  280   22.98)
(smt.stats   34   4413 154224 250429  3688/3312/409    6825/943    39  280   23.08)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1200 := 281474976710655&2048
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1160 := 281474976710655&2048
(smt.stats   35   4607 160190 262213  3785/3430/411    7303/989    40  298   23.22)
(smt.stats   36   4708 164535 269383  3878/3554/411    7436/990    40  298   23.32)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 928 := 281474976710655&2048
(smt.stats   37   4819 166105 274735  4054/3624/411    7683/993    40  298   23.32)
(smt.stats   38   4941 168351 281111  4094/3786/411    7843/993    40  298   23.32)
(smt.delete-inactive-clauses  :num-deleted-clauses 751)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   39   5075 172225 288620  4101/3808/411    7367/993    40  298   23.32)
(smt.stats   40   5222 176889 302613  4118/3818/412    7575/1135    41  316   23.41)
(smt.stats   41   5383 183068 319745  4121/3824/412    7756/1135    41  316   23.41)
ramon: poll                 wall=3.001s usage=2.997s mem=25040KiB load=1.00 rootload=1.01
(smt.stats   42   5560 187546 329536  4166/3839/412    8003/1138    41  316   23.41)
(smt.stats   43   5754 191028 339111  4458/3877/412    8312/1141    41  316   23.60)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1 := 3&54790385
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 54790385 := 9288674231451738 << 1
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1 := 3&54790385
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 54790385 := 9288674231451738 << 1
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 1 := 3&54790385
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 54790385 := 9288674231451844 << 1
(smt.stats   44   5967 195941 355358  4700/4405/420    8854/1230    43  327   23.69)
(smt.stats   45   6068 200068 368570  4705/4410/420    9270/1230    43  327   23.79)
(smt.stats   46   6179 203786 380223  4724/4429/422    9563/1364    44  331   23.88)
ramon: poll                 wall=4.000s usage=3.992s mem=25352KiB load=1.00 rootload=0.99
(smt.stats   47   6301 205594 386668  4862/4433/422    9792/1370    44  331   23.98)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   48   6435 207809 395276  5079/4595/422   10220/1372    44  331   24.08)
(smt.stats   49   6582 213265 411401  5098/4803/423   10960/1442    45  332   24.17)
(smt.stats   50   6743 220836 454127  5102/4807/423   11534/1442    45  332   24.17)
(smt.stats   51   6920 231483 480353  5114/4819/423   11847/1442    45  332   24.27)
ramon: poll                 wall=5.000s usage=4.992s mem=26112KiB load=1.00 rootload=1.00
(smt.stats   52   7114 236297 493122  5176/4826/423   12238/1445    45  332   24.46)
(smt.stats   53   7327 239992 508550  5352/4918/423   12786/1446    45  332   24.46)
(smt.stats   54   7561 241096 514551  5921/5123/423   13254/1448    45  332   24.75)
(smt.stats   55   7662 242515 524330  6294/5787/423   13779/1451    45  332   24.75)
(smt.stats   56   7773 244137 532105  6602/6053/423   14245/1452    45  332   24.87)
ramon: poll                 wall=6.000s usage=5.992s mem=26540KiB load=1.00 rootload=1.00
(smt.stats   57   7895 246725 541676  6750/6358/423   14940/1452    45  332   25.19)
(smt.stats   58   8029 249876 560546  6786/6480/423   15974/1452    45  332   25.29)
(smt.stats   59   8176 255566 589211  6854/6501/423   16735/1460    45  332   25.39)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
shl: (shl[53] (bv2int %0) (+ 53 (* 9007199254740991 #115))) 8655355533852672 := 4644337115725827 << 44
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 8 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 16 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 32 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 64 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 128 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 256 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 512 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 1024 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 2048 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 4096 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 8192 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 16384 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 32768 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 65536 := 17592186044415&52776558133248
(smt.stats   60   8337 259830 611123  7041/6570/423   16981/1462    45  332   25.77)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 128 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 32 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 64 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 32 := 17592186044415&52776558133248
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 17592186044415&52776558133248
band: (band[53] (if (= #119 52) 1 (if #566 3 #714)) (shl[53] (bv2int %0) (+ 53 #717))) 40 := 17592186044415&52776558133248
(smt.stats   61   8514 265239 633053  7019/6720/525   17738/2602    46  350   25.86)
(smt.stats   62   8708 271985 647394  7171/6777/525   18577/2605    46  350   26.11)
ramon: poll                 wall=7.000s usage=6.992s mem=27784KiB load=1.00 rootload=1.00
(smt.stats   63   8921 279373 663783  7368/6937/525   19512/2690    47  378   26.21)
(smt.stats   64   9155 286026 696333  7400/7091/528   20382/2878    48  391   26.30)
band: (band[53] (if (or #729 #730 #731 #732 #733 #734 #735 #736 #737 #738 #739) 0 (if #740 1 #844)) (shl[64] (* 2 #113) (mod #890 64))) 0 := 255&10223616
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 52 #887 #889) 64)) 10223616 := 9288674231451726 << 7
(smt.stats   65   9412 296328 732208  7534/7101/528   20974/2884    48  391   26.50)
(smt.stats   66   9513 300391 758732  7572/7257/533   21617/2975    49  392   26.50)
(smt.stats   67   9624 308731 822928  7584/7275/539   21808/3008    50  397   26.50)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   68   9746 314652 851385  7694/7282/539   22628/3011    50  397   26.60)
ramon: poll                 wall=8.000s usage=7.992s mem=28376KiB load=1.00 rootload=1.00
(smt.stats   69   9880 318999 863642  7797/7394/539   22971/3202    51  404   26.70)
(smt.delete-inactive-clauses  :num-deleted-clauses 91)
(smt.stats   70  10027 322999 896990  7990/7679/539   23273/3202    51  404   26.89)
(smt.stats   71  10188 328167 919712  8191/7882/542   23881/3250    52  419   26.89)
ramon: poll                 wall=9.000s usage=8.991s mem=28856KiB load=1.00 rootload=1.00
(smt.stats   72  10365 333135 945526  8370/8004/544   24304/3256    52  419   27.12)
ramon: poll                 wall=10.000s usage=9.991s mem=28952KiB load=1.00 rootload=1.00
(smt.stats   73  10559 338263 987121  8541/8220/545   24981/3260    52  419   27.22)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   74  10772 345932 1051604  8711/8239/545   26212/3511    53  436   27.41)
ramon: poll                 wall=11.000s usage=10.991s mem=29580KiB load=1.00 rootload=0.99
(smt.stats   75  11006 353424 1086864  8889/8489/546   27361/3818    54  438   27.70)
(smt.stats   76  11263 366322 1163669  9043/8646/546   28975/3818    54  438   27.89)
(smt.stats   77  11545 375557 1209907  9120/8779/548   30266/4073    55  440   28.08)
ramon: poll                 wall=12.000s usage=11.990s mem=29904KiB load=1.00 rootload=1.00
(smt.stats   78  11646 379527 1235497  9130/8811/548   30863/4073    55  440   28.17)
(smt.stats   79  11757 385681 1262554  9138/8827/548   31081/4350    56  441   28.17)
(smt.stats   80  11880 391984 1295333  9158/8847/548   31766/4350    56  441   28.27)
(smt.stats   81  12014 397701 1318116  9167/8856/550   32071/4505    57  455   28.27)
(smt.stats   82  12161 408437 1373465  9169/8858/550   32323/4505    57  455   28.36)
ramon: poll                 wall=13.000s usage=12.990s mem=30292KiB load=1.00 rootload=1.00
(smt.stats   83  12322 416106 1395226  9322/8859/550   33073/4507    57  455   28.36)
(smt.stats   84  12499 420983 1414288  9581/9082/551   34284/4627    58  471   28.65)
(smt.stats   85  12693 428229 1429844  9642/9312/551   34951/4629    58  471   28.84)
ramon: poll                 wall=14.000s usage=13.990s mem=30804KiB load=1.00 rootload=1.00
(smt.stats   86  12906 434799 1479344  9685/9344/551   36541/4629    58  471   28.94)
(smt.stats   87  13140 442293 1534902  9771/9435/554   37568/5042    59  496   29.04)
(smt.stats   88  13397 451084 1555926  9896/9449/554   38220/5043    59  496   29.13)
ramon: poll                 wall=15.000s usage=14.990s mem=31108KiB load=1.00 rootload=1.00
(smt.stats   89  13679 455251 1579030 10284/9623/554   39275/5049    59  496   29.37)
ramon: poll                 wall=16.000s usage=15.989s mem=31164KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.989s mem=31376KiB load=1.00 rootload=1.00
(smt.stats   90  13989 458214 1591445 10732/9988/554   39845/5321    60  501   29.75)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   91  14090 461428 1610830 10892/10563/554   40388/5321    60  501   29.75)
(smt.stats   92  14201 466058 1621971 10910/10571/554   41002/5322    60  501   29.97)
ramon: poll                 wall=18.000s usage=17.989s mem=31592KiB load=1.00 rootload=1.00
(smt.stats   93  14323 469493 1638347 11146/10598/554   41603/5327    60  501   30.16)
(smt.stats   94  14457 473913 1659757 11250/10840/554   42215/5329    60  501   30.26)
ramon: poll                 wall=19.000s usage=18.989s mem=31960KiB load=1.00 rootload=1.00
(smt.stats   95  14604 479043 1678504 11432/10954/554   42827/5329    60  501   30.45)
(smt.stats   96  14765 485676 1701809 11533/11107/554   43627/5330    60  501   30.55)
ramon: poll                 wall=20.000s usage=19.989s mem=32616KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 18:20:02 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.020s
ramon: group.total          19.999s
ramon: group.utime          19.975s
ramon: group.stime          0.024s
ramon: group.mempeak        32872KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.008s
ramon: loadavg              1.00
