ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:41:24 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         42458 MiB
ramon: sys.mem.avail        61714 MiB
ramon: sys.nprocs           1251
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/ACrVRWlTOsfb.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2835425
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   3091   1843  1183/1060/100      92/4     5   15   19.04)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 6&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 32&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 32&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 64&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 19&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 18&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 16&68719476735
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 16 := 17 << 36
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 16&68719476735
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 16 := 17 << 36
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 5&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 3 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 4&68719476735
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 4 := 268435456 << 36
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 5&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 6&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 5&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 5 := 7&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 5 := 7&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 5 := 7&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 5 := 7&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 7 := 7&68719476735
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281474976710663 := 68987912192 << 36
(smt.stats    1    202   4723   3288  1718/1544/195     193/23    10   38   19.62)
(smt.stats    2    313   6462   4946  1910/1669/195     307/53    10   38   19.72)
(smt.stats    3    414   8514   6533  2185/1988/199     387/72    12   39   19.72)
(smt.stats    4    525  11324   8577  2203/2004/205     438/71    14   99   19.72)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 16&255
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 18446462598732840976 := 281474976706560 << 8
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 16&255
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281474976710672 := 68987912192 << 8
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 8 := 256&255
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 8 := 256&255
(smt.stats    5    647  12851  10149  2353/2064/219     577/98    15  101   20.01)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    748  15042  14094  2756/2521/221     699/132    17  103   20.11)
(smt.stats    7    859  19408  19041  2771/2534/223     808/143    19  106   20.21)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[48] (bv2int %1) (mod (bv2int %0) 48)) 1 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[48] (bv2int %1) (mod (bv2int %0) 48)) 1 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 32 := 64&2199023255551
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 64 := 64&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281474976710720 := 4097 << 41
(smt.stats    8    981  21589  22220  2830/2588/248     977/194    21  119   20.30)
(smt.stats    9   1115  25031  28639  2878/2634/252    1147/226    23  124   20.41)
(smt.stats   10   1216  27424  32096  2931/2637/253    1309/239    24  134   20.50)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 2 := 8796093022208&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8796093022208&131071
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 8796093022208 := 128 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281543696187392 := 4224 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281543696187392 := 4224 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
shl: (shl[48] (bv2int %1) (mod (bv2int %0) 48)) 524289 := 524288 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131071 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131070 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131070 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
shl: (shl[48] (bv2int %1) (mod (bv2int %0) 48)) 68719476737 := 524288 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131071 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131070 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131068 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1099494850560&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16 := 1099494850560&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 34 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 32 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 64 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 128 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 256 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 512 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 1024 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 2048 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 4096 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8192 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16384 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 32768 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 65536 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 128 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 128 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 64 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 64 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 1024 := 68719476736&131071
(smt.stats   11   1327  29196  35819  3073/2786/341    1464/284    25  145   21.19)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 2048 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 4096 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8192 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16384 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 32768 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16384 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8192 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8192 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 32768 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 2048 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 4096 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 6144 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 512 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 1 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 64 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 128 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 256 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 512 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 512 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 1024 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 2048 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4096 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 8192 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16384 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 32768 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 65536 := 68719476736&131071
(smt.stats   12   1449  31766  44063  3212/2952/477    1674/379    28  189   21.69)
(smt.stats   13   1583  32028  46312  3221/2959/477    1807/379    28  189   21.69)
(smt.stats   14   1730  33266  55253  3227/2963/478    1992/376    29  195   21.88)
ramon: poll                 wall=1.000s usage=0.878s mem=23280KiB load=0.88 rootload=0.87
(smt.stats   15   1831  35456  58435  3368/2976/478    2188/381    29  195   21.97)
(smt.stats   16   1942  37597  64678  3401/3138/481    2383/439    30  199   21.97)
(smt.stats   17   2064  41482  69937  3405/3142/482    2530/439    30  199   21.97)
(smt.stats   18   2198  46584  78942  3468/3146/482    2846/464    31  207   22.30)
ramon: poll                 wall=2.000s usage=1.877s mem=23756KiB load=1.00 rootload=1.00
(smt.stats   19   2345  47640  80555  3774/3328/482    3054/467    31  207   22.59)
ramon: poll                 wall=3.000s usage=2.876s mem=24336KiB load=1.00 rootload=1.00
(smt.stats   20   2506  49848  88302  4190/3895/488    3465/590    32  213   22.69)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   21   2607  54313 106509  4254/3953/489    3747/793    33  235   22.78)
(smt.stats   22   2718  57607 120901  4448/3969/489    3919/796    33  235   22.88)
(smt.stats   23   2840  62929 139772  4499/4165/489    4206/799    33  235   22.97)
(smt.stats   24   2974  67468 151869  4637/4330/492    4801/905    35  245   23.07)
ramon: poll                 wall=4.000s usage=3.876s mem=24484KiB load=1.00 rootload=1.00
(smt.stats   25   3121  72574 167003  4680/4334/492    5018/907    35  245   23.17)
(smt.stats   26   3282  80862 189995  4856/4399/492    5445/911    35  245   23.36)
(smt.stats   27   3459  87502 214061  5025/4567/492    6004/917    35  245   23.45)
(smt.stats   28   3560  91796 224736  5102/4720/492    6474/920    35  245   23.45)
ramon: poll                 wall=5.000s usage=4.876s mem=24940KiB load=1.00 rootload=1.00
(smt.stats   29   3671  96205 238763  5342/5035/494    6989/1420    36  254   23.64)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   30   3793 104111 273093  5349/5042/496    7345/1420    36  254   23.64)
(smt.stats   31   3927 109604 300827  5381/5052/496    7550/1498    37  274   23.64)
(smt.stats   32   4074 114413 324029  5403/5097/499    7893/1641    38  279   23.74)
(smt.stats   33   4235 123405 359518  5448/5142/499    8225/1662    39  286   23.84)
(smt.stats   34   4412 133523 396189  5613/5307/504    8603/1809    41  314   24.08)
(smt.stats   35   4606 141029 427300  5638/5331/506    9313/1965    42  327   24.18)
ramon: poll                 wall=6.000s usage=5.876s mem=25500KiB load=1.00 rootload=1.00
(smt.stats   36   4707 144542 442392  5732/5338/506    9453/1970    42  327   24.18)
(smt.stats   37   4818 150090 462962  5909/5460/506    9712/1970    42  327   24.27)
(smt.stats   38   4940 154159 476948  5959/5653/507    9962/2110    43  342   24.27)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
ramon: poll                 wall=7.000s usage=6.875s mem=26096KiB load=1.00 rootload=1.00
(smt.stats   39   5074 159340 497376  6050/5667/507   10386/2114    43  342   24.37)
(smt.stats   40   5221 164388 512294  6155/5761/507   10618/2118    43  342   24.46)
(smt.stats   41   5382 169238 543442  6383/6076/510   11018/2289    44  343   24.46)
(smt.stats   42   5559 171201 562851  6502/6174/512   11496/2416    45  358   24.56)
ramon: poll                 wall=8.000s usage=7.875s mem=26120KiB load=1.00 rootload=1.00
(smt.stats   43   5753 174697 577562  6553/6176/512   11921/2417    45  358   24.75)
(smt.stats   44   5966 177397 590258  6829/6501/516   12453/2471    46  372   25.03)
(smt.stats   45   6067 178015 595734  6829/6501/519   12656/2471    46  372   25.03)
(smt.stats   46   6178 183186 618890  6876/6507/519   13147/2476    46  372   25.03)
ramon: poll                 wall=9.000s usage=8.873s mem=26552KiB load=1.00 rootload=1.00
(smt.stats   47   6300 186585 635331  6926/6571/519   13408/2657    47  403   25.13)
(smt.stats   48   6434 190447 645662  6967/6607/519   13661/2657    47  403   25.13)
(smt.stats   49   6581 190821 653127  6980/6652/519   13871/2657    47  403   25.13)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   50   6742 191773 663542  6983/6655/519   14132/2657    47  403   25.13)
(smt.stats   51   6919 192190 669888  7011/6679/519   14309/2657    47  403   25.13)
(smt.stats   52   7113 192801 678087  7012/6680/520   14551/2803    48  404   25.13)
(smt.stats   53   7326 196660 701344  7020/6684/520   14845/2803    48  404   25.23)
(smt.stats   54   7560 203950 737561  7060/6714/522   15822/2832    49  415   25.42)
ramon: poll                 wall=10.000s usage=9.873s mem=26824KiB load=1.00 rootload=1.00
(smt.stats   55   7661 209243 759009  7146/6735/522   16210/2994    50  418   25.42)
(smt.stats   56   7772 214025 778458  7196/6850/523   16488/2995    50  418   25.51)
(smt.stats   57   7894 218878 807750  7248/6874/523   16691/3105    51  418   25.51)
(smt.stats   58   8029 220413 824548  7302/6956/523   16997/3105    51  418   25.61)
(smt.stats   59   8177 224476 853037  7316/6973/525   17306/3156    52  421   25.61)
(smt.stats   60   8338 228543 866917  7325/6979/525   17479/3156    52  421   25.61)
ramon: poll                 wall=11.000s usage=10.873s mem=27136KiB load=1.00 rootload=1.00
(smt.stats   61   8515 233839 895550  7437/6991/525   17846/3245    53  441   25.70)
(smt.stats   62   8709 238568 918391  7748/7117/525   18187/3250    53  441   25.80)
ramon: poll                 wall=12.000s usage=11.867s mem=27284KiB load=0.99 rootload=0.99
(smt.stats   63   8922 243852 950189  8062/7452/525   18649/3252    53  441   26.20)
(smt.stats   64   9156 250521 989617  8118/7775/525   19516/3252    53  441   26.30)
ramon: poll                 wall=13.000s usage=12.866s mem=27852KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   65   9413 261492 1060671  8218/7875/526   19978/3563    54  446   26.40)
(smt.stats   66   9514 264374 1073620  8236/7883/528   20644/3564    54  446   26.59)
(smt.stats   67   9625 267126 1096442  8259/7897/528   21006/3564    54  446   26.59)
(smt.stats   68   9747 268098 1110297  8266/7923/528   21190/3564    54  446   26.59)
(smt.stats   69   9881 272119 1136548  8320/7927/528   21562/3799    55  464   26.59)
(smt.delete-inactive-clauses  :num-deleted-clauses 1410)
(smt.stats   70  10028 275973 1159687  8348/7984/528   20526/3800    55  464   26.68)
(smt.stats   71  10189 280307 1189509  8368/8011/528   20860/3800    55  464   26.71)
ramon: poll                 wall=14.000s usage=13.866s mem=28276KiB load=1.00 rootload=1.00
(smt.stats   72  10366 284914 1216627  8526/8029/528   21068/3804    55  464   26.71)
(smt.stats   73  10560 290389 1251971  8696/8353/529   21833/3994    56  465   26.81)
(smt.stats   74  10773 299165 1295980  8898/8356/529   22350/4017    56  465   26.90)
ramon: poll                 wall=15.000s usage=14.866s mem=28368KiB load=1.00 rootload=1.00
(smt.stats   75  11007 305240 1331763  9395/8567/529   22949/4058    56  465   27.00)
(smt.stats   76  11264 317163 1417703  9447/9072/529   23332/4058    56  465   27.00)
ramon: poll                 wall=16.000s usage=15.866s mem=28548KiB load=1.00 rootload=1.00
(smt.stats   77  11546 325307 1469180  9482/9111/532   23904/4262    57  468   27.09)
(smt.stats   78  11647 330860 1494914  9546/9149/532   24088/4288    58  484   27.09)
(smt.stats   79  11758 334478 1516890  9608/9237/532   24333/4288    58  484   27.19)
(smt.stats   80  11880 338266 1525790  9696/9274/532   24542/4292    58  484   27.28)
ramon: poll                 wall=17.000s usage=16.865s mem=28900KiB load=1.00 rootload=1.00
(smt.stats   81  12014 340946 1542188  9789/9444/533   25231/4345    59  495   27.38)
(smt.stats   82  12161 345555 1563458  9863/9445/534   25859/4347    59  495   27.57)
(smt.stats   83  12322 351343 1608521 10138/9577/535   26664/4352    59  495   27.67)
ramon: poll                 wall=18.000s usage=17.865s mem=29304KiB load=1.00 rootload=1.00
(smt.stats   84  12499 356683 1660114 10319/9806/535   27421/4530    60  512   27.87)
(smt.stats :restarts :decisions    :clauses/bin/units            :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   85  12693 360500 1701412 10338/9993/536   27842/4686    61  514   27.96)
(smt.stats   86  12906 367720 1750208 10502/10014/536   28683/4688    61  514   28.33)
ramon: poll                 wall=19.000s usage=18.865s mem=30256KiB load=1.00 rootload=0.99
(smt.stats   87  13140 373705 1804111 10568/10193/536   29287/4689    61  514   28.33)
(smt.stats   88  13397 375659 1830850 10589/10216/536   29568/4690    61  514   28.43)
(smt.stats   89  13679 377169 1854845 10601/10239/537   30066/4902    62  516   28.43)
(smt.stats   90  13989 377862 1871891 10606/10243/537   30415/4902    62  516   28.43)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   91  14090 378098 1875802 10608/10245/537   30520/4902    62  516   28.43)
(smt.stats   92  14201 383823 1927939 10618/10255/537   30866/4902    62  516   28.43)
(smt.stats   93  14323 384017 1938685 10620/10257/537   30988/4902    62  516   28.52)
(smt.stats   94  14457 387535 1970488 10626/10263/538   31496/5111    63  525   28.52)
ramon: poll                 wall=20.000s usage=19.865s mem=30288KiB load=1.00 rootload=1.00
(smt.stats   95  14604 396252 2025950 10633/10270/538   31896/5111    63  525   28.71)
ramon: end                  Tue Dec 24 14:41:44 2024
ramon: root.execname        z3
ramon: root.utime           19.940s
ramon: root.stime           0.000s
ramon: group.total          19.956s
ramon: group.utime          19.948s
ramon: group.stime          0.008s
ramon: group.mempeak        30544KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.091s
ramon: loadavg              0.99
