ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:27:07 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29618 MiB
ramon: sys.mem.avail        62088 MiB
ramon: sys.nprocs           1394
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/0TrEBbqimCV2.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             586280
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(smt.stats    0    101   4234   1557  1214/1095/91      93/4     3   13   51.96)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&2
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 2 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&2
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 2 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 32&1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 2 := 32&2
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 1 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 2 := 32&4
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&2
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 2 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 33 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 32 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 31 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 4 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 8 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 16 := 384&32
(smt.stats    1    202   5324   3117  1892/1657/105     193/11     5   19   52.44)
band: (band[53] (if (or #739 #740 #741 #742 (sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   102.041     10000        49          0            1        2)
         #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 415 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 8 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 16 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 32 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 32 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 32 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 16 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 2 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 8 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 1 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 32 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 16 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 8 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 4 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 4 := 384&32
(smt.stats    2    313   6337   5291  1976/1780/223     309/26     8   46   52.64)
(sat.ddfw       1      1   51.5515     20001        98          1            1        3)
(smt.stats    3    414   7596   7631  2012/1817/232     398/55    11   69   52.88)
(smt.stats    4    525   8321   9150  2597/2328/241     517/105    12   75   52.98)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 288230376151711744 := 4503599627370496 << 1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 288230376151711744 := 4503599627370496 << 1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 288230376151711744 := 4503599627370496 << 1
(smt.stats    5    647  11544  14362  2661/2391/248     651/109    13   80   53.37)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 297237575406452736 := 4503599627370496 << 1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18437736874454810624 := 4503599627370496 << 1
(sat.ddfw       1      1   51.6796     40001       196          2            1        5)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 1 := 4503599627370496 << 1
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  13179  17743  2728/2452/251     761/110    14   81   53.46)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 4503599627370497 := 4503599627370496 << 1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 9007199254740929 := 4503599627370496 << 1
(smt.stats    7    859  15412  23767  2757/2481/261     902/125    16   93   53.55)
(smt.stats    8    981  18864  28508  2780/2503/269    1018/138    19  107   53.67)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&2251799813685248
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&4503599627370496
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18442240474082181120 := 1125899906842636 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&4503599627370496
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18442240474082181120 := 1125899906842636 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&1125899906842688
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18438862774361653312 := 1125899906842636 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&1125899906844608
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18438862774361655232 := 1125899906844544 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&1125899906844608
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18438862774361655232 := 1125899906844544 << 52
(sat.ddfw       1      1   43.9239     70001       343          3            1        8)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&2251799813685248
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&4503599627370496
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18442240474082181120 := 1125899906842689 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&4503599627370496
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 2251799813685185 := 1125899906904063 << 52
ramon: poll                 wall=1.000s usage=0.907s mem=56020KiB load=0.91 rootload=0.89
(sat.ddfw       1      1   37.2439    110001       539          4            1       12)
(sat.ddfw       1      1   32.0506    160000       784          5            1       17)
(smt.stats    9   1115  22555  33191  2929/2543/281    1168/149    20  117   53.95)
ramon: poll                 wall=2.000s usage=1.904s mem=56444KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   27.9855    220001      1078          6            1       23)
(smt.stats   10   1216  24216  35555  3106/2830/287    1273/155    21  131   54.04)
(sat.ddfw       1      1   24.6392    290001      1421          7            1       30)
(smt.stats   11   1327  28104  42222  3199/2882/289    1469/166    22  137   54.23)
ramon: poll                 wall=3.000s usage=2.960s mem=56620KiB load=1.06 rootload=1.06
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  30445  45995  3360/2973/289    1704/169    22  137   54.42)
(sat.ddfw       1      1   22.0386    370001      1813          8            1       38)
(smt.stats   13   1583  35029  52729  3387/3097/289    1904/182    23  138   54.42)
ramon: poll                 wall=4.000s usage=3.957s mem=56724KiB load=1.00 rootload=1.00
(smt.stats   14   1730  38320  57554  3480/3110/289    2123/184    23  138   54.52)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&3713653725008208
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 1 := 3713653725008208&1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&3713653725008208
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 1 := 3713653725008208&1
(smt.stats   15   1831  39785  63433  3700/3318/289    2355/188    23  138   54.61)
(sat.ddfw       1      1   19.8763    460001      2254          9            1       47)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 1&6909756686368704
(smt.stats   16   1942  42414  72375  3818/3456/289    2655/188    23  138   54.71)
ramon: poll                 wall=5.002s usage=4.956s mem=56956KiB load=1.00 rootload=1.00
(smt.stats   17   2064  45832  80614  3898/3545/295    3003/274    24  139   54.83)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 65 := 281474976710656&3288342585064256
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 66 := 281474976710656&3288342585064256
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 66 := 281474976710656&3288342585064256
(smt.stats   18   2198  49934  95853  4090/3632/295    3340/305    25  140   54.93)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273216 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273344 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273600 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325277696 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325294080 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325326848 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325326848 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325392384 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325916672 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756326965248 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325916672 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756326965248 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756343742464 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756343742464 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756477960192 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756746395648 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134758893879296 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134827613356032 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134965052309504 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 135239930216448 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 136339441844224 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 140737488355328 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273472 := 281474976710656&3423098910337152
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273472 := 281474976710656&3423098910337152
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337543
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164167 := 8466948896224028 << 49
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337543
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164167 := 8466948896224028 << 49
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337543
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164167 := 8466948896224028 << 49
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337600
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164224 := 8466948896224028 << 49
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337927
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164551 := 8466948896224028 << 49
(smt.stats   19   2345  53166 108566  4317/4009/393    3675/348    27  168   55.69)
(sat.ddfw       1      1   18.1917    560001      2745         10            1       57)
ramon: poll                 wall=6.000s usage=5.923s mem=57864KiB load=0.97 rootload=0.95
(sat.ddfw       1      1   16.5988    670001      3284         11            1       68)
ramon: poll                 wall=7.002s usage=6.928s mem=57904KiB load=1.00 rootload=1.01
(sat.ddfw       1      1   15.3728    790001      3872         12            1       80)
ramon: poll                 wall=8.000s usage=7.923s mem=57920KiB load=1.00 rootload=0.99
ramon: poll                 wall=9.000s usage=8.922s mem=57996KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   14.3077    920001      4509         13            1       93)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3377699720527872
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 3288342585064753 := 8466948896654070 << 49
(smt.stats   20   2506  57071 117779  4506/4188/404    4208/395    28  174   55.78)
(smt.stats   21   2607  59745 124571  4572/4256/404    4755/395    28  174   55.78)
ramon: poll                 wall=10.000s usage=9.920s mem=58196KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   13.3042   1060001      5196         14            1      108)
(smt.stats   22   2718  63586 130941  4710/4288/404    5090/409    28  174   56.21)
ramon: poll                 wall=11.000s usage=10.791s mem=58716KiB load=0.87 rootload=0.87
(smt.stats   23   2840  67686 142652  4893/4442/404    5586/424    28  174   56.50)
ramon: poll                 wall=12.000s usage=11.747s mem=58984KiB load=0.96 rootload=0.96
(smt.stats   24   2974  70665 155905  5121/4695/404    6268/427    28  174   56.60)
(sat.ddfw       1      1   12.3436   1210001      5931         15            1      123)
(smt.stats   25   3121  74815 164973  5238/4835/404    6710/430    28  174   56.69)
ramon: poll                 wall=13.000s usage=12.683s mem=59016KiB load=0.94 rootload=0.93
(smt.stats   26   3282  78731 178323  5507/4975/404    7771/440    28  174   56.89)
(sat.ddfw       1      1   11.5448   1370001      6715         16            1      139)
ramon: poll                 wall=14.000s usage=13.660s mem=59480KiB load=0.98 rootload=0.98
(smt.stats   27   3459  83335 196629  5672/5236/404    8758/448    28  174   57.08)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   28   3560  86672 209453  5705/5405/406    9221/1071    29  182   57.17)
(smt.stats   29   3671  91464 231634  5721/5423/412    9743/1168    30  214   57.17)
ramon: poll                 wall=15.000s usage=14.626s mem=60016KiB load=0.97 rootload=0.97
(sat.ddfw       1      1    10.924   1540001      7549         17            1      156)
(smt.stats   30   3793  95229 249586  5930/5448/413   10179/1171    30  214   57.50)
ramon: poll                 wall=16.000s usage=15.627s mem=60112KiB load=1.00 rootload=1.00
(smt.stats   31   3927  99122 266104  6242/5671/413   10914/1314    31  214   57.60)
(smt.stats   32   4074 102682 275856  6311/5959/417   11775/1314    31  214   57.79)
ramon: poll                 wall=17.000s usage=16.579s mem=60224KiB load=0.95 rootload=0.95
(smt.stats   33   4235 108133 291618  6476/6066/417   12620/1446    32  224   57.98)
(sat.ddfw       1      1   10.3383   1720001      8431         18            1      174)
ramon: poll                 wall=18.000s usage=17.534s mem=60528KiB load=0.96 rootload=0.96
(smt.stats   34   4412 113756 315918  6593/6202/417   13815/1451    32  224   58.08)
(smt.stats   35   4606 119283 335381  6685/6386/418   15358/1794    33  235   58.17)
(smt.stats   36   4707 121811 348150  6739/6394/418   15749/1796    33  235   58.27)
ramon: poll                 wall=19.002s usage=18.582s mem=60840KiB load=1.05 rootload=1.04
(smt.stats   37   4818 126380 372141  6906/6474/418   16046/1797    33  235   58.37)
(sat.ddfw       1      1   9.81202   1910001      9362         19            1      193)
(smt.stats   38   4940 131489 400129  6933/6634/418   16618/1797    33  235   58.37)
(smt.delete-inactive-clauses  :num-deleted-clauses 1238)
ramon: poll                 wall=20.000s usage=19.545s mem=61040KiB load=0.96 rootload=0.97
(smt.stats   39   5074 136910 429287  6982/6643/418   16052/1798    33  235   58.46)
ramon: end                  Fri Nov  1 21:27:27 2024
ramon: root.execname        z3
ramon: root.utime           19.620s
ramon: root.stime           0.020s
ramon: group.total          19.646s
ramon: group.utime          19.623s
ramon: group.stime          0.024s
ramon: group.mempeak        61300KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.104s
ramon: loadavg              0.98
