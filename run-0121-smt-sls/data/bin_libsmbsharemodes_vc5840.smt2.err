ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Mon Dec 30 12:25:30 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         13228 MiB
ramon: sys.mem.avail        62133 MiB
ramon: sys.nprocs           1174
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/QF_BV_SAT/bin_libsmbsharemodes_vc5840.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify sls-smt)
ramon: argv                 6 = model_validate=true
ramon: childpid             1359121
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
failed to commit (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...))) 1 ev: 0 [1, 0[
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
tabu (if (or (= #7780 bv[4294967295:32]) (and #9653 #10565) (not #9462) (and #9507 #9500 #9503)) v124026020 (if (= #11030 bv[0:32]) bv[0:32] (concat #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 #10841 ...)))
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw      14     30   212.766     10000         0          0           33      320)
(sat.ddfw      14    111   147.809     20051         0          1           49      624)
(sat.ddfw       2     59   125.509     40007         0          2           30      717)
(sat.ddfw       1    516   88.7367     70000         1          3            2     1357)
(sat.ddfw       1   1025   70.2988    110000         1          4           12     1539)
(sat.ddfw       1   1025   64.9558    160016         2          5           30     2072)
ramon: poll                 wall=1.000s usage=0.996s mem=21128KiB load=1.00 rootload=0.98
(sat.ddfw       1   1025   53.4167    220003         2          6           18     2210)
(sat.ddfw       1   1025   44.6448    290006         3          7           15     2225)
(sat.ddfw       1   1025   41.1002    370028         3          8           33     2802)
ramon: poll                 wall=2.000s usage=1.970s mem=20916KiB load=0.97 rootload=0.98
(sat.ddfw       1   1025   36.9192    460000         4          9           22     2920)
ramon: poll                 wall=3.000s usage=2.967s mem=20916KiB load=1.00 rootload=0.99
(sat.ddfw       1   1025   33.4394    560084         5         10          133     3159)
(sat.ddfw       1   1025    32.198    670008         6         11           14     3810)
ramon: poll                 wall=4.005s usage=3.968s mem=20916KiB load=1.00 rootload=1.01
(sat.ddfw       1   1025   29.8043    790000         6         12           11     3974)
(sat.ddfw       1   1025   27.4676    920004         7         13            6     4015)
ramon: poll                 wall=5.000s usage=4.959s mem=20916KiB load=1.00 rootload=0.99
ramon: poll                 wall=6.000s usage=5.958s mem=20916KiB load=1.00 rootload=0.99
(sat.ddfw       1   1025   22.9283   1060004         7         14            9     4025)
ramon: poll                 wall=7.005s usage=6.958s mem=20916KiB load=1.00 rootload=1.00
ramon: poll                 wall=8.000s usage=7.948s mem=20916KiB load=0.99 rootload=0.99
(sat.ddfw       1   1025   18.7315   1210006         7         15            4     4040)
ramon: poll                 wall=9.005s usage=8.955s mem=20916KiB load=1.00 rootload=1.01
ramon: poll                 wall=10.000s usage=9.947s mem=20916KiB load=1.00 rootload=0.99
(sat.ddfw       1   1025   15.6492   1370003         9         16            2     4052)
ramon: poll                 wall=11.000s usage=10.946s mem=20916KiB load=1.00 rootload=1.00
(sat.ddfw       1   1025     14.78   1540017        13         17            8     4257)
ramon: poll                 wall=12.000s usage=11.946s mem=20916KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.946s mem=20916KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.946s mem=20916KiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.946s mem=20916KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.946s mem=20916KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.946s mem=20916KiB load=1.00 rootload=1.00
(sat.ddfw       1   1025   10.2912   1720000        15         18            2     4344)
ramon: poll                 wall=18.000s usage=17.929s mem=20916KiB load=0.98 rootload=0.99
ramon: poll                 wall=19.001s usage=18.933s mem=20916KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.929s mem=20916KiB load=1.00 rootload=1.00
ramon: end                  Mon Dec 30 12:25:50 2024
ramon: root.execname        z3
ramon: root.utime           19.930s
ramon: root.stime           0.000s
ramon: group.total          19.942s
ramon: group.utime          19.934s
ramon: group.stime          0.008s
ramon: group.mempeak        21296KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.010s
ramon: loadavg              1.00
