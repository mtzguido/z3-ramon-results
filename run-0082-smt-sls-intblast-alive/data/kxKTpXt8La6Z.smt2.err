ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 23:01:35 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27417 MiB
ramon: sys.mem.avail        62083 MiB
ramon: sys.nprocs           1386
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/kxKTpXt8La6Z.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             910511
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(smt.stats    0    101   6123    756  1240/1108/89     100/5     2   13   51.89)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 93 := 127&93
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 93 := 94 << 7
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 127&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1 := 94 << 7
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 48 := 127&93
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 127&1
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 127&1
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 127&1
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 127&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1 := 94 << 7
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 127&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1 := 204 << 7
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1    109.89     10000        49          0            1        2)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 127 := 127&313
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 127&1
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 2 := 127&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 2 := 94 << 7
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 2 := 127&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 2 := 94 << 7
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 127&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1 := 204 << 7
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 93 := 127&93
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 93 := 94 << 7
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 93 := 127&93
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 93 := 94 << 7
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 127 := 127&12032
(smt.stats    1    202   8570   1983  1779/1602/105     193/12     5   16   52.18)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 127 := 127&12032
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 126 := 127&12032
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 124 := 127&12032
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 120 := 127&12032
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 112 := 127&12032
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 127&12032
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 46 := 47 << 8
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 127&12032
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 46 := 47 << 8
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 127&256
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 127&7424
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 2 := 127&7424
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 4 := 127&7424
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 8 := 127&7424
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 8 := 127&7424
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 32 := 127&7424
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 64 := 127&7424
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 127&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 3377699720527871 := 3377699720527872 << 8
(smt.stats    2    313  10910   3802  1918/1728/151     300/14     8   31   52.47)
(sat.ddfw       1      1   52.9153     20001        98          1            1        3)
(smt.stats    3    414  13364   6595  2133/1924/156     396/21     9   31   52.58)
(smt.stats    4    525  13865   8408  2233/2016/157     497/21     9   31   52.58)
(smt.stats    5    647  14062  11700  2466/2225/158     599/42    11   48   52.70)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  14607  14405  2529/2285/159     669/42    11   48   52.70)
(smt.stats    7    859  17130  16989  2531/2287/159     782/46    12   51   52.85)
(smt.stats    8    981  19040  20427  2546/2302/160     905/48    13   52   52.85)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 128 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 256 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 512 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1024 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 2048 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 4096 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 8192 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 4096 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 8192 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 16384 := 18014398509481983&18014398509481984
(sat.ddfw       1      1   51.1509     40001       196          2            1        5)
(smt.stats    9   1115  20162  22124  2743/2324/162    1058/58    14   53   53.34)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509482048
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68641 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509481984
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509482016
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509483040
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509484064
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509483008
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509485088
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509485088
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509485088
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509548576
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68640 := 18014398509481983&18014398509550624
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 18014398509550624 := 844424930131860 << 54
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509483008
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509483072
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509485120
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550592
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550656
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 18014398509550656 := 562949953421350 << 54
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550656
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 18014398509550656 := 562949953421350 << 54
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550592
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550656
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 18014398509550656 := 562949953421460 << 54
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550592
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509681728
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509681728
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550592
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550592
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550592
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 68672 := 18014398509481983&18014398509550656
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 18014398509550656 := 844424930131860 << 54
(smt.stats   10   1216  21035  24616  2878/2606/249    1386/70    14   53   53.44)
(smt.stats   11   1327  22894  29416  2979/2733/257    1778/359    16   97   53.57)
(sat.ddfw       1      1   43.1034     70001       343          3            1        8)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 35184372088831&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1044835113549955072 := 1407374883553338 << 45
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 35184372088831&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 3026418949592973312 := 1407374883553448 << 45
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 35184372088831&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1044835113549955072 := 1407374883553338 << 45
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 35184372088831&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 324259173170675712 := 1407374883594258 << 45
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 35184372088831&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 684547143360315392 := 1407374884136998 << 45
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 35184372088831&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 1 := 703687443349504 << 46
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 35184372088831&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 1 := 703687443349504 << 46
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 35184372088831&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 3422682781 := 18436610987917824 << 46
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  24520  32519  3068/2820/276    1877/411    17  146   53.76)
(smt.stats   13   1583  27631  41303  3140/2879/279    2119/471    18  157   53.86)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 9007199254740991&1
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 9007199254740991&1
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 9007199254740991&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1 := 2097152 << 53
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 9007199254740991&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1 := 2097152 << 53
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 9007199254740991&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1 := 2097152 << 53
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 9007199254740991&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 0 := 13312 << 53
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 9007199254740991&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 8912895 := 34816 << 54
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 9007199254740991&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 0 := 69632 << 53
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 9007199254740991&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 8912895 := 34816 << 54
ramon: poll                 wall=1.004s usage=1.003s mem=56152KiB load=1.00 rootload=0.98
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 9007199254740991&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 0 := 1139712 << 53
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 9007199254740991&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 35184373149697 := 35184373149696 << 54
(sat.ddfw       1      1   34.6921    110001       539          4            1       12)
(smt.stats   14   1730  29479  45932  3329/3022/292    2276/484    19  157   54.09)
(smt.stats   15   1831  30923  49121  3498/3177/292    2392/485    19  157   54.19)
(smt.stats   16   1942  32401  54321  3586/3320/293    2498/499    20  161   54.19)
(sat.ddfw       1      1     29.12    160000       784          5            1       17)
(smt.stats   17   2064  35691  59832  3599/3333/295    2613/503    21  165   54.19)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 68719476735&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 216172782113783808 := 2329895322523706 << 36
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 68719476735&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 216172782113783808 := 2329895322523706 << 36
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 68719476735&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 216172782113783808 := 2329895321999446 << 36
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 68719476735&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 216172782113783808 := 2330689773510706 << 36
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 68719476735&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 216172782113783808 := 2330689773511806 << 36
ramon: poll                 wall=2.000s usage=1.891s mem=56444KiB load=0.89 rootload=0.89
(smt.stats   18   2198  37066  63727  3808/3337/295    2752/512    22  173   54.28)
(sat.ddfw       1      1   25.8737    220001      1078          6            1       23)
ramon: poll                 wall=3.000s usage=2.888s mem=57212KiB load=1.00 rootload=1.00
(smt.stats   19   2345  38165  66799  4034/3566/300    2906/512    22  173   54.78)
(sat.ddfw       1      1   23.0415    290001      1421          7            1       30)
(smt.stats   20   2506  39595  69674  4581/4057/300    3071/526    23  174   54.78)
(sat.ddfw       1      1   20.7039    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=3.887s mem=57212KiB load=1.00 rootload=0.99
(smt.stats   21   2607  40012  70578  4804/4401/300    3173/527    23  174   54.88)
(smt.stats   22   2718  40956  72124  5134/4725/300    3289/532    23  174   54.97)
(smt.stats   23   2840  42832  78308  5297/4965/300    3411/532    23  174   55.26)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 68719476735&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 68719476735 := 18053465936232448 << 37
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 68719476735&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 68719476735 := 18053465936232448 << 37
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 68719476735&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 68719476735 := 18053465936232448 << 37
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 68719476735&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 4430757888 := 4430757888 << 37
(smt.stats   24   2974  44103  80861  5454/5043/301    3539/546    24  179   55.36)
(sat.ddfw       1      1   18.3113    460001      2254          9            1       47)
ramon: poll                 wall=5.004s usage=4.741s mem=57924KiB load=0.85 rootload=0.86
(smt.stats   25   3121  48237  90392  5463/5194/309    3682/543    25  189   55.36)
(smt.stats   26   3282  50077  93786  5694/5317/310    3897/561    26  189   55.55)
ramon: poll                 wall=6.000s usage=5.701s mem=57872KiB load=0.96 rootload=0.96
(sat.ddfw       1      1   16.7983    560001      2745         10            1       57)
(smt.stats   27   3459  51475  97228  6037/5478/310    4090/562    26  189   55.64)
(smt.stats   28   3560  54809 102357  6044/5775/310    4205/562    26  189   55.64)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 3&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 2017612633061982208 := 48976645947654254 << 2
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 3&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 2017612633061982208 := 48976645947654254 << 2
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 3&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 2017612633061982208 := 48976645947654254 << 2
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 0 := 3&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 2017612633061982208 := 48976645947654254 << 2
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 1 := 3&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #895 #897) 64)) 1981583836043018241 := 48976645947654254 << 2
(smt.stats   29   3671  57558 110919  6087/5780/310    4432/564    26  189   55.64)
band: (band[55] (if (or #740 #741 #742 #743 #744 #745 #746 #747 #748 #749) 0 (if #750 1 #856)) (shl[64] (* 2 #114) (mod #898 64))) 2 := 3&15762598695797176
(smt.stats   30   3793  60740 116818  6112/5834/316    4587/693    27  190   55.76)
ramon: poll                 wall=7.000s usage=6.674s mem=58224KiB load=0.97 rootload=0.97
(sat.ddfw       1      1   15.6006    670001      3284         11            1       68)
(smt.stats   31   3927  62761 118808  6252/5842/321    4766/707    28  192   56.14)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074  67158 129739  6395/6112/322    5115/707    28  192   56.14)
ramon: poll                 wall=8.000s usage=7.615s mem=58652KiB load=0.94 rootload=0.94
(smt.stats   33   4235  73465 151131  6434/6158/325    5332/811    30  202   56.23)
(sat.ddfw       1      1   14.3661    790001      3872         12            1       80)
(smt.stats   34   4412  77824 160282  6842/6201/326    5690/812    30  202   56.42)
ramon: poll                 wall=9.000s usage=8.610s mem=58788KiB load=0.99 rootload=1.00
(smt.stats   35   4606  86165 180373  6895/6623/328    6641/1234    31  207   56.42)
(smt.stats   36   4707  87337 190697  7013/6632/329    6776/1239    31  207   56.52)
(sat.ddfw       1      1   13.4367    920001      4509         13            1       93)
ramon: poll                 wall=10.000s usage=9.614s mem=59224KiB load=1.00 rootload=1.00
(smt.stats   37   4818  87629 191504  7096/6798/329    6884/1253    32  210   56.71)
(smt.stats   38   4940  88293 196380  8012/7294/329    7098/1259    32  210   56.81)
(smt.delete-inactive-clauses  :num-deleted-clauses 6)
ramon: poll                 wall=11.000s usage=10.613s mem=59524KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   12.6274   1060001      5196         14            1      108)
(smt.stats   39   5074  92203 206723  8086/7779/329    7433/1260    32  210   57.06)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   40   5221 102090 217390  8091/7817/329    7638/1260    32  210   57.06)
(smt.stats   41   5382 110341 234307  8120/7846/330    7833/1355    33  211   57.15)
(smt.stats   42   5559 115513 248569  8156/7882/331    8277/1355    33  211   57.15)
ramon: poll                 wall=12.000s usage=11.613s mem=59796KiB load=1.00 rootload=1.00
(smt.stats   43   5753 122714 267625  8232/7904/332    8577/1479    34  213   57.25)
(sat.ddfw       1      1   11.8831   1210001      5931         15            1      123)
(smt.stats   44   5966 126132 274744  8478/8066/332    8917/1556    35  219   57.34)
ramon: poll                 wall=13.000s usage=12.613s mem=60048KiB load=1.00 rootload=1.00
(smt.stats   45   6067 127930 278940  8546/8209/332    9120/1557    35  219   57.34)
(smt.stats   46   6178 131137 291828  8648/8292/332    9298/1560    35  219   57.34)
(smt.stats   47   6300 133323 295995  8819/8386/332    9455/1567    35  219   57.46)
ramon: poll                 wall=14.000s usage=13.612s mem=60248KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   11.2226   1370001      6715         16            1      139)
(smt.stats   48   6434 135320 303665  9110/8642/332    9610/1576    35  219   57.46)
(smt.stats   49   6581 139278 318394  9177/8891/332   10006/1577    35  219   57.76)
ramon: poll                 wall=15.004s usage=14.612s mem=60388KiB load=1.00 rootload=1.00
(smt.stats   50   6742 142023 336293  9276/8960/334   10189/1853    36  224   57.76)
ramon: poll                 wall=16.000s usage=15.613s mem=60760KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   10.6456   1540001      7549         17            1      156)
ramon: poll                 wall=17.000s usage=16.689s mem=60808KiB load=1.08 rootload=1.07
(smt.stats   51   6919 143382 337985  9584/9004/334   10391/1857    36  224   58.16)
(smt.stats   52   7113 149264 352413 10032/9754/335   10767/1879    37  225   58.37)
(sat.ddfw       1      1   10.2372   1720001      8431         18            1      174)
ramon: poll                 wall=18.000s usage=17.750s mem=60848KiB load=1.06 rootload=1.07
(smt.stats   53   7326 154417 366012 10256/9769/335   11303/1881    37  225   58.37)
(smt.stats :restarts :decisions   :clauses/bin/units             :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   54   7560 159039 380624 10345/10026/335   11805/1881    37  225   58.46)
ramon: poll                 wall=19.004s usage=18.751s mem=60884KiB load=1.00 rootload=1.00
(smt.stats   55   7661 161293 392643 10394/10068/335   12056/1881    37  225   58.55)
(sat.ddfw       1      1   9.85273   1910001      9362         19            1      193)
(smt.stats   56   7772 163438 407162 10644/10168/335   12278/1882    37  225   58.65)
(smt.stats   57   7894 165965 422773 10674/10377/335   12445/1883    37  225   58.65)
(smt.stats   58   8028 169287 436986 10721/10412/335   13104/1883    37  225   58.74)
ramon: poll                 wall=20.004s usage=20.006s mem=61120KiB load=1.26 rootload=1.25
ramon: end                  Fri Nov  1 23:01:55 2024
ramon: root.execname        z3
ramon: root.utime           20.040s
ramon: root.stime           0.010s
ramon: group.total          20.064s
ramon: group.utime          20.044s
ramon: group.stime          0.020s
ramon: group.mempeak        61632KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.062s
ramon: loadavg              1.00
