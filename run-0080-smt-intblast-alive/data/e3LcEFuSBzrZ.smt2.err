ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:44:29 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         25123 MiB
ramon: sys.mem.avail        61751 MiB
ramon: sys.nprocs           1401
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/e3LcEFuSBzrZ.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             103777
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 2 << 2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 53 << 1
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 1&0
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 53 << 1
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 63 << 11
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 53 << 1
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 53 << 1
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 53 << 1
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 54 << 2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 55 << 3
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 56 << 4
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 57 << 5
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 58 << 6
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 103 << 51
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 103 << 51
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 102 << 50
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 59 << 7
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 60 << 8
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 1&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 1 := 61 << 9
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 1&1
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2&0
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 2 := 60 << 8
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 3&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 5&4
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 9&8
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 17&16
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 17&16
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 17&32
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 17 := 60 << 8
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 33&16
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 33 := 60 << 8
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 35&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 35&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 35 := 60 << 8
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 35&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 35&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 35 := 60 << 8
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 103 << 51
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 103 << 51
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 102 << 50
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 101 << 49
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 100 << 48
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 61 << 9
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 62 << 10
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 63 << 11
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 64 << 12
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 65 << 13
(smt.stats    0    101   1090    951   223/217/222     102/30    12   44   18.87)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 100 << 48
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 66 << 14
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 10&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 99 << 47
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 10&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 10&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 100 << 48
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 100 << 48
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 101 << 49
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 102 << 50
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 103 << 51
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 102 << 50
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 101 << 49
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 102 << 50
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 102 << 50
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 99 << 47
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 99 << 47
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 66 << 14
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 67 << 15
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 68 << 16
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 69 << 17
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 98 << 46
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 70 << 18
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 97 << 45
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 71 << 19
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 96 << 44
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 72 << 20
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 73 << 21
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 74 << 22
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 75 << 23
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 96 << 44
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 76 << 24
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 96 << 44
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 95 << 43
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 77 << 25
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 94 << 42
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 93 << 41
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 92 << 40
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 78 << 26
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 79 << 27
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 80 << 28
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 81 << 29
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 82 << 30
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 91 << 39
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 90 << 38
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 83 << 31
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 84 << 32
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 85 << 33
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 92 << 40
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 92 << 40
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 91 << 39
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 89 << 37
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 88 << 36
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 87 << 35
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 87 << 35
(smt.stats    1    202   2620   2760   500/478/348     199/41    16   70   19.84)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 94 << 42
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 93 << 41
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 94 << 42
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 94 << 42
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 82 << 30
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 81 << 29
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 80 << 28
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 81 << 29
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 82 << 30
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 81 << 29
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 81 << 29
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 83 << 31
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 85 << 33
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 86 << 34
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 85 << 33
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 88 << 36
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 89 << 37
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 88 << 36
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 88 << 36
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 90 << 38
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 90 << 38
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 10&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 10 := 84 << 32
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 8&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 8&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 8&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 79 << 27
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 78 << 26
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 77 << 25
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 8&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 8&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 8&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 8&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 75 << 23
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 74 << 22
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 73 << 21
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 72 << 20
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 73 << 21
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 74 << 22
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 75 << 23
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 73 << 21
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 74 << 22
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 74 << 22
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 66 << 14
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 67 << 15
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 66 << 14
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 68 << 16
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 69 << 17
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 70 << 18
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 8&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 8 := 71 << 19
(smt.stats    2    313   5499   6207   672/613/388     291/47    20   91   20.14)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 595591138&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 595591138&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 595591138 := 71 << 19
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
lshr: (lshr[64] (* 2048 (bv2int %0)) (mod (+ 63 #157 #161) 64)) 2 := 9223372036854773760 >>l 44
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
lshr: (lshr[64] (* 2048 (bv2int %0)) (mod (+ 63 #157 #161) 64)) 2 := 9223372036854773760 >>l 44
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
lshr: (lshr[64] (* 2048 (bv2int %0)) (mod (+ 63 #157 #161) 64)) 2 := 9223372036854773760 >>l 44
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&0
lshr: (lshr[64] (* 2048 (bv2int %0)) (mod (+ 63 #157 #161) 64)) 9223372036854775808 := 9223372036854753280 >>l 44
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&0
lshr: (lshr[64] (* 2048 (bv2int %0)) (mod (+ 63 #157 #161) 64)) 9223372036854775808 := 9223372036854753280 >>l 44
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
shl: (shl[52] (bv2int %1) (mod (bv2int %1) 52)) 70 := 71 << 19
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
shl: (shl[52] (bv2int %1) (mod (bv2int %1) 52)) 70 := 71 << 19
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
lshr: (lshr[52] (bv2int %0) (+ 52 (* 4503599627370495 #106))) 1 := 17179869184 >>l 33
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
lshr: (lshr[52] (bv2int %0) (+ 52 (* 4503599627370495 #106))) 1 := 17179869184 >>l 33
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
lshr: (lshr[52] (bv2int %0) (+ 52 (* 4503599627370495 #106))) 1 := 17179869184 >>l 33
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 1 := 37224448&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 37224448&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 37224448&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 2 := 37224448&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 2 := 37224448&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
lshr: (lshr[52] (bv2int %0) (+ 52 (* 4503599627370495 #106))) 1 := 17179869184 >>l 33
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 1 := 37224448&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 37224448&2
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 2 := 37224448&2
(smt.stats    3    414   8394   8692   772/727/437     399/74    23  104   20.70)
(smt.stats    4    525  12737  10703   847/786/452     450/93    26  134   21.08)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 64&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 64&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 64&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 36028797018964032 := 16917 << 17
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&2
lshr: (lshr[64] (* 2048 (bv2int %0)) (mod (+ 63 #157 #161) 64)) 4503599627370498 := 2048 >>l 46
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 2217345024&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1 := 2217345024&2
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&2
lshr: (lshr[64] (* 2048 (bv2int %0)) (mod (+ 63 #157 #161) 64)) 2 := 34643968 >>l 46
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&2
lshr: (lshr[64] (* 2048 (bv2int %0)) (mod (+ 63 #157 #161) 64)) 2 := 34643968 >>l 46
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&2
lshr: (lshr[64] (* 2048 (bv2int %0)) (mod (+ 63 #157 #161) 64)) 2 := 34643968 >>l 46
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217213952&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 2217213952 := 16916 << 16
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217213952&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 2217213952 := 16916 << 16
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217082880&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 2217082880 := 16915 << 15
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2216820736&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 2216820736 := 16913 << 13
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2216820736&2
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 2216820736 := 16913 << 13
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 4 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 8 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 16 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 32 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 64 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 128 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 256 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 512 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1024 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 512 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 1024 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2048 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2048 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 4096 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 8192 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 16384 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 32768 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 16384 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 32768 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 65536 := 2217345024&131071
(smt.stats    5    647  17033  14274  1001/937/532     579/110    29  138   21.56)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 9232 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 9280 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 9344 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 9344 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 9344 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 9280 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 9216 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 8192 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 512 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 4096 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 16384 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2048 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2048 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2048 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 4 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 16 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 8 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 259 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 258 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 256 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 32 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 3 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
shl: (shl[52] (bv2int %1) (mod (bv2int %1) 52)) 4 := 16917 << 17
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
shl: (shl[52] (bv2int %1) (mod (bv2int %1) 52)) 4 := 16917 << 17
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
lshr: (lshr[52] (bv2int %0) (+ 52 (* 4503599627370495 #106))) 0 := 4503599627370495 >>l 35
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
lshr: (lshr[52] (bv2int %0) (+ 52 (* 4503599627370495 #106))) 0 := 4503599627370495 >>l 35
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
lshr: (lshr[52] (bv2int %0) (+ 52 (* 4503599627370495 #106))) 0 := 4503599627370495 >>l 35
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    748  20303  17439  1123/1034/585     736/142    31  166   21.75)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&31
lshr: (lshr[52] (bv2int %0) (+ 52 (* 4503599627370495 #106))) 0 := 1065151889408 >>l 35
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&31
lshr: (lshr[52] (bv2int %0) (+ 52 (* 4503599627370495 #106))) 0 := 1065151889408 >>l 35
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 3 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 2 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 4 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 8 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 16 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 32 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 64 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 128 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 256 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 512 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 1024 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 1024 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 2048 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 4096 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 8192 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 16384 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 32768 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 65536 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 4096 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 4096 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 900 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 896 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 512 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 2048 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 128 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 128 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 256 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 384 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 32 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 32 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 32 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 4 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 32768 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 32768 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 32768 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 16384 := 2217345024&131071
ramon: poll                 wall=1.000s usage=0.997s mem=23684KiB load=1.00 rootload=0.96
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 16384 := 2217345024&131071
(smt.stats    7    859  23645  23139  1290/1189/712     957/234    33  199   22.44)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 8192 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 8192 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 65792 := 2217345024&131071
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 2217345024&131071
band: (band[52] (shl[52] (bv2int %1) (mod #104 52)) (lshr[52] (bv2int %0) (+ 52 #146))) 66560 := 2217345024&131071
(smt.stats    8    981  27624  29498  1432/1342/755    1303/345    36  232   22.92)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 131063&10
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 0 := 131063&10
(smt.stats    9   1115  39984  43071  1540/1446/772    1505/419    41  239   23.21)
(smt.stats   10   1216  46166  50902  1779/1676/776    1789/455    43  241   23.30)
ramon: poll                 wall=2.000s usage=1.996s mem=25100KiB load=1.00 rootload=1.00
(smt.stats   11   1327  52312  58194  1981/1768/777    2110/479    44  242   23.30)
(smt.stats   12   1449  59461  70302  2144/2050/784    2727/514    46  246   23.58)
(smt.stats   13   1583  66550  81410  2215/2114/790    2998/740    48  252   23.85)
ramon: poll                 wall=3.000s usage=2.996s mem=25824KiB load=1.00 rootload=1.00
(smt.stats   14   1730  72823  92161  2488/2200/790    3451/750    48  252   23.96)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 32768 := 128074&130928
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 32768 := 128074&130928
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 32768 := 128074&130928
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 32768 := 128074&130928
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   15   1831  78077 102141  2687/2582/801    3892/849    50  266   24.15)
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 120512 := 128074&130928
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 120512 := 128074&130928
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 120512 := 128074&130928
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 120512 := 128074&130928
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 120384 := 128074&130928
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 120384 := 128074&130928
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 128064 := 128074&130928
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 9007199254869066 := 1 << 1
band: (band[52] (shl[64] (bv2int %1) (mod #124 64)) (lshr[64] (* 2048 #110) (mod #165 64))) 128064 := 128074&130928
shl: (shl[64] (bv2int %1) (mod (+ #104 #123) 64)) 9007199254869066 := 2 << 2
(smt.stats   16   1942  84426 118676  2811/2701/813    4631/912    51  267   24.46)
(smt.stats   17   2064  90907 132904  2888/2746/818    5278/997    52  276   24.84)
ramon: poll                 wall=4.000s usage=3.995s mem=26644KiB load=1.00 rootload=0.99
(smt.stats   18   2198  97568 146863  3133/3038/819    5730/1234    53  293   25.13)
ramon: poll                 wall=5.000s usage=4.995s mem=26920KiB load=1.00 rootload=1.00
ramon: poll                 wall=6.000s usage=5.995s mem=26996KiB load=1.00 rootload=1.00
ramon: poll                 wall=7.000s usage=6.994s mem=27100KiB load=1.00 rootload=1.00
(smt.stats   19   2345 107286 160892  3386/3068/819    6048/1318    54  295   25.42)
ramon: poll                 wall=8.000s usage=7.994s mem=27120KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.993s mem=27668KiB load=1.00 rootload=1.00
(smt.stats   20   2506 117621 180910  3709/3580/824    7272/1443    55  300   25.70)
ramon: poll                 wall=10.000s usage=9.993s mem=27676KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   21   2607 124151 189941  3839/3621/824    7621/1451    55  300   25.80)
ramon: poll                 wall=11.000s usage=10.993s mem=27920KiB load=1.00 rootload=1.00
(smt.stats   22   2718 130194 198047  4029/3796/824    8046/1628    56  304   25.99)
ramon: poll                 wall=12.000s usage=11.992s mem=28084KiB load=1.00 rootload=1.00
(smt.stats   23   2840 136306 205057  4269/3957/825    8264/1634    56  304   26.08)
ramon: poll                 wall=13.000s usage=12.992s mem=28092KiB load=1.00 rootload=1.00
(smt.stats   24   2974 143720 215466  4532/4300/825    8851/1744    57  308   26.18)
ramon: poll                 wall=14.000s usage=13.992s mem=28100KiB load=1.00 rootload=1.00
(smt.stats   25   3121 152321 233972  4734/4638/826   10142/2001    58  309   26.37)
ramon: poll                 wall=15.000s usage=14.991s mem=28148KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.004s usage=15.995s mem=28608KiB load=1.00 rootload=1.00
(smt.stats   26   3282 163834 249329  5004/4642/826   10728/2011    58  309   26.56)
(smt.stats   27   3459 175617 271994  5219/5002/826   11483/2023    58  309   26.75)
ramon: poll                 wall=17.000s usage=16.991s mem=28788KiB load=1.00 rootload=1.00
(smt.stats   28   3560 182049 290857  5309/5202/829   12365/2440    59  317   26.95)
(smt.stats   29   3671 190929 310321  5458/5242/829   12923/2452    59  317   26.95)
(smt.stats   30   3793 198510 333190  5782/5405/829   13580/2816    60  318   27.14)
(smt.stats   31   3927 204951 353888  5976/5882/830   14396/2940    61  319   27.23)
ramon: poll                 wall=18.000s usage=17.990s mem=28944KiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.990s mem=28984KiB load=1.00 rootload=1.00
(smt.stats   32   4074 215172 383417  6145/6024/833   14977/3190    62  324   27.33)
ramon: poll                 wall=20.000s usage=19.990s mem=29120KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 18:44:49 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.030s
ramon: group.total          19.996s
ramon: group.utime          19.964s
ramon: group.stime          0.032s
ramon: group.mempeak        29376KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.006s
ramon: loadavg              1.00
