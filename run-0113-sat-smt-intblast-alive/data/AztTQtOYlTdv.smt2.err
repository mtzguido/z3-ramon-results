ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Wed Dec 25 15:15:37 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         41298 MiB
ramon: sys.mem.avail        61384 MiB
ramon: sys.nprocs           1325
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/AztTQtOYlTdv.smt2
ramon: argv                 2 = sat.smt=true
ramon: argv                 3 = smt.bv.solver=2
ramon: argv                 4 = -T:20
ramon: argv                 5 = -v:2
ramon: argv                 6 = -st
ramon: argv                 7 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 8 = model_validate=true
ramon: childpid             3726898
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   214/214     0/0  63       0    18.54   0.00)
(sat.stats    102    524    0   214/214   102/27  63       0    18.73   0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 385 :time 0.00)
(sat.stats    102    524    0   214/214   102/27  63       0    18.73   0.00)
(sat.stats    102    524    0   214/214   102/27  63       0    18.73   0.00)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 0 :time 0.00)
 (sat-probing :cost 340018.83 :time 0.00)
(sat.stats    102    524    0   214/214    42/27  63       0    18.83   0.00)
(sat.stats    105    544    1   214/214    45/30  63       0    18.83   0.00)
(sat.stats :conflicts    :restarts     :learned/bin       :gc          :time)
(sat.stats       :decisions    :clauses/bin     :units        :memory       )
(sat.stats    179   1622    2   214/214   119/82  63       0    18.92   0.01)
(sat.stats    182   1652    3   214/214   122/82  63       0    18.92   0.01)
(sat.stats    185   1720    4   214/214   125/82  63       0    18.92   0.01)
(sat.stats    188   1783    5   214/214   128/82  63       0    18.92   0.01)
(sat.stats    191   1843    6   214/214   131/82  63       0    18.92   0.01)
(sat.stats    194   1886    7   214/214   134/85  63       0    18.92   0.01)
(sat.stats    197   1925    8   214/214   137/88  63       0    18.92   0.01)
(sat.stats    200   1997    9   214/214   140/91  63       0    18.92   0.01)
(sat.stats    203   2079   10   214/214   143/94  63       0    18.92   0.01)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 1482 :time 0.00)
(sat.stats :conflicts   :restarts      :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    304   4473   11   235/235   243/127  73       0    19.50   0.06)
(sat.stats    307   4551   12   239/239   246/127  73       0    19.50   0.06)
(sat.stats    313   4682   13   241/241   252/128  73       0    19.60   0.07)
(sat.stats    316   4748   14   249/249   255/128  73       0    19.60   0.07)
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 4907 :time 0.00)
(sat.stats    756   8082   41  3719/3719   730/146  75       0    20.31   0.56)
(sat.stats    759   8216   42  3768/3768   733/146  75       0    20.31   0.56)
 (sat-cleaner :elim-literals 311 :elim-clauses 0 :cost 6347 :time 0.00)
lshr: (lshr[41] (bv2int %0) (mod (bv2int %1) 41)) 1 := 1 >>l 30
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 1&172065021952
lshr: (lshr[64] (* 8388608 (bv2int %0)) (mod (+ 23 #63 #252) 64)) 0 := 9007199254740992 >>l 53
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 8573 :time 0.00)
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 947&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 1 := 947&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 670 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 749 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 304 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 128 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 40 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 348 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 338 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 8 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 256 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 160 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 16 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 64 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 128 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 1024 := 2047&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 0 := 2047&172065021952
band: (band[41] (lshr[64] (* 8388608 #69) (mod #253 64)) (if (= #556 63) 20085889021303502626791945666560 (if #558 10042944510651751313395972833280 #682))) 512 := 2047&172065021952
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 9837 :time 0.00)
(sat.stats :conflicts   :restarts      :learned/bin         :gc          :time)
(sat.stats      :decisions    :clauses/bin       :units         :memory       )
(sat.stats   1200  18745   70  4640/4639  1213/228 184       0    21.23   0.79)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 10651 :time 0.00)
 (sat-cleaner :elim-literals 3 :elim-clauses 0 :cost 12947 :time 0.00)
ramon: poll                 wall=1.000s usage=0.920s mem=22540KiB load=0.92 rootload=0.90
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 4 := 2044&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 96 := 2041&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 64 := 2041&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 512 := 2041&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 256 := 2041&172065021952
band: (band[41] (lshr[41] (bv2int %0) (mod #63 41)) (if (= #453 40) 1197212280112713731932160 (if #455 598606140056356865966080 #533))) 1024 := 2041&172065021952
(sat.stats   1692  23831   85  5816/5815  1754/294 224       0    21.85   1.06)
 (sat-cleaner :elim-literals 4 :elim-clauses 5 :cost 17804 :time 0.00)
(sat.stats   2397  33458  173 59789/59788  2478/394 229       0    32.64   1.71)
ramon: poll                 wall=2.000s usage=1.917s mem=35700KiB load=1.00 rootload=0.98
ramon: poll                 wall=3.000s usage=2.915s mem=40480KiB load=1.00 rootload=1.00
ramon: poll                 wall=4.000s usage=3.912s mem=42168KiB load=1.00 rootload=1.00
ramon: poll                 wall=5.000s usage=4.912s mem=51800KiB load=1.00 rootload=0.99
ramon: poll                 wall=6.000s usage=5.912s mem=52912KiB load=1.00 rootload=0.99
ramon: poll                 wall=7.000s usage=6.912s mem=54192KiB load=1.00 rootload=1.00
ramon: poll                 wall=8.000s usage=7.911s mem=55436KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.911s mem=56156KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.911s mem=56960KiB load=1.00 rootload=0.99
ramon: poll                 wall=11.000s usage=10.911s mem=57544KiB load=1.00 rootload=1.00
ramon: poll                 wall=12.000s usage=11.910s mem=58312KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.910s mem=58964KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.910s mem=59444KiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.910s mem=60076KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.901s mem=60636KiB load=0.99 rootload=0.99
ramon: poll                 wall=17.000s usage=16.901s mem=61116KiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.900s mem=61604KiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.900s mem=62088KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.899s mem=62544KiB load=1.00 rootload=1.00
ramon: end                  Wed Dec 25 15:15:57 2024
ramon: root.execname        z3
ramon: root.utime           19.920s
ramon: root.stime           0.050s
ramon: group.total          19.986s
ramon: group.utime          19.926s
ramon: group.stime          0.060s
ramon: group.mempeak        63060KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.087s
ramon: loadavg              0.99
