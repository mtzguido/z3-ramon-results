ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 19:02:45 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         24672 MiB
ramon: sys.mem.avail        61750 MiB
ramon: sys.nprocs           1391
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/qfLID25v5s1D.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             162008
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   2604   1282   677/603/107      97/19     3   16   18.78)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&1
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 1 := 0 << 27
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&1
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 1 := 0 << 27
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&1
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 1 := 0 << 27
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&268435455
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 134217726 := 134217728&134217727
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 134217728&134217727
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 134217727 := 2 << 27
(smt.stats    1    202   3512   2733  1156/1041/135     249/38     7   38   18.97)
(smt.stats    2    313   4318   5150  1399/1266/140     418/40     8   44   19.07)
(smt.stats    3    414   5805   7408  1435/1300/148     749/124    11   59   19.16)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 3 := 67108864&3
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4 := 67108864&4
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8 := 67108864&8
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 67108864&16
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32 := 67108864&32
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 64 := 67108864&64
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 128 := 67108864&128
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 256 := 67108864&256
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 512 := 67108864&512
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 67108864&1024
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2048 := 67108864&2048
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4096 := 67108864&4096
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8192 := 67108864&8192
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16384 := 67108864&16384
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 67108864&32768
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 65536 := 67108864&65536
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 131072 := 67108864&131072
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 67108864&262144
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 524288 := 67108864&524288
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 67108864&1048576
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 64 := 67108864&64
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16384 := 67108864&16384
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 67108864&32768
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 67108864&32768
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 67108864&262144
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 67108864&1048576
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2097152 := 67108864&2097152
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4194304 := 67108864&4194304
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8388608 := 67108864&8388608
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16777216 := 67108864&16777216
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&33554432
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&33554432
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&33554432
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 50462720 := 67108864&50462720
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 50610176 := 67108864&50610176
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 50610176 := 67108864&50610176
(smt.stats    4    525   6477   8704  1616/1356/217     978/134    12   79   19.77)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 52428800 := 67108864&52428800
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 51380224 := 67108864&51380224
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 58720256 := 67108864&58720256
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 54525952 := 67108864&54525952
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 67108864&262144
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16384 := 67108864&16384
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8192 := 67108864&8192
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5175 := 67108864&5175
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5174 := 67108864&5174
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5156 := 67108864&5156
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5152 := 67108864&5152
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5136 := 67108864&5136
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 5120 := 67108864&5120
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4096 := 67108864&4096
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4 := 67108864&4
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4 := 67108864&4
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 67108864&16
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32 := 67108864&32
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 67108864&16
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 67108864&16
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8 := 67108864&8
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 3 := 67108864&3
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 3 := 67108864&3
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&67108864
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 335544320 := 6 << 26
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&67108864
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 335544320 := 6 << 26
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&67108864
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 603979776 := 6 << 26
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&67108864
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 603979776 := 10 << 26
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 67108864 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 33554432 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16777216 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 524288 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2048 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 512 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 384 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 256 := 67108864&134217728
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 128 := 67108864&134217728
(smt.stats    5    647   8033  13495  1737/1591/396    1266/247    15  122   20.06)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&134217727
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 402653183 := 4 << 20
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&134217727
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 402653183 := 0 << 20
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&71303168
(smt.stats :restarts  :decisions   :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations          :lemmas         :deletions     )
(smt.stats    6    748   9924  16132  1793/1608/402    1577/301    16  125   20.35)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1048576 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 262144 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 131072 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 131072 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 65536 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 524288 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 524288 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 4096 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8192 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 8192 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32768 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2048 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2048 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 256 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 128 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 128 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 512 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 512 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 32 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 16 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
shl: (shl[28] (bv2int %0) (+ 28 (* 268435455 #112))) 6337 := 162 << 21
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
shl: (shl[28] (bv2int %0) (+ 28 (* 268435455 #112))) 6337 := 162 << 21
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
shl: (shl[28] (bv2int %0) (+ 28 (* 268435455 #112))) 6337 := 162 << 21
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 2 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1048576 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1048575 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 2 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1048572 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 16 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 32 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 64 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 128 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 256 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 512 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 1024 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 2048 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 4096 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8192 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 16384 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 32768 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 65536 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 131072 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 262144 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 524288 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 131072 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 262144 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 524288 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8704 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8320 := 1048576&71303168
(smt.stats    7    859  11929  21078  2038/1870/606    1778/359    18  168   21.53)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8208 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8208 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8256 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8256 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8224 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8224 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8200 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8200 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8200 := 1048576&71303168
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 1048576&71303168
band: (band[28] (if (= #116 27) 1 (if #386 2 #438)) (shl[28] (bv2int %0) (+ 28 #441))) 8200 := 1048576&71303168
(smt.stats    8    981  14812  27932  2149/1978/632    2122/427    20  207   21.73)
(smt.stats    9   1115  17585  30882  2215/1979/632    2412/428    20  207   21.75)
(smt.stats   10   1216  19537  35677  2435/2179/633    2635/462    21  213   21.85)
ramon: poll                 wall=1.000s usage=0.999s mem=23476KiB load=1.00 rootload=0.99
(smt.stats   11   1327  21894  42186  2667/2358/633    2820/519    22  214   21.99)
(smt.stats   12   1449  24804  52393  2736/2552/635    3277/547    23  220   22.08)
(smt.stats   13   1583  26668  55506  2878/2570/635    3570/552    23  220   22.27)
(smt.stats   14   1730  27482  57363  3273/2878/635    3780/555    23  220   22.37)
(smt.stats   15   1831  28843  60543  3545/3281/635    4026/559    23  220   22.46)
(smt.stats   16   1942  31573  66765  3607/3399/637    4356/682    24  224   22.46)
ramon: poll                 wall=2.000s usage=1.998s mem=23796KiB load=1.00 rootload=1.00
(smt.stats   17   2064  35591  74598  3642/3436/642    4843/703    25  226   22.56)
(smt.stats   18   2198  37762  76924  3855/3501/642    4970/956    26  252   22.84)
ramon: poll                 wall=3.000s usage=2.997s mem=24528KiB load=1.00 rootload=0.99
(smt.stats   19   2345  38140  77765  4033/3719/642    5198/959    26  252   22.94)
(smt.stats   20   2506  41236  83021  4255/4008/644    5605/959    26  252   23.14)
(smt.stats   21   2607  44811  93898  4269/4076/644    6382/975    27  258   23.23)
ramon: poll                 wall=4.000s usage=3.996s mem=24708KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   22   2718  48998 106515  4307/4092/647    6983/1069    28  260   23.43)
(smt.stats   23   2840  53285 114657  4343/4156/650    7319/1131    29  270   23.52)
(smt.stats   24   2974  57122 125271  4400/4213/656    7868/1213    30  285   23.73)
(smt.stats   25   3121  60692 143541  4659/4355/657    8593/1215    30  285   23.93)
ramon: poll                 wall=5.000s usage=4.995s mem=25528KiB load=1.00 rootload=1.00
(smt.stats   26   3282  64968 159512  4790/4539/658    9085/1313    31  314   24.22)
(smt.stats   27   3459  70112 184863  4877/4626/668   10296/1371    32  327   24.52)
(smt.stats   28   3560  72520 196279  4946/4684/669   10963/1601    33  371   24.61)
(smt.stats   29   3671  76889 214613  4971/4684/669   11180/1603    33  371   24.93)
(smt.stats   30   3793  80738 242385  5034/4759/669   11811/1604    33  371   25.12)
(smt.stats   31   3927  84097 260018  5059/4792/669   12828/1604    33  371   25.41)
(smt.stats   32   4074  90669 287890  5091/4818/671   13919/1749    34  375   25.61)
ramon: poll                 wall=6.000s usage=5.994s mem=27084KiB load=1.00 rootload=1.00
ramon: poll                 wall=7.000s usage=6.994s mem=27152KiB load=1.00 rootload=1.00
(smt.stats   33   4235  97682 311201  5334/4818/671   14312/1754    34  375   25.81)
(smt.stats   34   4412 107683 341983  5482/5134/671   14773/1758    34  375   25.81)
ramon: poll                 wall=8.000s usage=7.993s mem=27392KiB load=1.00 rootload=1.00
(smt.stats   35   4606 118480 368974  5504/5231/672   15753/1999    35  385   26.19)
(smt.stats   36   4707 124357 393092  5552/5249/673   16068/2146    36  399   26.19)
(smt.stats   37   4818 130521 421640  5611/5287/673   16368/2151    36  399   26.29)
ramon: poll                 wall=9.000s usage=8.992s mem=27792KiB load=1.00 rootload=1.00
(smt.stats   38   4940 133348 439676  5684/5362/674   16913/2170    37  407   26.38)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   39   5074 138062 458346  5731/5427/675   17601/2171    37  407   26.38)
(smt.stats   40   5221 142738 484129  5782/5464/675   17825/2309    38  410   26.48)
ramon: poll                 wall=10.000s usage=9.991s mem=28080KiB load=1.00 rootload=0.99
(smt.stats   41   5382 147221 529937  5824/5529/675   18204/2309    38  410   26.58)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   42   5559 151040 557573  5847/5560/675   18867/2310    38  410   26.67)
(smt.stats   43   5753 154848 597965  6034/5614/675   19231/2314    38  410   26.77)
(smt.stats   44   5966 158502 618399  6161/5785/675   19873/2329    38  410   26.86)
(smt.stats   45   6067 162975 635864  6262/5954/675   20295/2330    38  410   26.96)
ramon: poll                 wall=11.000s usage=10.990s mem=28500KiB load=1.00 rootload=1.00
(smt.stats   46   6178 168754 670009  6327/6002/678   20779/2609    39  414   27.06)
(smt.stats   47   6300 173830 694776  6422/6061/678   21266/2609    39  414   27.25)
(smt.stats   48   6434 177188 710260  6614/6161/678   21852/2723    40  421   27.44)
(smt.stats   49   6581 179807 734659  6646/6359/679   22352/2724    40  421   27.44)
(smt.stats   50   6742 182496 768453  6831/6385/679   22633/2726    40  421   27.76)
ramon: poll                 wall=12.000s usage=11.990s mem=29204KiB load=1.00 rootload=1.00
(smt.stats   51   6919 185240 802289  7074/6801/680   23160/2846    41  421   27.76)
(smt.stats   52   7113 194145 860924  7093/6813/681   23864/2846    41  421   27.76)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2 := 4096&168820718
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 4096&168820718
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 4096&168820718
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 4096&168820719
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 4096&168820863
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 4195352703 := 536867328 << 12
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 4096&168820863
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 4195352703 := 536867328 << 12
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 4096&168820863
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 4195352703 := 536867328 << 12
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 0 := 4096&168820862
shl: (shl[32] (* 2 (bv2int %0)) (mod (+ 27 #485 #489) 32)) 4195352702 := 536867328 << 12
(smt.stats   53   7326 198830 903158  7186/6845/681   24886/3059    42  431   27.95)
ramon: poll                 wall=13.000s usage=12.989s mem=29492KiB load=1.00 rootload=1.00
(smt.stats   54   7560 203111 934151  7252/6971/699   25864/3202    43  452   28.14)
(smt.stats   55   7661 205131 952073  7270/6987/699   26089/3203    43  452   28.14)
(smt.stats   56   7772 207577 985366  7298/7007/700   26352/3203    43  452   28.14)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   57   7894 210543 1028785  7307/7025/700   26793/3230    44  475   28.14)
(smt.stats   58   8028 213177 1053637  7328/7051/701   27422/3230    44  475   28.44)
ramon: poll                 wall=14.000s usage=13.988s mem=29936KiB load=1.00 rootload=1.00
(smt.stats   59   8175 218602 1088847  7346/7056/702   27879/3350    45  478   28.44)
(smt.stats   60   8336 225129 1165266  7363/7074/702   28351/3353    45  478   28.53)
(smt.stats   61   8513 229487 1209848  7374/7097/703   29089/3403    46  488   28.53)
(smt.stats   62   8707 237079 1274505  7378/7101/703   29751/3403    46  488   28.63)
ramon: poll                 wall=15.000s usage=14.987s mem=30192KiB load=1.00 rootload=1.00
(smt.stats   63   8920 245737 1322890  7446/7105/703   30340/3471    47  503   28.72)
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2 := 33554432&2097153
band: (band[28] (if (= #268 31) 1 (if #364 2 #478)) (shl[32] (* 2 #250) (mod #493 32))) 2 := 33554432&2097153
(smt.stats   64   9154 250331 1345431  7523/7200/703   31222/3475    47  503   29.01)
ramon: poll                 wall=16.000s usage=15.986s mem=31084KiB load=1.00 rootload=1.00
(smt.stats   65   9411 255272 1387355  7636/7252/703   31634/3477    47  503   29.10)
(smt.stats   66   9512 257008 1399647  7675/7389/705   31923/3681    48  538   29.01)
(smt.stats   67   9623 259636 1425202  7690/7402/705   32183/3682    48  538   29.11)
(smt.stats   68   9745 264098 1468990  7723/7413/705   32432/3683    48  538   29.37)
(smt.stats   69   9879 267696 1511806  7748/7453/705   32752/3683    48  538   29.37)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10026 270855 1525083  7760/7483/705   32937/3683    48  538   29.47)
ramon: poll                 wall=17.000s usage=16.985s mem=31292KiB load=1.00 rootload=0.99
(smt.stats   71  10187 277180 1605882  7760/7483/705   33505/3683    48  538   29.47)
(smt.stats   72  10364 282434 1643302  7785/7487/705   33898/3684    48  538   29.56)
ramon: poll                 wall=18.000s usage=17.984s mem=31308KiB load=1.00 rootload=1.00
(smt.stats   73  10558 287386 1671379  7805/7516/705   34489/3684    48  538   29.66)
(smt.stats   74  10771 292935 1715534  7886/7544/705   35176/3693    48  538   29.75)
ramon: poll                 wall=19.000s usage=18.983s mem=31368KiB load=1.00 rootload=1.00
(smt.stats   75  11005 302053 1744839  8003/7637/705   35915/3704    48  538   29.85)
(smt.stats   76  11262 312250 1804682  8148/7733/705   36850/3711    48  538   29.94)
ramon: poll                 wall=20.000s usage=19.982s mem=31644KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 19:03:05 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.010s
ramon: group.total          19.990s
ramon: group.utime          19.974s
ramon: group.stime          0.016s
ramon: group.mempeak        31900KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.008s
ramon: loadavg              1.00
