ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:32:22 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         42728 MiB
ramon: sys.mem.avail        61715 MiB
ramon: sys.nprocs           1256
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/6bMOt6FgpyqF.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2804019
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   3873    750  1177/1058/88     102/4     1   13   19.06)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 66 := 32767&66
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 66 := 65 << 15
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 16 := 32767&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 16 := 15 << 15
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 16 := 32767&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 16 := 15 << 15
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 16 := 32767&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 16 := 15 << 15
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 66 := 32767&66
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 66 := 65 << 15
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 32767 := 32767&32767
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 32767 := 115 << 15
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 32767&562967134306304
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 1125899906842623 := 562967133814815 << 15
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 32767&562967134306304
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 562967134306304 := 562967133814815 << 15
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 32767&562967134306304
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 1125899906842622 := 562967133814815 << 15
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 1 := 32767&116
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&116
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 4 := 32767&116
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 1 := 32767&116
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 32767&116
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 32767&116
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 32767&120
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&66
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&128
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&127
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&127
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&126
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&128
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&66
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&66
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&128
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&130
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&128
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&258
(smt.stats    1    202   5879   2563  1828/1629/129     194/10     4   19   19.35)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&512
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&514
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&514
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&1026
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&2562
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&3074
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&3074
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&3074
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&4098
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&3263
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&3074
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&3074
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&3074
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&3074
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&2178
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&2050
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&2050
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&2050
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&2050
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&2050
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&2050
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&2051
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&12291
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&16387
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&16447
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&16443
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&16447
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 32767&41091
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 3 := 32767&73747
(smt.stats    2    313   6947   4414  2096/1806/241     408/33     6   44   20.04)
(smt.stats    3    414   8528   6746  2176/1990/255     581/62     7   47   20.04)
(smt.stats    4    525  13512  15419  2340/2139/259     726/109     9   60   20.13)
(smt.stats    5    647  17627  24364  2436/2157/261     859/118    11   60   20.23)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  22189  28197  2470/2251/261     988/118    11   60   20.23)
(smt.stats    7    859  26933  36410  2561/2330/261    1106/118    11   60   20.23)
(smt.stats    8    981  30069  41592  2580/2357/267    1264/164    12   62   20.34)
(smt.stats    9   1115  34919  51697  2589/2366/273    1367/182    14   91   20.34)
(smt.stats   10   1216  37327  57336  2612/2384/273    1484/184    14   91   20.34)
(smt.stats   11   1327  40506  64309  2620/2392/274    1620/217    15   91   20.45)
(smt.stats   12   1449  43884  73567  2620/2392/274    1770/217    15   91   20.45)
(smt.stats   13   1583  47899  80840  2627/2396/275    2022/248    16   93   20.45)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   14   1730  52570  93218  2640/2413/278    2153/331    17  109   20.58)
(smt.stats   15   1831  55783  99418  2650/2419/278    2270/332    17  109   20.58)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 65535&8
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 65535&8196
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 65535&8196
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 65535&4098
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 1 := 65535&4105
(smt.stats   16   1942  57462 103682  2750/2492/289    2495/367    18  111   20.68)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 18432 := 65535&18432
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 1125899906861056 := 66 << 16
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 18432 := 65535&18432
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 1125899906861056 := 66 << 16
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 59392 := 65535&124928
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 1125899906967552 := 66 << 16
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 59392 := 65535&124928
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 1125899906967552 := 66 << 16
(smt.stats   17   2064  59076 108393  2886/2548/290    2734/370    18  111   20.78)
(smt.stats   18   2198  60946 115230  2972/2672/296    3124/492    19  116   20.87)
(smt.stats   19   2345  63721 121899  3122/2753/296    3577/503    19  116   20.96)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 32 := 65535&131072
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 64 := 65535&3276800
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 128 := 65535&131072
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 256 := 65535&1179648
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 512 := 65535&1179648
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 960 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 896 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 256 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 512 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 256 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 64 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 128 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 64 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 128 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 32 := 65535&5636096
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 57344 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 57344 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 49152 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 32768 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 32768 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 18944 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 18448 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 16 := 65535&2359296
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 16 := 65535&2359296
(smt.stats   20   2506  65672 126621  3353/2954/319    3885/726    20  121   21.35)
(smt.stats   21   2607  66731 130895  3525/3139/355    4107/734    20  121   21.35)
ramon: poll                 wall=1.000s usage=0.999s mem=22740KiB load=1.00 rootload=0.98
(smt.stats   22   2718  68292 136418  3709/3313/355    4378/737    20  121   21.44)
(smt.stats   23   2840  73681 156495  3744/3510/355    4758/866    21  133   21.54)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   24   2974  77269 168362  3910/3660/378    5179/1299    23  251   21.76)
(smt.stats   25   3121  83337 188388  3925/3675/380    5364/1299    23  251   21.76)
(smt.stats   26   3282  86834 193173  3922/3675/380    5512/1427    24  278   21.87)
(smt.stats   27   3459  90068 211674  3939/3692/384    5875/1478    25  281   21.98)
(smt.stats   28   3560  94601 232123  3943/3696/384    6006/1478    25  281   21.98)
(smt.stats   29   3671  99001 242700  3959/3698/384    6308/1522    26  286   22.07)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 1036 := 65535&7471104
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 1032 := 65535&7471104
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 1024 := 65535&7471104
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 65535&46792704
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 65534 := 844442110001866 << 16
(smt.stats   30   3793 101856 257607  4052/3723/384    6644/1526    26  286   22.17)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 65535&14024704
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 1 := 844442110001366 << 16
(smt.stats   31   3927 103799 268005  4092/3843/399    6907/1661    27  287   22.46)
(smt.stats   32   4074 108073 284999  4346/4036/399    7250/1661    27  287   22.66)
(smt.stats   33   4235 116929 315817  4368/4050/403    7601/1728    28  348   22.89)
(smt.stats   34   4412 125915 348461  4449/4076/403    8151/1737    28  348   23.08)
ramon: poll                 wall=2.000s usage=1.999s mem=24332KiB load=1.00 rootload=1.00
(smt.stats   35   4606 133814 379036  4551/4152/408    8978/1792    29  351   23.36)
(smt.stats   36   4707 138083 393086  4681/4237/408    9421/1830    30  358   23.47)
(smt.stats   37   4818 141341 404643  4843/4524/409    9843/1841    31  369   23.56)
(smt.stats   38   4940 144696 415805  4992/4588/410   10620/1841    31  369   23.75)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
ramon: poll                 wall=3.000s usage=2.999s mem=25252KiB load=1.00 rootload=0.99
(smt.stats   39   5074 148554 431470  5009/4694/410   11476/1841    31  369   23.85)
(smt.stats   40   5221 154702 453348  5067/4700/410   12001/1965    32  372   24.12)
(smt.stats   41   5382 160220 474416  5188/4776/410   12626/1971    32  372   24.21)
(smt.stats   42   5559 166778 498594  5242/4886/410   13243/1972    32  372   24.21)
(smt.stats   43   5753 177383 531114  5354/4940/410   13776/1976    32  372   24.31)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   44   5966 184035 553572  5515/5071/410   14584/1981    32  372   24.46)
ramon: poll                 wall=4.000s usage=3.998s mem=25896KiB load=1.00 rootload=1.00
(smt.stats   45   6067 185600 564861  5567/5240/412   15315/2300    33  387   24.65)
(smt.stats   46   6178 187568 577048  5814/5262/412   15647/2300    33  387   24.75)
(smt.stats   47   6300 189575 589235  6038/5517/412   16020/2301    33  387   24.84)
(smt.stats   48   6434 191405 603779  6278/5739/412   16771/2301    33  387   24.94)
(smt.stats   49   6581 194754 614598  6325/5985/412   17632/2397    34  404   25.04)
ramon: poll                 wall=5.000s usage=4.998s mem=26380KiB load=1.00 rootload=1.00
(smt.stats   50   6742 199954 642674  6522/6085/413   18265/2400    34  404   25.23)
(smt.stats   51   6919 205401 681816  6730/6240/413   19178/2514    35  404   25.32)
(smt.stats   52   7113 212739 700236  6774/6426/415   20035/2516    35  404   25.42)
ramon: poll                 wall=6.004s usage=6.000s mem=26780KiB load=1.00 rootload=1.00
(smt.stats   53   7326 219088 721834  6959/6485/415   21022/2754    36  448   25.61)
(smt.stats   54   7560 224667 759881  7060/6700/415   23552/2756    36  448   25.81)
(smt.stats   55   7661 228925 776015  7136/6746/415   24074/2758    36  448   25.91)
(smt.stats   56   7772 233810 794904  7318/6855/415   25217/2758    36  448   26.00)
ramon: poll                 wall=7.000s usage=6.996s mem=27496KiB load=1.00 rootload=0.99
(smt.stats   57   7894 239174 827144  7491/7007/415   25965/2761    36  448   26.21)
(smt.stats   58   8028 242624 844708  7555/7240/416   27293/3388    37  478   26.31)
(smt.stats   59   8175 250083 879628  7619/7241/416   27764/3390    37  478   26.48)
(smt.stats   60   8336 255742 899676  7719/7313/417   29070/3506    38  485   26.67)
(smt.stats   61   8513 261081 918168  7778/7427/417   30049/3509    38  485   26.76)
(smt.stats   62   8707 269713 968523  7925/7481/417   31018/3514    38  485   26.86)
ramon: poll                 wall=8.004s usage=7.999s mem=28312KiB load=1.00 rootload=1.01
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   63   8920 277441 1016462  8071/7635/417   32147/3517    38  485   27.05)
(smt.stats   64   9154 284651 1045650  8191/7763/419   33657/4014    39  502   27.15)
(smt.stats   65   9411 289602 1075883  8492/7916/419   34634/4019    39  502   27.57)
(smt.stats   66   9512 291695 1087804  8621/8296/420   35161/4021    39  502   27.57)
(smt.stats   67   9623 295538 1116665  8738/8316/420   35556/4025    39  502   27.67)
ramon: poll                 wall=9.000s usage=8.995s mem=29192KiB load=1.00 rootload=0.99
(smt.stats   68   9745 300336 1150925  8873/8433/420   36135/4203    40  509   27.77)
(smt.stats   69   9879 304167 1171180  8922/8588/421   36554/4203    40  509   27.86)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10026 308267 1208205  8930/8612/421   37608/4203    40  509   27.86)
(smt.stats   71  10187 313582 1272322  8956/8636/422   38428/4578    41  516   28.06)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&4480
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 10133099161588096 := 844485060591701 << 1
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&4480
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 10133099161588096 := 844485060591701 << 1
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&4480
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 2251799813689728 := 844450699935701 << 1
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&4480
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 3377699720532352 := 844450699935701 << 1
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&4480
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 3377699720532352 := 844442110001751 << 1
(smt.stats   72  10364 316325 1286877  9157/8788/429   38863/4586    41  516   28.15)
(smt.stats   73  10558 320556 1314724  9194/8874/430   39971/4586    41  516   28.34)
(smt.stats   74  10771 332671 1365643  9245/8904/430   40498/4826    42  553   28.43)
ramon: poll                 wall=10.000s usage=9.995s mem=30016KiB load=1.00 rootload=1.00
(smt.stats   75  11005 341683 1399282  9398/8952/430   41846/4827    42  553   28.82)
(smt.stats   76  11262 348900 1452425  9565/9107/430   43251/4829    42  553   29.01)
ramon: poll                 wall=11.000s usage=10.994s mem=30396KiB load=1.00 rootload=0.99
(smt.stats   77  11544 355327 1491347  9921/9260/430   44091/4832    42  553   29.10)
(smt.stats   78  11645 358926 1532966  9948/9629/430   44321/4832    42  553   29.10)
(smt.stats   79  11756 364655 1576681  9961/9642/432   45203/5195    43  560   29.20)
(smt.stats   80  11878 368585 1596949  9988/9648/432   46223/5196    43  560   29.29)
(smt.stats   81  12012 370804 1622752 10001/9682/432   47185/5198    43  560   29.40)
ramon: poll                 wall=12.000s usage=11.982s mem=30972KiB load=0.99 rootload=0.99
(smt.stats   82  12159 374341 1647662 10182/9688/432   47584/5200    43  560   29.50)
(smt.stats :restarts :decisions    :clauses/bin/units            :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   83  12320 376064 1665121 10329/9881/432   48271/5202    43  560   29.59)
(smt.stats   84  12497 379094 1695610 10507/10027/432   48753/5202    43  560   29.59)
(smt.stats   85  12691 385977 1719181 10669/10194/432   49778/5205    43  560   29.69)
(smt.stats   86  12904 389843 1733524 10768/10401/432   50285/5206    43  560   30.02)
(smt.stats   87  13138 396460 1782304 10832/10511/432   51631/5206    43  560   30.21)
ramon: poll                 wall=13.000s usage=12.981s mem=31772KiB load=1.00 rootload=1.00
(smt.stats   88  13395 408050 1863824 10907/10526/434   52836/6277    44  568   30.40)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   89  13677 417802 1917764 10954/10593/434   53966/6281    44  568   30.40)
(smt.stats   90  13987 429014 1975793 10972/10651/434   55142/6606    45  569   30.49)
(smt.stats   91  14088 434754 2041845 10983/10662/434   55718/6606    45  569   30.59)
(smt.stats   92  14199 439114 2064455 10991/10670/435   56421/6845    46  601   30.59)
ramon: poll                 wall=14.000s usage=13.981s mem=32300KiB load=1.00 rootload=1.00
(smt.stats   93  14321 444110 2079353 11008/10683/436   56787/6845    46  601   30.78)
(smt.stats   94  14455 448383 2099789 11022/10699/436   57417/6845    46  601   30.78)
(smt.stats   95  14602 455697 2177565 11037/10702/437   57828/6847    46  601   30.88)
(smt.stats   96  14763 461329 2210273 11073/10721/438   58084/6847    46  601   30.97)
(smt.stats   97  14940 464268 2232224 11326/10993/439   58416/7131    47  643   31.07)
(smt.delete-inactive-clauses  :num-deleted-clauses 10048)
ramon: poll                 wall=15.000s usage=14.980s mem=32636KiB load=1.00 rootload=1.00
(smt.stats   98  15134 470684 2276590 11462/11004/439   49188/7134    47  643   31.07)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 3&17587891075078
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 12402486866343942 := 281582352531452 << 2
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 2 := 3&17587891075078
shl: (shl[64] (bv2int %0) (mod (+ #109 #933) 64)) 13528386773186566 := 281582352531452 << 2
(smt.stats   99  15347 476860 2337928 11724/11399/445   49735/7136    47  643   31.07)
(smt.stats  100  15581 482723 2392072 11765/11413/446   52075/7598    48  651   31.17)
(smt.stats  101  15838 489669 2420817 11823/11498/446   52963/7598    48  651   31.26)
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&2
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 563018672898048 := 1 << 1
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&2
shl: (shl[50] (bv2int %0) (mod (bv2int %0) 50)) 281492156673947 := 1 << 1
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&2
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #610 49) 1 (if #612 3 #750))) 1 := 2&1
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&2
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #610 49) 1 (if #612 3 #750))) 1 := 2&1
band: (band[50] (if (or #766 #767 #768 #769 #770 #771 #772 #773 #774 #775 #776 #777 #778 #779 #780) 0 (if #781 1 #877)) (shl[64] (bv2int %0) (mod #934 64))) 0 := 1&2
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #610 49) 1 (if #612 3 #750))) 1 := 2&1
(smt.stats  102  16120 496628 2476273 11903/11568/464   54291/8127    49  746   31.46)
ramon: poll                 wall=16.000s usage=15.980s mem=33108KiB load=1.00 rootload=1.00
(smt.stats  103  16430 502024 2524511 12058/11607/464   55310/8130    49  746   31.55)
(smt.stats  104  16770 515619 2638756 12152/11772/464   57628/8137    49  746   31.75)
(smt.stats  105  16872 522871 2664528 12206/11878/466   57856/8757    50  752   31.75)
ramon: poll                 wall=17.000s usage=16.980s mem=33444KiB load=1.00 rootload=1.00
(smt.stats  106  16983 528520 2710397 12244/11885/466   58289/8759    50  752   31.86)
(smt.stats  107  17105 533378 2737701 12266/11934/467   58944/8759    50  752   31.86)
(smt.stats  108  17239 538403 2780804 12274/11940/467   59333/8759    50  752   31.86)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats  109  17386 545402 2849194 12308/11950/467   60366/8935    51  757   31.96)
(smt.stats  110  17547 550339 2893450 12309/11975/467   60696/8935    51  757   32.05)
(smt.stats  111  17724 559781 3010313 12311/11977/467   61289/8935    51  757   32.05)
ramon: poll                 wall=18.004s usage=17.982s mem=33708KiB load=1.00 rootload=1.00
(smt.stats  112  17918 567668 3078775 12319/11985/467   62089/8935    51  757   32.32)
(smt.stats  113  18131 578025 3109915 12387/11991/467   62562/8941    51  757   32.42)
(smt.stats  114  18365 584684 3175232 12849/12132/467   63373/8941    51  757   32.52)
ramon: poll                 wall=19.000s usage=18.978s mem=34032KiB load=1.00 rootload=1.00
(smt.stats  115  18622 592973 3224792 12937/12525/469   64342/9288    52  760   32.61)
(smt.stats  116  18904 605061 3303314 13299/12678/469   65665/9290    52  760   32.81)
ramon: poll                 wall=20.000s usage=19.978s mem=34284KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 14:32:42 2024
ramon: root.execname        z3
ramon: root.utime           19.940s
ramon: root.stime           0.030s
ramon: group.total          19.984s
ramon: group.utime          19.948s
ramon: group.stime          0.036s
ramon: group.mempeak        34592KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.006s
ramon: loadavg              1.00
