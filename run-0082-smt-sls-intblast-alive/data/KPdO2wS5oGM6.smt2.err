ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:14:41 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28558 MiB
ramon: sys.mem.avail        62087 MiB
ramon: sys.nprocs           1381
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/KPdO2wS5oGM6.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             753073
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(smt.stats    0    101   3362    836  1269/1129/89     100/3     2   13   51.87)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 0 := 200 << 13
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 0 := 200 << 13
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 0 := 200 << 13
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 0 := 200 << 13
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   111.111     10000        49          0            1        2)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 0 := 200 << 13
(smt.stats    1    202   5371   2342  2030/1827/102     195/11     5   16   52.28)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 0 := 200 << 13
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 144115188075855871 := 4503599627370496 << 14
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 144115188075855870 := 4503599627370496 << 14
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 4503599627370497 := 4503599627370496 << 14
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3812&0
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 132856189007429633 := 132856189007429632 << 14
(sat.ddfw       1      1   51.5515     20001        98          1            1        3)
(smt.stats    2    313   7547   5006  2150/1941/110     299/23     9   23   52.37)
(smt.stats    3    414   9864   7401  2182/1972/118     386/21    11   33   52.47)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 2 := 3&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 144115188075855874 := 144678138029277184 << 3
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&2
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&2
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&2
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 2 := 3&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 144115188075855874 := 144678138029277184 << 3
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 1 := 3&2
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&2
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 2 := 3&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 144115188075855874 := 144678138029277184 << 3
(sat.ddfw       1      1   50.8906     40001       196          2            1        5)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 2 := 3&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 144115188075855874 := 236931561646194688 << 3
(smt.stats    4    525  11376   8405  2287/2074/145     491/40    12   41   52.56)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&11399736556781568
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 1 := 36741280553762816 << 4
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&11399736556781568
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 1 := 36741280553762816 << 4
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&11399736556781568
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 1 := 36741280553762816 << 4
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&11399736556781568
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 1537 := 36741280553762816 << 4
(smt.stats    5    647  12896  10558  2389/2104/147     618/42    13   45   52.71)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  14771  12893  2724/2469/152     726/43    14   46   52.90)
(sat.ddfw       1      1   43.0416     70001       343          3            1        8)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&37999121855938560
band: (band[57] (if (or #575 #576) 0 (if #577 1 #733)) (shl[57] (bv2int %0) (+ 57 #735))) 1 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&37999121855938560
band: (band[57] (if (or #575 #576) 0 (if #577 1 #733)) (shl[57] (bv2int %0) (+ 57 #735))) 2 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&37999121855938560
band: (band[57] (if (or #575 #576) 0 (if #577 1 #733)) (shl[57] (bv2int %0) (+ 57 #735))) 2 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&37999121855938560
band: (band[57] (if (or #575 #576) 0 (if #577 1 #733)) (shl[57] (bv2int %0) (+ 57 #735))) 2 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 3&37999121855938560
band: (band[57] (if (or #575 #576) 0 (if #577 1 #733)) (shl[57] (bv2int %0) (+ 57 #735))) 1 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 1 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 1 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 1 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 1 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 1 := 3&37999121855938560
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 2 := 3&37999121855938560
(smt.stats    7    859  16220  14841  2803/2478/152     852/50    15   46   52.99)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 2 := 3&22236523160141824
(smt.stats    8    981  17513  17364  2857/2600/186     967/70    17   77   53.09)
ramon: poll                 wall=1.000s usage=0.948s mem=55452KiB load=0.95 rootload=0.94
(smt.stats    9   1115  22015  24804  2879/2617/186    1113/70    18   80   53.09)
(smt.stats   10   1216  25764  31920  2879/2617/186    1216/70    18   80   53.20)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304940
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304940
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304940
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304940
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304940
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304944
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304960
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304960
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304960
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304960
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304944
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&4081387162304976
(smt.stats   11   1327  29347  37946  2964/2619/186    1343/71    18   80   53.39)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304960
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304960
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304964
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305028
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1445233267920863748 := 144607769285099600 << 19
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305028
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1445233267920863748 := 144607769285099714 << 19
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304960
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304964
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305276
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305540
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1445233267920864260 := 144607769285099714 << 19
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305020
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304960
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304964
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305024
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305028
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1445233267920863748 := 144607769285099714 << 19
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305028
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1445233267920863748 := 144607769285099714 << 19
(sat.ddfw       1      1   35.9389    110001       539          4            1       12)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305024
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305028
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1445233267920863748 := 144607769285099600 << 19
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305024
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162305020
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304996
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304964
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304964
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304756
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&4081387162304516
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1445233267920863236 := 144607769285099600 << 19
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4 := 244029&3940649673950212
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1445092530432508932 := 144607769285099600 << 19
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 8 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 32 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 32 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 64 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 128 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 512 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 1024 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 2048 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 4096 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 8192 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16384 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 16384 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 32768 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 65536 := 244029&41943040
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 131072 := 244029&41943040
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  31392  42586  3061/2797/300    1538/121    20  105   53.88)
(smt.stats   13   1583  36374  48508  3105/2829/303    1671/146    22  113   53.98)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018964100
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018964096
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018964096
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018964480
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018964096
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018964480
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018964992
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018964992
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018966016
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1477180677777524736 := 40532396646334476 << 56
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018966016
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1477180677777524736 := 40532396646334476 << 56
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018966016
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1477180677777524736 := 40532396646334476 << 56
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018966016
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1477180677777524736 := 40532396646334590 << 56
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018966016
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1477180677777524736 := 40532396646334590 << 56
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&144115188075853824
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 33539124764571301&36028797018966016
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 1477180677777524736 := 40532396646334590 << 56
(sat.ddfw       1      1   30.6366    160000       784          5            1       17)
(smt.stats   14   1730  40826  55056  3299/2890/306    1885/160    23  116   54.26)
(smt.stats   15   1831  42110  58027  3404/3059/341    2028/165    23  116   54.28)
ramon: poll                 wall=2.000s usage=1.949s mem=56468KiB load=1.00 rootload=1.00
(smt.stats   16   1942  43962  63865  3488/3196/346    2233/230    25  135   54.38)
(smt.stats   17   2064  47163  69102  3507/3216/351    2398/318    26  178   54.47)
(sat.ddfw       1      1   26.7384    220001      1078          6            1       23)
(smt.stats   18   2198  56645  88687  3515/3224/351    2543/318    26  178   54.47)
ramon: poll                 wall=3.000s usage=2.949s mem=57296KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   23.5611    290001      1421          7            1       30)
(sat.ddfw       1      1   21.1361    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=3.948s mem=57296KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   19.0436    460001      2254          9            1       47)
ramon: poll                 wall=5.000s usage=4.948s mem=57296KiB load=1.00 rootload=1.00
(smt.stats   19   2345  59911  95219  3637/3227/351    2731/318    26  178   54.87)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 0&144115187939545026
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 288230376015400898 := 288230376015400898 << 1
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 0&144115187939544798
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 288230376015400670 := 288230376015400670 << 1
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 0&144115187939544798
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 288230376015400670 := 288230376015400670 << 1
(smt.stats   20   2506  62504 100605  3887/3476/351    3080/322    26  178   54.99)
(smt.stats   21   2607  65841 106837  3944/3650/357    3289/389    27  179   55.08)
(smt.stats   22   2718  69540 116440  3955/3660/357    3520/418    28  182   55.08)
(smt.stats   23   2840  75105 129853  3975/3680/360    3679/494    30  201   55.26)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 0&220
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 142989288169013301 := 55 << 2
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 0&220
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 142989288169013301 := 55 << 2
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 0&220
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 142989288169013301 := 55 << 2
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 0&220
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #116))) 142989288169013301 := 55 << 2
(sat.ddfw       1      1   17.3792    560001      2745         10            1       57)
(smt.stats   24   2974  77902 136383  4112/3788/374    3891/515    31  209   55.55)
(smt.stats   25   3121  85586 151575  4125/3796/376    4089/523    32  220   55.71)
ramon: poll                 wall=6.000s usage=5.952s mem=57912KiB load=1.00 rootload=1.00
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 2 := 16769562382285650&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 2 := 2 << 55
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 16769562382285650&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 0 := 2 << 55
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 16769562382285650&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 0 := 2 << 55
(smt.stats   26   3282  89907 161631  4187/3856/383    4391/548    33  250   56.29)
(smt.stats   27   3459  95855 174980  4264/3916/390    4822/566    34  266   56.67)
(smt.stats   28   3560  98984 182548  4269/3921/390    5028/566    34  266   56.67)
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 8384781191142825&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 432345564227567618 := 4 << 54
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 8384781191142825&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 432345564227567616 := 4 << 54
band: (band[57] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757) 0 (if #758 1 #866)) (shl[64] (* 2 #114) (mod #904 64))) 0 := 8384781191142825&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #901 #903) 64)) 432345564227567616 := 4 << 54
(smt.stats   29   3671 103383 192840  4361/3934/390    5214/583    35  279   56.77)
(smt.stats   30   3793 104090 193616  4378/4020/395    5339/592    35  279   57.08)
(smt.stats   31   3927 107509 204080  4996/4490/395    5773/603    35  279   57.27)
(sat.ddfw       1      1   15.9582    670001      3284         11            1       68)
ramon: poll                 wall=7.000s usage=6.951s mem=59644KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074 111818 212152  5107/4666/398    6080/648    36  280   57.37)
ramon: poll                 wall=8.000s usage=7.954s mem=59828KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   14.7801    790001      3872         12            1       80)
(smt.stats   33   4235 117380 223613  5402/5002/401    6399/738    37  288   57.47)
ramon: poll                 wall=9.000s usage=8.952s mem=59852KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   13.7697    920001      4509         13            1       93)
ramon: poll                 wall=10.000s usage=9.956s mem=60120KiB load=1.00 rootload=1.00
(smt.stats   34   4412 122042 234991  5681/5328/403    6815/791    38  300   57.75)
(smt.stats   35   4606 130969 261819  5705/5350/406    7402/793    38  300   57.75)
(sat.ddfw       1      1   13.0354   1060001      5196         14            1      108)
(smt.stats   36   4707 135362 272470  5811/5451/407    7729/873    39  305   57.85)
ramon: poll                 wall=11.008s usage=11.173s mem=60432KiB load=1.21 rootload=1.21
(smt.stats   37   4818 139535 286876  5921/5463/407    8199/916    40  306   58.17)
(smt.stats   38   4940 143818 303006  6057/5672/407    8699/919    40  306   58.27)
(smt.delete-inactive-clauses  :num-deleted-clauses 457)
(smt.stats   39   5074 149184 318553  6067/5714/408    8757/1051    41  310   58.27)
(smt.stats   40   5221 155764 341328  6079/5726/408    9263/1051    41  310   58.27)
ramon: poll                 wall=12.004s usage=12.069s mem=60760KiB load=0.90 rootload=0.89
(sat.ddfw       1      1   12.1389   1210001      5931         15            1      123)
(smt.stats   41   5382 161229 354513  6266/5731/408    9597/1056    41  310   58.46)
ramon: poll                 wall=13.000s usage=13.064s mem=60760KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   42   5559 168107 375354  6368/6011/412   10272/1240    42  321   58.55)
(smt.stats   43   5753 176982 399067  6480/6021/412   10784/1305    43  339   58.65)
ramon: poll                 wall=14.000s usage=14.064s mem=61016KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   11.4449   1370001      6715         16            1      139)
(smt.stats   44   5966 184098 422030  6742/6148/413   11874/1414    44  339   58.75)
(smt.stats   45   6067 188402 434654  6750/6397/413   12119/1414    44  339   58.75)
ramon: poll                 wall=15.000s usage=15.064s mem=61272KiB load=1.00 rootload=1.00
(smt.stats   46   6178 193840 451052  6768/6410/413   12346/1414    44  339   58.86)
(smt.stats   47   6300 198121 469266  6850/6426/413   12803/1416    44  339   58.95)
(sat.ddfw       1      1   10.8273   1540001      7549         17            1      156)
ramon: poll                 wall=16.004s usage=16.068s mem=61528KiB load=1.00 rootload=1.00
(smt.stats   48   6434 200341 482541  7067/6519/413   13065/1423    44  339   59.14)
ramon: poll                 wall=17.000s usage=17.063s mem=61784KiB load=1.00 rootload=1.00
(smt.stats   49   6581 207283 503597  7097/6740/413   13768/1423    44  339   59.24)
(smt.stats   50   6742 220363 569757  7110/6757/416   14014/1636    46  364   59.61)
(sat.ddfw       1      1   10.2734   1720001      8431         18            1      174)
(smt.stats   51   6919 231438 619419  7122/6766/416   14575/1636    46  364   59.71)
ramon: poll                 wall=18.000s usage=18.062s mem=62096KiB load=1.00 rootload=1.00
(smt.stats   52   7113 240182 649637  7143/6790/419   15062/1727    47  374   59.71)
ramon: poll                 wall=19.000s usage=19.062s mem=62096KiB load=1.00 rootload=1.00
(smt.stats   53   7326 248997 689373  7390/6797/419   15747/1739    47  374   59.80)
(sat.ddfw       1      1   9.76512   1910001      9362         19            1      193)
(smt.stats   54   7560 254556 722569  7650/7104/419   16815/1741    47  374   60.00)
(smt.stats   55   7661 258616 737592  7665/7312/419   17355/1741    47  374   60.09)
ramon: poll                 wall=20.000s usage=20.062s mem=62608KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 22:15:01 2024
ramon: root.execname        z3
ramon: root.utime           20.090s
ramon: root.stime           0.010s
ramon: group.total          20.118s
ramon: group.utime          20.102s
ramon: group.stime          0.016s
ramon: group.mempeak        62864KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.056s
ramon: loadavg              1.00
