ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:44:38 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         42419 MiB
ramon: sys.mem.avail        61714 MiB
ramon: sys.nprocs           1259
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/BbHYBHKxiG0N.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2846409
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   4923    863  1111/1000/101      90/17     6   20   19.08)
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 1 := 1&56
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 2 := 2&56
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 4 := 4&56
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 8&56
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 8 := 8 << 8
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 8&56
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 8 := 8 << 8
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 8&56
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 8 := 8 << 8
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 8&56
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 8 := 8 << 8
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 0&56
shl: (shl[40] (bv2int %1) (mod (bv2int %0) 40)) 1 := 0 << 8
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 0&56
shl: (shl[40] (bv2int %1) (mod (bv2int %0) 40)) 1 := 0 << 8
(smt.stats    1    202   6791   1896  1897/1692/126     176/22     9   29   19.37)
(smt.stats    2    313   7483   2370  2385/1956/132     290/32    10   31   19.80)
(smt.stats    3    414  10517   5332  2542/2322/135     430/51    12   33   19.80)
(smt.stats    4    525  12301   7163  2577/2345/141     566/97    14   40   19.90)
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140683979&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140683979&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140683980&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140683979&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140683980&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140683979&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140683980&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 16 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 32 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 128 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 256 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 512 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 1024 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 2048 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 4096 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8192 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 16384 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 32768 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 256 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 248 := 15140683979&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140683980&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 16 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 32 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 128 := 15140684032&15140683978
(smt.stats    5    647  15871   9335  2675/2406/202     680/99    16   48   20.30)
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 10 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140684032&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140684047&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140684040&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140716544&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140716552&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140913160&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140913152&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140913167&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140913160&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140978824&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15140978744&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15143600136&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15143600136&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437448&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437448&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437448&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437448&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437448&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437448&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437448&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437501&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437448&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15141437448&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15166668813&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15166668808&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 10 := 15166668808&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8 := 15166668808&15140683978
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  18229  12502  2834/2430/238     897/115    16   48   20.78)
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 16 := 17179869952&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 16 := 17179869952&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 16 := 17179869952&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 64 := 17179869952&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 64 := 17179869952&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 128 := 17179869440&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 32 := 17179869440&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 32 := 17179869696&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 32 := 17179869696&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 32 := 17179869696&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 6 := 17179869696&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 4 := 17179869696&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 4 := 17179869696&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 4 := 17179869696&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 2 := 17179869696&15140683978
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 17179869696&15140683978
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 277094110069248 := 67108867 << 36
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 17179869696&15140683978
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 277094110069248 := 67108867 << 36
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 17179869696&15140683978
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 277094110069248 := 67108867 << 36
(smt.stats    7    859  21891  18138  2914/2671/330    1069/214    18   87   20.78)
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 17179869952&15140683978
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 277094110069504 := 268435456 << 36
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 17179869952&15140683978
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 277094110069504 := 268435456 << 36
(smt.stats    8    981  25082  23626  2965/2737/359    1297/297    21  117   21.00)
(smt.stats    9   1115  28608  29669  3031/2763/365    1440/299    22  127   21.00)
(smt.stats   10   1216  32455  36758  3129/2892/366    1539/348    24  134   21.00)
(smt.stats   11   1327  35006  41481  3160/2930/366    1683/348    24  134   21.00)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  36706  44824  3201/2937/366    1826/351    24  134   21.00)
(smt.stats   13   1583  39360  51672  3233/3005/367    2156/417    25  135   21.12)
(smt.stats   14   1730  42808  60291  3265/3030/370    2299/446    26  135   21.12)
(smt.stats   15   1831  45527  66835  3289/3050/370    2419/447    26  135   21.23)
(smt.stats   16   1943  48097  74159  3291/3064/370    2537/447    26  135   21.23)
ramon: poll                 wall=1.000s usage=0.997s mem=22624KiB load=1.00 rootload=0.99
(smt.stats   17   2065  50042  79873  3311/3064/372    2675/492    27  136   21.23)
(smt.stats   18   2199  55083  92966  3353/3100/373    2860/512    28  138   21.43)
(smt.stats   19   2346  58750 102358  3406/3133/373    3038/517    28  138   21.43)
(smt.stats   20   2507  62833 115577  3431/3200/376    3316/569    29  143   21.43)
(smt.stats   21   2608  66325 127212  3441/3208/377    3413/645    30  161   21.43)
(smt.stats   22   2719  71996 142797  3445/3218/377    3533/645    30  161   21.53)
(smt.stats   23   2841  75199 153710  3446/3219/378    3660/671    31  167   21.53)
(smt.stats   24   2975  79599 167210  3449/3222/379    3842/694    32  179   21.53)
(smt.stats   25   3122  87273 189293  3451/3224/379    3995/694    32  179   21.53)
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 4294967296 := 4362076160&121125471825
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 4294967296 := 4362076160&121125471825
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 4294967296 := 4362076160&121125471825
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 4294967296 := 4362076160&121125471825
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8589934592 := 8589934592&121125471825
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 8589934592 := 8589934592&121125471825
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 17179869184 := 17179869184&121125471825
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 280392644952064 := 25439686779 << 39
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 17179869184 := 17179869184&121125471825
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 280392644952064 := 25439686779 << 39
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 17179869184 := 17179869184&121125471825
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 280392644952064 := 25439686779 << 39
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 17179869184 := 21474836480&121125471825
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 280396939919360 := 25439686779 << 39
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 17179869184 := 21474836480&121125471825
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 280396939919360 := 25439686779 << 39
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 17179869184 := 21474836480&121125471825
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 280396939919360 := 25467813888 << 39
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 17179869184 := 21474836480&121125471825
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 280396939919360 := 25439686779 << 39
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 17179869184 := 21474836480&121125471825
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 280396939919360 := 25439686779 << 39
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 17179869184 := 21474836480&121125471825
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 280396939919360 := 25439686779 << 39
(smt.stats   26   3283  91528 200805  3570/3267/395    4218/748    33  183   21.72)
ramon: poll                 wall=2.000s usage=1.997s mem=23232KiB load=1.00 rootload=1.00
(smt.stats   27   3460  95822 209696  3866/3512/405    4485/753    33  183   21.92)
(smt.stats   28   3561  97645 216101  3900/3655/405    4610/822    34  185   22.02)
(smt.stats   29   3672 100417 223314  4002/3658/406    4802/824    34  185   22.21)
(smt.stats   30   3794 103039 230643  4161/3800/406    4951/835    35  189   22.21)
(smt.stats   31   3928 106112 239881  4230/3936/406    5152/836    35  189   22.21)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4075 109343 250038  4259/4014/411    5426/930    36  191   22.21)
(smt.stats   33   4236 113057 265370  4305/4060/412    5602/1001    37  193   22.42)
(smt.stats   34   4413 117248 281644  4328/4083/413    5825/1021    38  196   22.42)
(smt.stats   35   4607 121162 294037  4340/4095/415    6136/1021    38  196   22.65)
ramon: poll                 wall=3.000s usage=2.996s mem=24188KiB load=1.00 rootload=1.00
(smt.stats   36   4708 123327 300300  4420/4098/415    6272/1083    39  210   22.65)
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 256 := 238439890944&451
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 238385364992&451
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 335589431836672 := 238672674816 << 11
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 238385364992&451
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 335589431836672 := 238672674816 << 11
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 238385364992&451
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 335589431836672 := 238672674816 << 11
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 238385364992&451
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 335589431836672 := 237531824128 << 11
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 3 := 238385364992&451
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 3 := 238385364992&451
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 3 := 238385364992&451
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 2 := 238385364992&451
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 238385364992&451
shl: (shl[40] (bv2int %1) (mod (bv2int %0) 40)) 1099511627775 := 150440254464 << 11
(smt.stats   37   4819 125270 305829  4616/4197/415    6442/1091    39  210   22.75)
(smt.stats   38   4941 130197 319795  4639/4391/436    6721/1112    40  214   22.75)
(smt.delete-inactive-clauses  :num-deleted-clauses 9)
(smt.stats   39   5075 134113 329882  4649/4397/436    7080/1208    41  216   22.85)
(smt.stats   40   5222 139963 354275  4663/4415/437    7469/1316    42  222   22.85)
(smt.stats   41   5383 146446 378789  4679/4426/437    7892/1317    42  222   22.96)
(smt.stats   42   5560 149717 391441  4699/4449/439    8144/1439    43  225   22.96)
(smt.stats   43   5754 154181 414796  4762/4455/439    8405/1446    43  225   23.08)
(smt.stats   44   5967 158107 439815  4801/4520/439    8659/1500    44  229   23.08)
ramon: poll                 wall=4.000s usage=3.996s mem=24364KiB load=1.00 rootload=1.00
(smt.stats   45   6068 162896 456180  4807/4559/441    8876/1507    45  241   23.08)
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 2 := 10810294272&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10810294272&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10810294272&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10810294272&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10810294272&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10810294272&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10810294272&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10810294272&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10751049728&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10751049728&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10751049728&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10751049728&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10751049728&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10755244032&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10755244032&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10755244032&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10755244032&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 10755244032&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 2 := 23640145920&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 23640145920&30281367956
(smt.stats   46   6179 165974 470638  5047/4791/483    9152/1554    46  250   23.47)
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 23640145920&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21436039168&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21433942016&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21433942016&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21433942016&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21433942016&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21433942016&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21425553408&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21425553408&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21358444544&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21425553408&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21425553408&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21427650560&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 21425553408&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 2 := 19345178624&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 19345178624&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 19882049536&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 19613614080&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 19615711232&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 19613614080&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 2 := 36525047808&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 36525047808&30281367956
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 301302711058432 := 1053642719232 << 37
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 36525047808&30281367956
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 301302711058432 := 1053642719232 << 37
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 36793483264&30281367956
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 301302979493888 := 1053642719232 << 37
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 2 := 36793483264&30281367956
band: (band[40] (shl[64] (bv2int %1) (mod #316 64)) (if (or #707 #708 #709) 0 (if #710 1 #852))) 0 := 36793483264&30281367956
shl: (shl[64] (bv2int %1) (mod (+ #104 #315) 64)) 301302979493888 := 1053374283776 << 37
(smt.stats   47   6301 168457 484542  5238/4880/527    9426/1622    47  264   23.75)
(smt.stats   48   6435 171182 492723  5426/5101/547    9836/1625    47  264   23.85)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   49   6582 174660 502587  5460/5174/547   10270/1707    48  275   23.94)
(smt.stats   50   6743 183468 533456  5476/5226/547   10702/1707    48  275   23.94)
ramon: poll                 wall=5.000s usage=4.996s mem=25608KiB load=1.00 rootload=1.00
(smt.stats   51   6921 190646 560491  5533/5283/549   11364/1955    49  276   24.04)
(smt.stats   52   7115 198939 594082  5550/5296/549   11965/1955    49  276   24.14)
(smt.stats   53   7328 204492 622917  5573/5318/549   12461/2110    50  279   24.56)
(smt.stats   54   7562 209845 652805  5703/5336/549   13066/2117    50  279   24.56)
(smt.stats   55   7663 211564 668678  5714/5457/549   13173/2118    50  279   24.56)
(smt.stats   56   7774 218894 695257  5719/5469/551   13458/2326    51  293   24.56)
(smt.stats   57   7896 221744 712967  5734/5469/551   13589/2326    51  293   24.68)
(smt.stats   58   8030 224193 733578  5740/5488/551   14081/2326    51  293   24.68)
ramon: poll                 wall=6.000s usage=5.995s mem=26268KiB load=1.00 rootload=1.00
(smt.stats   59   8177 230402 761933  5861/5494/551   14665/2336    51  293   24.68)
(smt.stats   60   8338 238219 799514  5865/5615/552   15068/2765    52  321   24.79)
(smt.stats   61   8515 238901 810982  5870/5620/553   15296/2765    52  321   24.90)
(smt.stats   62   8709 246834 842590  5990/5713/553   15792/2794    53  324   25.30)
(smt.stats   63   8922 256071 880652  6004/5727/554   17147/2839    54  325   25.49)
ramon: poll                 wall=7.000s usage=6.995s mem=27272KiB load=1.00 rootload=0.99
(smt.stats   64   9156 262118 911442  6026/5749/558   17859/3017    55  328   25.69)
(smt.stats   65   9413 273633 963475  6052/5775/558   18267/3017    55  328   25.69)
(smt.stats   66   9514 277796 985012  6054/5777/558   18498/3134    56  372   25.79)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   67   9625 282721 1012181  6061/5784/558   18717/3134    56  372   25.79)
(smt.stats   68   9747 286691 1029859  6143/5785/558   18976/3141    56  372   25.89)
ramon: poll                 wall=8.000s usage=7.995s mem=27604KiB load=1.00 rootload=1.00
(smt.stats   69   9881 290642 1048372  6340/5881/558   19292/3146    56  372   25.98)
(smt.delete-inactive-clauses  :num-deleted-clauses 6)
(smt.stats   70  10028 294442 1067379  6436/6092/558   19512/3147    56  372   25.98)
ramon: poll                 wall=9.000s usage=8.995s mem=27740KiB load=1.00 rootload=1.00
(smt.stats   71  10189 299749 1094031  6643/6190/558   19815/3149    56  372   26.08)
(smt.stats   72  10366 304628 1128582  6681/6377/558   20055/3150    56  372   26.08)
(smt.stats   73  10560 308203 1142666  6775/6420/558   20312/3150    56  372   26.17)
(smt.stats   74  10773 317218 1183263  6997/6505/558   20754/3159    56  372   26.36)
ramon: poll                 wall=10.000s usage=9.982s mem=27792KiB load=0.99 rootload=0.99
(smt.stats   75  11007 323763 1226881  7036/6751/559   21220/3484    57  372   26.27)
(smt.stats   76  11264 333185 1265204  7338/6759/559   21783/3495    57  372   26.46)
(smt.stats   77  11546 340265 1297527  7442/7108/559   22398/3496    57  372   26.46)
ramon: poll                 wall=11.000s usage=10.982s mem=28224KiB load=1.00 rootload=1.00
(smt.stats   78  11647 342989 1319039  7483/7170/559   22684/3497    57  372   26.56)
(smt.stats   79  11758 345775 1335619  7521/7211/559   23089/3498    57  372   26.56)
(smt.stats   80  11880 351405 1369693  7532/7255/559   23501/3498    57  372   26.65)
(smt.stats   81  12014 356804 1401026  7547/7270/560   23743/3838    58  402   26.65)
(smt.stats   82  12161 362440 1413505  7589/7281/560   23973/3841    58  402   26.65)
(smt.stats   83  12322 367330 1437112  8026/7332/560   24346/3844    58  402   26.75)
(smt.stats   84  12499 369180 1452773  8318/7821/560   24795/3846    58  402   27.02)
ramon: poll                 wall=12.000s usage=11.982s mem=28740KiB load=1.00 rootload=1.00
(smt.stats   85  12693 377120 1495566  8351/8066/560   26181/3846    58  402   27.23)
(smt.stats   86  12906 380331 1509831  8429/8115/563   26405/4343    59  420   27.66)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   87  13140 388593 1578344  8445/8153/563   27327/4343    59  420   27.95)
ramon: poll                 wall=13.000s usage=12.981s mem=29740KiB load=1.00 rootload=1.00
(smt.stats   88  13397 400293 1666958  8445/8153/567   28479/4437    60  439   28.05)
(smt.stats   89  13679 414480 1747425  8458/8163/570   29719/4957    61  445   28.14)
ramon: poll                 wall=14.000s usage=13.967s mem=29704KiB load=0.99 rootload=0.98
(smt.stats   90  13989 426080 1787518  8695/8171/570   30711/4963    61  445   28.33)
(smt.stats   91  14090 427985 1796780  8821/8527/570   30831/4964    61  445   28.33)
ramon: poll                 wall=15.000s usage=14.966s mem=29852KiB load=1.00 rootload=1.00
(smt.stats   92  14201 433190 1839944  8891/8535/570   30988/4970    61  445   28.33)
(smt.stats   93  14323 438305 1876240  9035/8614/570   31180/4975    61  445   28.43)
(smt.stats   94  14457 440358 1891282  9164/8867/571   31768/5201    62  445   28.43)
(smt.stats   95  14604 446047 1932767  9204/8882/571   32248/5201    62  445   28.43)
(smt.stats   96  14765 452195 1995806  9208/8916/571   32775/5201    62  445   28.54)
ramon: poll                 wall=16.000s usage=15.966s mem=30328KiB load=1.00 rootload=1.00
(smt.stats   97  14942 458471 2059019  9214/8922/573   33592/5484    63  449   28.64)
(smt.delete-inactive-clauses  :num-deleted-clauses 427)
(smt.stats   98  15136 462518 2081576  9223/8930/574   33508/5485    63  449   28.64)
(smt.stats   99  15349 472330 2111116  9337/9045/576   33728/5763    64  527   28.64)
(smt.stats  100  15583 480734 2173352  9368/9056/577   35105/6073    65  573   28.73)
ramon: poll                 wall=17.000s usage=16.966s mem=30676KiB load=1.00 rootload=1.00
(smt.stats  101  15840 489221 2229234  9507/9107/580   35776/6076    65  573   28.92)
ramon: poll                 wall=18.000s usage=17.966s mem=30760KiB load=1.00 rootload=1.00
(smt.stats  102  16122 496221 2262268  9893/9285/580   36413/6267    66  574   29.02)
ramon: poll                 wall=19.000s usage=18.965s mem=31064KiB load=1.00 rootload=1.00
(smt.stats  103  16432 501379 2301470 10166/9625/580   37206/6274    66  574   29.34)
(smt.stats  104  16772 515238 2366632 10239/9919/580   37897/6276    66  574   29.34)
(smt.stats  105  16873 518362 2392554 10265/9958/580   38228/6277    66  574   29.34)
ramon: poll                 wall=20.000s usage=19.964s mem=31204KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 14:44:58 2024
ramon: root.execname        z3
ramon: root.utime           19.960s
ramon: root.stime           0.010s
ramon: group.total          19.974s
ramon: group.utime          19.962s
ramon: group.stime          0.012s
ramon: group.mempeak        31460KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.007s
ramon: loadavg              1.00
