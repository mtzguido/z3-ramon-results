ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:33:13 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         25441 MiB
ramon: sys.mem.avail        61752 MiB
ramon: sys.nprocs           1396
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/XBlpP3KMp1AN.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             67282
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   2583    349  1163/998/99      97/14     5   16   19.08)
(smt.stats    1    202   4662    946  1695/1543/102     189/22     7   22   19.08)
(smt.stats    2    313   5626   1921  1833/1596/102     312/31     7   22   19.18)
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1099511627775 := 1099511627775&2199023255551
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 2199023255551 := 4398046511102 << 40
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1099511627775 := 1099511627775&2199023255551
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 2199023255551 := 4398046511102 << 40
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1099511627775 := 1099511627775&2199023255551
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 2199023255551 := 4398046511102 << 40
(smt.stats    3    414   6268   2397  2041/1722/102     413/45     7   22   19.56)
(smt.stats    4    525  10864   3482  2347/2106/108     521/63     8   23   19.56)
(smt.stats    5    647  14087   5133  2643/2411/109     645/65    10   26   19.69)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas        :deletions    )
(smt.stats    6    748  17004   6510  2664/2444/109     746/66    10   26   19.69)
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 0 := 4396503007232 << 15
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 0 := 4396503007232 << 15
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 0 := 4396503007232 << 15
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 0 := 4396503007232 << 15
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 0 := 4396503007232 << 15
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 0 := 4396503007232 << 15
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 2199023255551 := 2198251503616 << 16
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 2199023255551 := 2198251503616 << 16
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 2199023255550 := 2198251503616 << 16
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 2198251503617 := 2198251503616 << 16
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 2198251503617 := 2198251503616 << 16
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 2198251503617 := 2198251503616 << 16
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 2198251503617 := 2198251503616 << 16
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 2198251503616 := 2198251503616 << 16
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&0
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 2198251503616 := 2198251503616 << 16
(smt.stats    7    859  20794   9072  2721/2464/109     854/70    10   26   19.79)
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 32766 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 32765 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 4 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 8 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 16 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 32 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 64 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 128 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 256 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 512 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1024 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2048 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 4096 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 8192 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 16384 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 8192 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 16384 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&1649267507200
band: (band[41] (if (= #109 40) 0 (if #578 1 #689)) (shl[41] (bv2int %1) (+ 41 #692))) 32767 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&1649267507200
band: (band[41] (if (= #109 40) 0 (if #578 1 #689)) (shl[41] (bv2int %1) (+ 41 #692))) 32766 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&1649267507200
band: (band[41] (if (= #109 40) 0 (if #578 1 #689)) (shl[41] (bv2int %1) (+ 41 #692))) 32764 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&1649267507200
band: (band[41] (if (= #109 40) 0 (if #578 1 #689)) (shl[41] (bv2int %1) (+ 41 #692))) 32760 := 32767&1649267507200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 32767&1649267507200
band: (band[41] (if (= #109 40) 0 (if #578 1 #689)) (shl[41] (bv2int %1) (+ 41 #692))) 18 := 32767&1649267507200
(smt.stats    8    981  23187  13725  2840/2615/202    1032/151    13   51   20.18)
(smt.stats    9   1115  24811  15479  2889/2620/203    1166/162    14   61   20.37)
(smt.stats   10   1216  25632  19282  2943/2718/203    1274/165    15   62   20.37)
(smt.stats   11   1327  29052  28062  2945/2720/204    1393/173    16   66   20.37)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  32047  35320  2961/2734/205    1530/184    17   68   20.37)
(smt.stats   13   1583  34930  44760  2968/2741/205    1710/184    17   68   20.47)
(smt.stats   14   1730  37238  52573  2998/2761/209    1876/208    19   74   20.47)
(smt.stats   15   1831  39947  64787  3037/2796/209    1989/208    19   74   20.61)
(smt.stats   16   1942  42876  73929  3054/2813/213    2105/219    21   77   20.61)
(smt.stats   17   2064  44140  77254  3063/2815/213    2234/219    21   77   20.61)
(smt.stats   18   2198  47655  84999  3067/2826/217    2369/226    22   78   20.61)
(smt.stats   19   2345  50165  93293  3076/2833/217    2525/227    23   81   20.61)
(smt.stats   20   2506  50828  96803  3077/2837/227    2696/264    24   90   20.71)
(smt.stats   21   2607  51317  99494  3077/2837/227    2800/264    24   90   20.71)
(smt.stats   22   2718  53342 104958  3079/2839/227    2935/264    24   90   20.71)
ramon: poll                 wall=1.000s usage=0.959s mem=21884KiB load=0.96 rootload=0.94
(smt.stats   23   2840  56460 112221  3079/2839/228    3060/273    25   94   20.93)
(smt.stats   24   2974  57196 116286  3080/2839/228    3198/273    25   94   20.93)
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1099511627775&2199023255551
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1099511627775&2199023255551
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1099511627775&2199023255550
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1099511627775&2199023255550
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1099511627775&1099511627776
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 144043719820050432 := 67108868 << 40
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&38
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 144042620308422694 := 83886084 << 1
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&38
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 144042620308422694 := 83886084 << 1
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&2
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 4398046511106 := 83886080 << 1
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&4
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 0 := 1099511627777 << 2
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&4
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 0 := 1099511627777 << 2
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&4
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 0 := 1649267441665 << 2
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&4
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 0 := 1099511627777 << 2
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&4
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 0 := 1099511627777 << 2
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&4
shl: (shl[41] (bv2int %1) (+ 41 (* 2199023255551 #105))) 0 := 1099511627777 << 2
(smt.stats   25   3121  58674 122121  3150/2871/239    3370/290    26   97   20.93)
(smt.stats   26   3282  62075 134444  3201/2940/249    3540/293    26   97   20.93)
(smt.stats   27   3459  66279 146752  3274/3027/250    3726/312    28  101   21.03)
(smt.stats   28   3560  67556 151405  3291/3031/251    3830/312    28  101   21.13)
(smt.stats   29   3671  69225 157810  3338/3049/251    3946/313    28  101   21.13)
(smt.stats   30   3793  71640 166292  3341/3094/255    4067/325    29  105   21.13)
(smt.stats   31   3927  74122 175960  3352/3104/255    4222/333    30  113   21.13)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074  75549 184719  3371/3109/256    4381/336    31  114   21.13)
(smt.stats   33   4235  76941 191961  3377/3129/256    4544/336    31  114   21.22)
(smt.stats   34   4412  81462 206146  3398/3132/256    4760/337    31  114   21.22)
(smt.stats   35   4606  82126 212681  3401/3153/258    4951/377    32  121   21.22)
(smt.stats   36   4707  83552 218357  3428/3156/258    5062/378    32  121   21.22)
(smt.stats   37   4818  86352 226371  3475/3197/261    5182/385    33  128   21.22)
(smt.stats   38   4940  88705 234994  3544/3238/261    5319/387    33  128   21.33)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
ramon: poll                 wall=2.000s usage=1.959s mem=22544KiB load=1.00 rootload=1.00
(smt.stats   39   5074  89973 241621  3606/3335/261    5479/388    33  128   21.33)
(smt.stats   40   5221  91632 251694  3629/3365/261    5640/388    33  128   21.43)
(smt.stats   41   5382  93093 260917  3633/3386/261    5806/388    33  128   21.43)
(smt.stats   42   5559  94651 270637  3693/3396/261    5984/388    33  128   21.52)
(smt.stats   43   5753  97237 284416  3732/3479/264    6194/436    34  132   21.52)
(smt.stats   44   5966  99636 298889  3816/3569/265    6472/462    35  134   21.52)
(smt.stats   45   6067 101722 303000  3818/3571/265    6578/462    35  134   21.52)
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&1
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1 := 1&1
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 4398046511105 := 2199090364416 << 1
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1 := 1&134348808
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1 := 1&134348808
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 1&4
band: (band[41] (if (= #109 40) 0 (if #578 1 #689)) (shl[41] (bv2int %1) (+ 41 #692))) 1 := 1&4
(smt.stats   46   6178 103676 310191  3846/3578/265    6695/463    35  134   21.64)
(smt.stats   47   6300 104447 314147  3903/3602/275    6811/474    36  136   21.64)
(smt.stats   48   6434 106271 321923  3967/3665/275    6950/474    36  136   21.64)
(smt.stats   49   6581 107449 332252  3990/3729/275    7107/475    36  136   21.91)
(smt.stats   50   6742 110272 339467  4012/3748/276    7279/486    37  136   21.91)
(smt.stats   51   6919 113756 349461  4046/3774/276    7504/486    37  136   22.01)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   52   7113 115896 360427  4074/3805/276    7701/518    38  138   22.01)
(smt.stats   53   7326 116735 372437  4077/3822/276    7934/518    38  138   22.01)
(smt.stats   54   7560 118153 385785  4085/3823/276    8195/518    38  138   22.10)
(smt.stats   55   7661 118917 391750  4091/3832/276    8308/518    38  138   22.10)
(smt.stats   56   7772 119326 397612  4097/3836/276    8428/518    38  138   22.11)
(smt.stats   57   7894 120458 406227  4107/3846/276    8566/518    38  138   22.11)
ramon: poll                 wall=3.000s usage=2.958s mem=23492KiB load=1.00 rootload=1.00
(smt.stats   58   8028 121874 415558  4112/3857/276    8702/518    38  138   22.11)
(smt.stats   59   8175 123244 421476  4212/3868/277    8861/591    39  141   22.20)
(smt.stats   60   8336 123776 422624  4534/3979/277    9062/658    39  141   22.40)
ramon: poll                 wall=4.000s usage=3.958s mem=23756KiB load=1.00 rootload=1.00
(smt.stats   61   8513 124415 426800  5088/4459/278    9279/712    39  141   22.59)
(smt.stats   62   8707 126371 446395  5174/4879/278    9501/712    39  141   22.59)
(smt.stats   63   8920 129750 469782  5230/4951/279    9777/816    40  146   22.59)
(smt.stats   64   9154 134390 488716  5306/4990/280   10061/882    41  146   22.59)
(smt.stats   65   9411 140469 530441  5324/5063/281   10473/882    41  146   22.68)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   66   9512 142436 538225  5344/5081/281   10592/1032    42  149   22.68)
(smt.stats   67   9623 144108 551430  5386/5092/281   10716/1032    42  149   22.78)
ramon: poll                 wall=5.000s usage=4.958s mem=24152KiB load=1.00 rootload=1.00
(smt.stats   68   9745 146025 564818  5445/5152/281   10920/1032    42  149   22.78)
(smt.stats   69   9879 147842 582108  5476/5200/281   11125/1033    42  149   22.78)
(smt.delete-inactive-clauses  :num-deleted-clauses 313)
(smt.stats   70  10026 149163 590764  5494/5223/282   11003/1169    43  153   22.78)
(smt.stats   71  10187 153855 608357  5574/5244/282   11207/1170    43  153   22.78)
ramon: poll                 wall=6.000s usage=5.958s mem=24292KiB load=1.00 rootload=1.00
(smt.stats   72  10364 156898 621799  5803/5321/282   11454/1190    43  153   22.97)
(smt.stats   73  10558 159040 637888  5917/5599/282   11682/1192    43  153   22.97)
(smt.stats   74  10771 163610 671793  5952/5667/282   11948/1192    43  153   23.06)
(smt.stats   75  11005 166666 702155  6010/5730/282   12264/1192    43  153   23.06)
(smt.stats   76  11262 169071 746207  6012/5751/282   12535/1192    43  153   23.06)
(smt.stats   77  11544 172813 774296  6047/5786/284   12863/1418    44  159   23.16)
(smt.stats   78  11645 173038 779169  6051/5789/284   12966/1418    44  159   23.16)
(smt.stats   79  11756 173212 784242  6051/5789/284   13078/1433    45  159   23.16)
(smt.stats   80  11878 173493 788122  6051/5789/284   13200/1433    45  159   23.16)
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818194
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818196
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818196
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818194
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818196
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818194
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818196
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818200
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818240
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 0 := 4294967295&16072818193
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818194
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818194
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818194
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818194
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818194
(smt.stats   81  12012 176090 805216  6143/5801/284   13440/1435    45  159   23.26)
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 4 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 8 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 4 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 6 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 4 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 8 := 4294967295&16072818208
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818210
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818242
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818306
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818242
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818242
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818242
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072818306
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072817794
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072817794
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072817794
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072817794
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072817922
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072817666
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072817666
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072806402
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072810498
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072810498
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072806658
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072806658
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072806658
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 2 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072808962
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 770 := 4294967295&16072818690
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 770 := 4294967295&16072818690
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072818690
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072806914
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072786434
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 514 := 4294967295&16072770050
(smt.stats   82  12159 178665 829083  6430/5876/351   13788/1498    46  171   23.77)
ramon: poll                 wall=7.000s usage=6.957s mem=25088KiB load=1.00 rootload=0.99
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 640 := 4294967295&16072804034
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 642 := 4294967295&16072804034
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 640 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 640 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 642 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1666 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1666 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1666 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1670 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1670 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1666 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1668 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1670 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1666 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1666 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1664 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1664 := 4294967295&16072803970
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&16072803842
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&16072787458
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&16072787714
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&16072771074
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&16072771074
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&16072771074
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&16072771074
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&4295099906
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&4294968834
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 144047022649902594 := 3306571268336 << 32
band: (band[41] (if (= #325 63) 0 (if #555 1 #783)) (shl[64] (* 2 #308) (mod #798 64))) 1538 := 4294967295&4294968834
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 40 #790 #794) 64)) 144047022649902594 := 3306571268336 << 32
(smt.stats   83  12320 181602 857846  6751/6447/478   14276/1570    47  195   24.06)
(smt.stats   84  12497 182288 863157  7289/6577/488   14649/1699    48  209   24.25)
(smt.stats   85  12691 187854 895688  7324/7061/488   15459/1699    48  209   24.44)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations          :lemmas           :deletions     )
(smt.stats   86  12904 200437 969137  7332/7069/488   16437/2227    49  209   24.54)
(smt.stats   87  13138 206769 1016611  7354/7089/491   17359/2864    50  220   24.97)
ramon: poll                 wall=8.000s usage=7.957s mem=26780KiB load=1.00 rootload=1.00
(smt.stats   88  13395 215379 1055775  7823/7372/493   18114/3173    51  230   25.67)
(smt.stats   89  13677 222268 1109968  8100/7710/493   18650/3236    52  230   25.96)
(smt.stats   90  13987 232566 1199858  8138/7798/498   20257/3379    54  265   26.06)
ramon: poll                 wall=9.000s usage=8.957s mem=27596KiB load=1.00 rootload=1.00
(smt.stats   91  14088 236341 1230298  8243/7845/499   21038/3380    54  265   26.15)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   92  14199 238008 1244941  8483/7903/499   21269/3380    54  265   26.25)
(smt.stats   93  14321 240824 1285847  8703/8145/499   21632/3575    55  277   26.44)
(smt.stats   94  14455 244240 1311158  8774/8421/499   22060/3575    55  277   26.44)
ramon: poll                 wall=10.000s usage=9.957s mem=28052KiB load=1.00 rootload=1.00
(smt.stats   95  14602 251374 1346061  8825/8437/499   22670/3583    55  277   26.53)
(smt.stats   96  14763 260323 1416182  9000/8485/499   23486/3592    55  277   26.72)
(smt.stats   97  14940 267301 1476260  9099/8754/500   24530/4121    56  279   26.82)
(smt.delete-inactive-clauses  :num-deleted-clauses 83)
ramon: poll                 wall=11.005s usage=10.961s mem=28428KiB load=1.00 rootload=1.01
(smt.stats   98  15134 274951 1496134  9182/8769/500   25144/4122    56  279   26.91)
(smt.stats   99  15347 287072 1599227  9227/8879/501   26222/4123    56  279   27.01)
ramon: poll                 wall=12.000s usage=11.956s mem=28792KiB load=1.00 rootload=0.99
(smt.stats  100  15581 297060 1700027  9306/8904/501   28523/4450    57  282   27.42)
(smt.stats  101  15838 314430 1856625  9330/8982/503   29435/4702    59  295   27.52)
(smt.stats  102  16120 325167 1939851  9367/9012/506   31085/5032    60  339   27.81)
ramon: poll                 wall=13.000s usage=12.956s mem=29352KiB load=1.00 rootload=1.00
(smt.stats  103  16430 336104 2032700  9533/9184/509   32137/5109    61  421   28.20)
ramon: poll                 wall=14.000s usage=13.956s mem=29956KiB load=1.00 rootload=1.00
(smt.stats  104  16770 346638 2077688  9684/9212/511   33218/5113    61  421   28.30)
(smt.stats  105  16871 348788 2100724  9738/9385/511   33877/5113    61  421   28.39)
(smt.stats  106  16982 352966 2134948  9768/9392/511   34228/5586    62  450   28.49)
(smt.stats  107  17104 356340 2158341  9805/9432/511   34504/5587    62  450   28.49)
(smt.stats  108  17238 359171 2187071  9822/9469/511   34687/5587    62  450   28.87)
(smt.stats  109  17385 361323 2254124  9842/9489/511   34929/5587    62  450   28.87)
(smt.stats  110  17546 367018 2284482  9853/9499/514   35346/5651    63  451   28.97)
ramon: poll                 wall=15.000s usage=14.956s mem=30612KiB load=1.00 rootload=1.00
(smt.stats  111  17723 373458 2317599 10075/9504/514   35880/5652    63  451   29.06)
ramon: poll                 wall=16.000s usage=15.956s mem=30788KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units            :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats  112  17917 379824 2362259 10287/9760/514   36559/5653    63  451   29.16)
(smt.stats  113  18130 389818 2460100 10323/9969/514   37845/5765    64  453   29.44)
ramon: poll                 wall=17.000s usage=16.954s mem=31196KiB load=1.00 rootload=1.00
(smt.stats  114  18364 402820 2531546 10410/10056/514   39538/5765    64  453   29.54)
(smt.stats  115  18621 412005 2606440 10531/10177/520   40557/6393    65  470   29.73)
ramon: poll                 wall=18.000s usage=17.954s mem=31460KiB load=1.00 rootload=1.00
(smt.stats  116  18903 422757 2716351 10584/10184/521   41760/6677    66  478   29.86)
(smt.stats  117  19213 429688 2792116 10599/10244/521   43121/6677    66  478   30.06)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats  118  19553 436928 2885273 10677/10257/521   44624/6680    66  478   30.15)
ramon: poll                 wall=19.000s usage=18.953s mem=31748KiB load=1.00 rootload=1.00
(smt.stats  119  19926 451289 3061263 10904/10475/527   45793/7218    68  527   30.34)
(smt.delete-inactive-clauses  :num-deleted-clauses 3476)
(smt.stats  120  20027 452394 3080781 10904/10549/527   42942/7218    68  527   30.34)
(smt.stats  121  20138 452616 3088967 10904/10549/527   43101/7218    68  527   30.34)
ramon: poll                 wall=20.000s usage=19.953s mem=31920KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 18:33:33 2024
ramon: root.execname        z3
ramon: root.utime           19.980s
ramon: root.stime           0.020s
ramon: group.total          20.004s
ramon: group.utime          19.984s
ramon: group.stime          0.020s
ramon: group.mempeak        32176KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.051s
ramon: loadavg              1.00
