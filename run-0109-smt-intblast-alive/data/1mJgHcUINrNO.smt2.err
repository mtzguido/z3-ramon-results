ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:20:20 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         43051 MiB
ramon: sys.mem.avail        61716 MiB
ramon: sys.nprocs           1361
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/1mJgHcUINrNO.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2762373
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 4096&1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 4096&1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 4096&1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370496 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370496 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370496 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 8191 := 2251799813685249 << 13
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 8192 := 4503599627370498 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 8191 := 2251799813685249 << 13
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370496 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1 := 2251799813685249 << 13
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 1 := 4503599627370498 << 12
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1 := 2251799813685249 << 13
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4095 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4096 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4095 := 4096&8192
(smt.stats    0    101   2635    356  1343/1189/114      90/9     5   18   19.15)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4094 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 8 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 16 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 32 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 64 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 128 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 256 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 512 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1024 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2048 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1024 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2048 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 1 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4096 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4096 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4095 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4094 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 4 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 8 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 16 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 32 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 64 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 128 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 256 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 260 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 260 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 260 := 4096&8192
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 4096&8192
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 258 := 4096&8192
(smt.stats    1    202   5141   1213  1795/1634/234     276/82     9   52   19.84)
(smt.stats    2    313   8856   2731  2012/1692/234     448/111     9   52   19.94)
(smt.stats    3    414   9464   3617  2711/2043/234     546/173     9   52   20.13)
(smt.stats    4    525  12117   7926  2968/2716/241     676/204    12   63   20.23)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&4504699407499282
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 4504699407499284 := 2252349703749641 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&4504699407499282
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 4504699407499284 := 2252349703749641 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 1&4504699407503358
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&4785658790948862
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 2392829410140160 := 2392829395474431 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&4785658790940670
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 1 := 1&4785658790940670
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&562949953425406
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 1 := 1&562949953425406
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 1&562949953425406
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 1 := 1&562949953425406
(smt.stats    5    647  16589  11675  3058/2800/263     768/259    15  127   20.32)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    748  20576  14369  3100/2837/266     870/274    17  134   20.42)
(smt.stats    7    859  26439  20517  3148/2870/266     990/274    17  134   20.52)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 3 := 140737488355328&4504699407503359
(smt.stats    8    981  28617  24816  3192/2922/273    1123/288    18  140   20.61)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 36028797018963968&4095
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 36028797018963968&4095
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 36028797018963968&4095
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 4095 := 2305843009213693950 << 55
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 36028797018963968&4095
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 4095 := 2305843009213689858 << 55
(smt.stats    9   1115  31738  32114  3281/2938/278    1452/301    20  149   20.81)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&504403158265491454
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&504403158265491454
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&432345564227571710
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 432345564227571710 := 2305843009213690882 << 54
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&432345564227571710
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 432345564227571710 := 2305843009213690882 << 54
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&288230376151715838
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 288230376151715838 := 2305843009213690888 << 54
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 18014398509481984&288230376151715838
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 288230376151715838 := 2305843009213690888 << 54
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&288230376151715838
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 288230376151715838 := 2305843009213690882 << 56
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&108086391056895998
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&108086391056895998
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&108086391056895998
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 8192 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 16384 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 32768 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 65536 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 131072 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 262144 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 524288 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1048576 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2097152 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 4194304 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 8388608 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 16777216 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 33554432 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 67108864 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217728 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 268435456 := 72057594037927936&72057594037932030
(smt.stats   10   1216  33753  35520  3535/3029/288    1603/307    20  149   21.42)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 524288 := 72057594037927936&90071992547405822
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 524288 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217744 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217744 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217792 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217736 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217760 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217760 := 72057594037927936&72057594037932030
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 134217792 := 72057594037927936&72057594037932030
(smt.stats   11   1327  37361  44340  3569/3285/429    1789/447    22  190   21.42)
(smt.stats   12   1449  41788  52399  3646/3365/439    1952/510    24  202   21.52)
(smt.stats   13   1583  47374  66158  3665/3384/441    2221/596    26  218   21.61)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606846975
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 9223372036854775807 := 2305843009213692416 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606846975
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 9223372036854775807 := 2305843009213692416 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606846975
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 2305843009213693951 := 2305843009213692416 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606846975
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 2305843009213693951 := 2305843009213692416 << 1
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 2 := 2&1152921504606843904
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 2&1152921504606843904
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1152921504606843907 := 1152921504606846208 << 2
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 2&1152921504606843904
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1152921504606843907 := 1152921504606846208 << 2
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 2&1152921504606843904
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 1152921504606843907 := 1152921504606846208 << 2
(smt.stats   14   1730  52642  74720  3733/3395/441    2407/600    26  218   21.72)
(smt.stats   15   1831  56481  79859  3851/3546/457    2511/626    28  224   21.90)
(smt.stats   16   1942  59999  91383  3881/3564/466    2647/684    30  247   21.99)
(smt.stats   17   2064  62584  99794  3979/3633/472    2820/705    31  263   22.09)
ramon: poll                 wall=1.002s usage=1.001s mem=23996KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   18   2198  62992 100261  4033/3695/472    2962/722    31  263   23.04)
(smt.stats   19   2345  65227 107164  4598/4101/474    3194/788    32  266   22.94)
(smt.stats   20   2506  66272 110729  4738/4362/474    3370/801    32  266   23.23)
(smt.stats   21   2607  67519 114912  5223/4754/475    3504/852    33  267   23.23)
ramon: poll                 wall=2.000s usage=1.999s mem=24868KiB load=1.00 rootload=1.00
(smt.stats   22   2718  68039 115958  5282/4940/475    3619/859    33  267   23.42)
(smt.stats   23   2840  68807 117684  5684/5268/475    3777/877    33  267   23.42)
(smt.stats   24   2974  69116 118491  5864/5518/475    3916/882    33  267   23.70)
(smt.stats   25   3121  71857 128734  6354/5917/475    4080/887    33  267   23.61)
ramon: poll                 wall=3.000s usage=2.998s mem=25604KiB load=1.00 rootload=1.00
(smt.stats   26   3282  76912 152443  6402/6055/475    4360/889    33  267   23.60)
(smt.stats   27   3459  83164 177588  6461/6098/475    4698/891    33  267   23.70)
(smt.stats   28   3560  85259 190189  6485/6135/476    4962/1134    34  269   23.79)
(smt.stats   29   3671  87277 201213  6544/6154/476    5240/1135    34  269   23.79)
(smt.stats   30   3793  89140 206759  6666/6235/476    5420/1136    34  269   23.79)
(smt.stats   31   3927  90658 224829  6800/6327/476    5582/1140    34  269   23.89)
(smt.stats   32   4074  94556 245948  6849/6492/478    5870/1407    35  273   23.98)
(smt.stats   33   4235  98189 260011  6977/6532/478    6214/1455    36  274   24.15)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   34   4412 102635 291165  7121/6693/478    6505/1458    36  274   24.15)
ramon: poll                 wall=4.000s usage=3.998s mem=25716KiB load=1.00 rootload=1.00
(smt.stats   35   4612 112275 337223  7156/6805/483    7101/1655    38  288   24.25)
(smt.stats   36   4713 116553 362269  7179/6808/483    7437/1658    38  288   24.25)
(smt.stats   37   4824 118225 372682  7218/6835/483    7561/1658    38  288   24.34)
(smt.stats   38   4946 121293 389946  7241/6890/485    7807/1808    39  300   24.44)
(smt.delete-inactive-clauses  :num-deleted-clauses 39)
(smt.stats   39   5080 125423 402695  7266/6899/485    7913/1810    39  300   24.44)
(smt.stats   40   5227 129332 415415  7385/6937/485    8086/1859    40  302   24.44)
(smt.stats   41   5388 134598 428729  7551/7077/485    8273/1866    40  302   24.53)
(smt.stats   42   5565 140562 452264  7685/7334/486    8703/2028    41  314   24.53)
(smt.stats   43   5759 148398 474420  7800/7340/486    8991/2031    41  314   24.63)
ramon: poll                 wall=5.000s usage=4.998s mem=26112KiB load=1.00 rootload=1.00
(smt.stats   44   5972 156257 513320  7846/7461/487    9450/2046    42  317   24.72)
(smt.stats   45   6073 158676 531473  7890/7514/487    9671/2046    42  317   24.82)
(smt.stats   46   6184 162153 549287  7969/7551/488    9817/2150    43  321   24.82)
(smt.stats   47   6306 166564 580905  8050/7645/488    9950/2150    43  321   24.92)
(smt.stats   48   6440 170991 608837  8150/7729/488   10164/2150    43  321   24.92)
(smt.stats   49   6587 175289 631357  8262/7821/488   10333/2151    43  321   25.09)
(smt.stats   50   6748 180673 659767  8324/7920/488   10522/2151    43  321   25.23)
ramon: poll                 wall=6.000s usage=5.998s mem=26688KiB load=1.00 rootload=0.99
(smt.stats   51   6925 183475 685696  8436/8010/488   10722/2152    43  321   25.23)
(smt.stats   52   7119 187438 707201  8491/8128/488   10940/2152    43  321   25.23)
(smt.stats   53   7332 195383 743467  8555/8148/488   11226/2155    43  321   25.23)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   54   7566 201223 775437  8673/8297/489   11884/2367    44  323   25.42)
(smt.stats   55   7667 202964 783143  8796/8389/490   12025/2370    44  323   25.42)
(smt.stats   56   7778 206511 818093  8870/8445/490   12169/2377    44  323   25.52)
ramon: poll                 wall=7.000s usage=6.998s mem=27140KiB load=1.00 rootload=1.00
(smt.stats   57   7900 208399 835236  8988/8559/490   12311/2481    45  324   25.61)
(smt.stats   58   8034 211598 855095  9098/8659/490   12450/2491    45  324   25.71)
(smt.stats   59   8181 214478 876600  9137/8754/490   12583/2494    45  324   25.71)
(smt.stats   60   8342 218526 890391  9148/8777/490   12783/2494    45  324   25.80)
(smt.stats   61   8519 224564 923508  9158/8783/490   13091/2495    45  324   25.80)
(smt.stats   62   8713 230137 947127  9173/8795/491   13455/2576    46  325   25.80)
(smt.stats   63   8926 237569 996241  9252/8817/491   13722/2577    46  325   25.90)
ramon: poll                 wall=8.000s usage=7.998s mem=27600KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   64   9160 243411 1045688  9303/8903/493   14170/2737    47  327   26.08)
(smt.stats   65   9417 249828 1101180  9324/8945/493   14664/2760    48  331   26.18)
(smt.stats   66   9518 251894 1118575  9332/8961/493   14822/2760    48  331   26.27)
(smt.stats   67   9629 253611 1135976  9332/8961/493   14942/2760    48  331   26.27)
(smt.stats   68   9751 259488 1176125  9347/8976/495   15051/2924    49  347   26.27)
(smt.stats   69   9885 261430 1191240  9354/8983/495   15218/2924    49  347   26.27)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10032 264546 1217725  9359/8986/496   15376/2924    49  347   26.27)
(smt.stats   71  10193 267884 1244079  9384/8992/496   15546/2933    50  350   26.37)
ramon: poll                 wall=9.000s usage=8.997s mem=27988KiB load=1.00 rootload=1.00
(smt.stats   72  10370 270127 1254857  9500/9026/496   15779/2937    50  350   26.46)
(smt.stats   73  10564 274194 1293459  9541/9157/497   16020/2985    51  351   26.46)
(smt.stats   74  10777 282988 1355569  9649/9178/498   16274/2994    52  355   26.56)
(smt.stats   75  11011 289381 1400472  9704/9299/498   16603/2995    52  355   26.56)
ramon: poll                 wall=10.000s usage=9.997s mem=28220KiB load=1.00 rootload=1.00
(smt.stats   76  11268 295126 1442615  9769/9337/498   16906/2996    52  355   26.69)
(smt.stats   77  11550 300684 1484346  9831/9402/498   17241/2997    52  355   26.69)
(smt.stats   78  11651 303024 1507095  9889/9469/498   17352/2997    52  355   27.16)
(smt.stats   79  11762 304197 1512774  9980/9530/498   17474/2997    52  355   27.26)
(smt.stats   80  11884 310428 1547632  9998/9625/498   17684/2997    52  355   27.26)
(smt.stats   81  12018 312677 1576745 10015/9633/499   17873/3097    53  359   27.35)
(smt.stats   82  12165 316492 1617374 10064/9659/499   18025/3097    53  359   27.35)
(smt.stats   83  12326 321908 1642814 10109/9706/499   18241/3098    53  359   27.35)
ramon: poll                 wall=11.000s usage=10.997s mem=28908KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units            :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   84  12503 327262 1676591 10139/9760/499   18457/3098    53  359   27.45)
(smt.stats   85  12697 333574 1710870 10141/9770/499   18726/3098    53  359   27.55)
(smt.stats   86  12910 340309 1774720 10180/9775/501   18985/3171    54  364   27.55)
(smt.stats   87  13144 343175 1798669 10195/9813/501   19224/3171    54  364   27.55)
(smt.stats   88  13401 347666 1840244 10204/9827/501   19524/3171    54  364   27.64)
(smt.stats   89  13683 353203 1892906 10211/9840/501   19933/3171    54  364   27.74)
ramon: poll                 wall=12.000s usage=11.997s mem=29252KiB load=1.00 rootload=1.00
(smt.stats   90  13993 363988 1948231 10272/9842/501   20389/3172    54  364   27.83)
(smt.stats   91  14094 366833 1977044 10290/9915/501   20518/3172    54  364   27.83)
(smt.stats   92  14205 369920 1999746 10305/9920/501   20637/3172    54  364   27.83)
(smt.stats   93  14327 373554 2021498 10337/9940/501   20761/3172    54  364   27.83)
(smt.stats   94  14461 376825 2050470 10365/9994/502   20920/3290    55  367   27.83)
(smt.stats   95  14608 380029 2086144 10369/9994/502   21090/3290    55  367   27.83)
(smt.stats   96  14769 384045 2130767 10394/9999/502   21264/3291    55  367   27.93)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   97  14946 388871 2165800 10405/10030/502   21664/3291    55  367   27.93)
(smt.delete-inactive-clauses  :num-deleted-clauses 2)
ramon: poll                 wall=13.000s usage=12.997s mem=29548KiB load=1.00 rootload=1.00
(smt.stats   98  15140 391731 2194838 10440/10042/502   21859/3291    55  367   28.02)
(smt.stats   99  15353 393819 2213687 10513/10083/502   22077/3291    55  367   28.02)
(smt.stats  100  15587 396925 2236255 10625/10148/502   22324/3291    55  367   28.02)
(smt.stats  101  15844 401365 2273344 10738/10262/502   22592/3292    55  367   28.11)
ramon: poll                 wall=14.000s usage=13.996s mem=30184KiB load=1.00 rootload=1.00
(smt.stats  102  16126 405588 2319523 10841/10390/502   22926/3293    55  367   28.21)
(smt.stats  103  16436 410703 2362386 10952/10581/504   23319/3343    56  369   28.21)
ramon: poll                 wall=15.000s usage=14.996s mem=30192KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.982s mem=30200KiB load=0.99 rootload=0.99
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 4096&360287970189787136
(smt.stats  104  16776 417655 2406879 11224/10598/504   23881/3344    56  369   28.40)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 1 := 4096&409927646085005312
(smt.stats  105  16877 419614 2414734 11264/10875/504   23994/3400    57  379   28.40)
(smt.stats  106  16988 421225 2425177 11269/10898/504   24204/3400    57  379   28.59)
(smt.stats  107  17110 423247 2461481 11287/10910/504   24359/3400    57  379   28.50)
(smt.stats  108  17244 427267 2492703 11318/10931/504   24489/3401    57  379   28.40)
(smt.stats  109  17391 431158 2537256 11365/10974/504   24650/3405    57  379   28.40)
(smt.stats  110  17552 434487 2555452 11376/11003/506   25094/3484    58  400   28.50)
(smt.stats  111  17729 439510 2570081 11428/11004/506   25489/3487    58  400   28.59)
(smt.stats  112  17923 441262 2591046 11443/11070/506   25863/3487    58  400   28.59)
ramon: poll                 wall=17.000s usage=16.982s mem=30344KiB load=1.00 rootload=1.00
(smt.stats  113  18136 446021 2629131 11480/11088/506   26180/3488    58  400   28.69)
(smt.stats  114  18370 450329 2662073 11587/11138/506   26472/3488    58  400   28.69)
(smt.stats  115  18627 454433 2695009 11724/11264/506   26762/3488    58  400   28.69)
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 16 := 32&936748722493063203
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&936748722493063771
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 3242591731706757723 := 1622087514225377848 << 5
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&936748722493063771
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 3242591731706757723 := 1622087514225377848 << 5
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&936748722493063769
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 3242591731706757721 := 1622087514225377848 << 5
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&936748722493063769
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 3242591731706757721 := 1622087514225377848 << 5
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&936748722493063769
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 59 #828 #832) 64)) 3242591731706757721 := 1622087514225377848 << 5
ramon: poll                 wall=18.000s usage=17.982s mem=30584KiB load=1.00 rootload=0.99
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 8 := 32&72624976668214720
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 8 := 32&72624976668214720
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&72624976668214720
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 72624976668214718 := 613624314582828311 << 6
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&72624976668214720
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 72624976668214718 := 613624314582828311 << 6
(smt.stats  116  18909 459698 2729584 11949/11381/506   27195/3505    58  400   28.98)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats  117  19219 464291 2750951 12089/11596/521   27631/3660    59  403   29.92)
(smt.stats  118  19559 469080 2788555 12163/11775/522   28069/3663    59  403   30.01)
ramon: poll                 wall=19.002s usage=18.984s mem=31680KiB load=1.00 rootload=1.00
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&180143985094819840
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 180143985094819898 := 867505878222241792 << 6
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&180143985094819840
shl: (shl[60] (bv2int %0) (+ 60 (* 1152921504606846975 #105))) 180143985094819898 := 867505878222241792 << 6
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&180143985094819840
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 24 := 32&180143985094819840
band: (band[60] (if (= #419 63) 1 (if #611 2 #821)) (shl[64] (* 2 #402) (mod #836 64))) 0 := 32&180143985094819840
band: (band[60] (if (= #109 59) 1 (if #633 2 #749)) (shl[60] (bv2int %0) (+ 60 #752))) 24 := 32&180143985094819840
(smt.stats  119  19932 481496 2831785 12264/11804/523   28602/3778    60  407   30.11)
(smt.delete-inactive-clauses  :num-deleted-clauses 256)
(smt.stats  120  20033 483449 2850988 12270/11888/529   28507/3778    60  407   30.11)
(smt.stats  121  20144 484366 2860011 12273/11892/529   28615/3803    61  410   30.11)
(smt.stats  122  20266 486677 2889396 12276/11895/529   28736/3803    61  410   30.11)
(smt.stats  123  20400 492883 2942222 12276/11895/529   28870/3803    61  410   30.11)
(smt.stats  124  20547 495869 2959915 12290/11909/531   29082/3811    62  411   30.20)
(smt.stats  125  20708 502238 2993559 12318/11929/531   29237/3811    62  411   30.20)
(smt.stats  126  20885 509339 3038575 12342/11957/531   29487/3811    62  411   30.20)
(smt.stats  127  21079 514663 3080880 12374/11978/531   29831/3835    63  433   30.20)
ramon: poll                 wall=20.000s usage=19.982s mem=31868KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 14:20:40 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.010s
ramon: group.total          19.990s
ramon: group.utime          19.974s
ramon: group.stime          0.016s
ramon: group.mempeak        32376KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.009s
ramon: loadavg              1.00
