ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 19:01:07 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         24717 MiB
ramon: sys.mem.avail        61750 MiB
ramon: sys.nprocs           1393
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/pY3mepThraPN.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             157146
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   2906    971  1013/912/92      94/0     5   13   18.98)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 115 := 4095&115
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 115 := 116 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 115 := 4095&115
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 115 := 116 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 185 := 4095&185
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 185 := 186 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 45 := 4095&45
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 45 := 46 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1 := 4095&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 1 := 46 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&1
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&1
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&2
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4095 := 4095&4095
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 4095 := 68719476676 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 45 := 4095&45
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 45 := 46 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 45 := 4095&45
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 45 := 46 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&94208
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 22 := 23 << 12
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&94208
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 22 := 23 << 12
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&94208
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 22 := 23 << 12
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1 := 4095&4096
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4094 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 8 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&20480
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 8388612 := 8388613 << 12
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4092 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4088 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4080 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4064 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4032 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3968 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3840 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3584 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1056 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3600 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3600 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3593 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3592 := 4095&20480
(smt.stats    1    202   3818   2686  1580/1311/127     281/8     9   21   19.56)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4032 := 4095&20480
(smt.stats    2    313   5722   6841  1696/1549/194     514/73    11   35   19.56)
(smt.stats    3    414   8189  11129  1989/1764/197     788/126    13   38   19.65)
(smt.stats    4    525   9597  15335  2062/1880/209     965/171    16   59   19.75)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2049
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2050
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2176
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2064
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2192
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2050
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2050
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2176
(smt.stats    5    647  11224  18082  2227/1940/221    1205/218    18   74   19.98)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2064
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2070
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2070
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2070
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2070
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1050 := 1073741823&2066
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1050 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1050 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 26 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 26 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 26 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 26 := 1073741823&2074
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations          :lemmas          :deletions    )
(smt.stats    6    748  13528  23015  2332/2116/261    1433/291    20   80   20.27)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 16777260 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
(smt.stats    7    859  15403  26994  2417/2204/279    1582/312    22   89   20.36)
(smt.stats    8    981  18346  32625  2487/2262/279    1889/313    22   89   20.55)
(smt.stats    9   1115  22237  44017  2549/2317/280    2416/358    23  107   20.66)
(smt.stats   10   1216  25249  50472  2589/2336/280    2590/359    23  107   20.85)
(smt.stats   11   1327  28951  56127  2645/2369/281    2844/387    24  110   21.04)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 848 := 2047&19327352832
(smt.stats   12   1449  31601  63476  2702/2441/281    3175/389    24  110   21.04)
(smt.stats   13   1583  34792  72970  2711/2476/291    3473/619    25  114   21.04)
(smt.stats   14   1730  37497  86111  2722/2487/291    3682/688    26  146   21.15)
(smt.stats   15   1831  39473  91244  2725/2490/291    3810/688    26  146   21.15)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   16   1942  43162 107227  2726/2491/292    3996/710    27  167   21.25)
(smt.stats   17   2065  46380 115563  2794/2503/294    4632/737    28  177   21.25)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&224
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&224
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&160
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&12480
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359750848 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&12480
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359750848 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&12480
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359750848 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&9152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359747520 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&9152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359747520 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 34359738367 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 34359738367 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 17179869240 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 17179869240 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 17179869240 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 1 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 63 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 62 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 60 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 56 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 48 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 32 := 63&3520
(smt.stats   18   2199  48293 120933  3003/2565/294    4927/741    28  177   21.55)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 1 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 2 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 4 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 8 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 16 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 2 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 4 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 8 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 5 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 4 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 2 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 8 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 16 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 32 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4 := 63&3520
(smt.stats   19   2346  51598 132405  3082/2827/371    5254/770    29  187   21.74)
ramon: poll                 wall=1.000s usage=0.999s mem=23104KiB load=1.00 rootload=0.98
(smt.stats   20   2507  54742 140848  3132/2879/372    5502/811    30  201   21.84)
(smt.stats   21   2608  59139 149947  3146/2887/374    5758/812    30  201   21.96)
(smt.stats   22   2719  63058 158523  3269/2945/375    6119/851    31  217   22.16)
(smt.stats   23   2841  65951 168031  3519/3021/375    6362/852    31  217   22.46)
(smt.stats   24   2975  69623 182434  3601/3334/382    6961/930    33  223   22.55)
(smt.stats   25   3122  74846 195359  3616/3343/382    7589/934    33  223   22.65)
ramon: poll                 wall=2.000s usage=1.998s mem=24068KiB load=1.00 rootload=1.00
(smt.stats   26   3283  78467 201179  3794/3352/382    7930/992    34  227   22.84)
(smt.stats   27   3460  81454 212626  4006/3627/386    9041/995    34  227   23.03)
(smt.stats   28   3561  84380 222915  4107/3776/387    9891/1031    35  242   23.22)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   29   3672  87460 232052  4273/3868/387   10296/1038    35  242   23.22)
(smt.stats   30   3794  91383 249236  4422/4042/387   10763/1180    36  246   23.32)
ramon: poll                 wall=3.000s usage=2.997s mem=24720KiB load=1.00 rootload=1.00
(smt.stats   31   3928  96266 271448  4451/4175/387   11738/1180    36  246   23.42)
(smt.stats   32   4075 101664 284259  4493/4199/387   12694/1181    36  246   23.61)
(smt.stats   33   4236 108060 317918  4593/4264/388   13112/1381    37  258   23.71)
(smt.stats   34   4413 112339 339093  4861/4595/389   14062/1459    38  261   23.90)
ramon: poll                 wall=4.000s usage=3.996s mem=25256KiB load=1.00 rootload=1.00
(smt.stats   35   4607 118342 370491  4882/4600/389   15092/1461    38  261   24.10)
(smt.stats   36   4708 120730 382659  4937/4642/389   15809/1462    38  261   24.10)
(smt.stats   37   4819 122744 390764  5058/4706/389   16236/1463    38  261   24.30)
(smt.stats   38   4941 125462 408661  5242/4857/389   17025/1464    38  261   24.40)
(smt.delete-inactive-clauses  :num-deleted-clauses 22)
(smt.stats   39   5075 129644 425183  5311/4987/390   17997/1730    39  263   24.49)
ramon: poll                 wall=5.000s usage=4.995s mem=25892KiB load=1.00 rootload=1.00
(smt.stats   40   5222 136028 446595  5422/5055/391   18921/1734    39  263   24.69)
(smt.stats   41   5383 142535 477422  5616/5174/391   19623/1930    40  266   24.78)
(smt.stats   42   5560 147423 499427  5717/5371/391   21037/1931    40  266   25.07)
ramon: poll                 wall=6.000s usage=5.995s mem=26616KiB load=1.00 rootload=1.00
(smt.stats   43   5754 153337 528331  5927/5465/391   22272/1937    40  266   25.26)
(smt.stats   44   5967 158736 554002  6130/5864/392   23905/2039    41  268   25.55)
(smt.stats   45   6068 160864 575779  6141/5875/394   25080/2039    41  268   25.65)
(smt.stats   46   6179 164326 597992  6260/5900/394   25465/2039    41  268   25.74)
ramon: poll                 wall=7.000s usage=6.994s mem=27272KiB load=1.00 rootload=1.00
(smt.stats   47   6301 168300 619328  6331/6028/394   25829/2039    41  268   25.74)
(smt.stats   48   6435 169845 635338  6477/6058/394   26364/2337    42  270   25.93)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   49   6582 174028 656779  6494/6216/394   27181/2337    42  270   26.03)
(smt.stats   50   6743 180454 678243  6605/6224/394   27839/2338    42  270   26.34)
ramon: poll                 wall=8.000s usage=7.993s mem=27692KiB load=1.00 rootload=1.00
(smt.stats   51   6920 184966 717163  6822/6370/394   28389/2340    42  270   26.34)
(smt.stats   52   7114 190147 767794  6896/6582/394   29248/2341    42  270   26.44)
(smt.stats   53   7327 197829 826067  7123/6631/394   29988/2353    42  270   26.72)
ramon: poll                 wall=9.000s usage=8.993s mem=28200KiB load=1.00 rootload=1.00
(smt.stats   54   7561 201354 858629  7348/6877/394   31430/2361    42  270   26.91)
(smt.stats   55   7662 203987 875001  7449/7095/394   31859/2361    42  270   26.91)
(smt.stats   56   7773 208246 906200  7487/7194/394   32617/2361    42  270   27.01)
ramon: poll                 wall=10.000s usage=9.992s mem=28568KiB load=1.00 rootload=0.99
(smt.stats   57   7895 211931 922931  7559/7203/394   33085/2362    42  270   27.10)
(smt.stats   58   8029 215793 938075  7600/7301/394   33666/2363    42  270   27.20)
(smt.stats   59   8176 219933 971383  7744/7331/394   34328/2364    42  270   27.29)
ramon: poll                 wall=11.000s usage=10.991s mem=28812KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   60   8337 225584 1001305  7861/7487/396   34713/2874    43  276   27.29)
(smt.stats   61   8514 232244 1037084  7869/7580/396   35281/2874    43  276   27.40)
(smt.stats   62   8708 246564 1063844  7870/7581/396   35525/2874    43  276   27.40)
(smt.stats   63   8921 261360 1127483  7886/7583/396   36240/2875    43  276   27.49)
ramon: poll                 wall=12.000s usage=11.991s mem=29076KiB load=1.00 rootload=1.00
(smt.stats   64   9155 266924 1151694  7967/7608/396   37655/2878    43  276   27.68)
(smt.stats   65   9412 276122 1190749  8210/7694/396   38791/2884    43  276   27.99)
(smt.stats   66   9513 277604 1199338  8237/7948/396   39851/2884    43  276   28.18)
(smt.stats   67   9624 283566 1227168  8237/7948/396   40114/2884    43  276   28.18)
(smt.stats   68   9746 289900 1292195  8260/7953/396   41644/2885    43  276   28.40)
ramon: poll                 wall=13.000s usage=12.990s mem=29872KiB load=1.00 rootload=1.00
(smt.stats   69   9880 295021 1338513  8291/7986/396   42798/2886    43  276   28.59)
(smt.delete-inactive-clauses  :num-deleted-clauses 1022)
(smt.stats   70  10027 298652 1357766  8322/8008/397   43207/3346    44  278   28.69)
(smt.stats   71  10188 305214 1409219  8489/8180/398   43923/3354    44  278   28.88)
ramon: poll                 wall=14.000s usage=13.989s mem=30356KiB load=1.00 rootload=1.00
(smt.stats   72  10365 310234 1445376  8587/8244/398   44967/3354    44  278   28.98)
(smt.stats   73  10559 315938 1481644  8620/8298/398   46298/3356    44  278   29.07)
(smt.stats   74  10772 321323 1516822  8766/8325/399   47627/3787    45  282   29.26)
ramon: poll                 wall=15.000s usage=14.988s mem=30712KiB load=1.00 rootload=0.99
(smt.stats   75  11006 327687 1583698  8781/8476/399   49574/3787    45  282   29.46)
(smt.stats   76  11263 345642 1671733  8783/8482/399   50191/3787    45  282   29.56)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 67108863&67122689
(smt.stats   77  11545 353085 1722958  8926/8615/400   52062/4076    46  299   29.75)
ramon: poll                 wall=16.000s usage=15.987s mem=31220KiB load=1.00 rootload=1.00
(smt.stats   78  11646 356131 1757937  8988/8631/400   52613/4079    46  299   29.75)
(smt.stats   79  11757 358828 1792386  9082/8727/400   53450/4081    46  299   29.85)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   80  11879 362833 1849574  9116/8801/400   54037/4083    46  299   29.94)
(smt.stats   81  12013 365604 1876804  9191/8829/400   54889/4085    46  299   29.94)
ramon: poll                 wall=17.000s usage=16.987s mem=31596KiB load=1.00 rootload=1.00
(smt.stats   82  12160 370337 1925181  9327/8916/400   55822/4088    46  299   30.04)
(smt.stats   83  12321 374115 1965373  9517/9072/400   56402/4090    46  299   30.14)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 512 := 34359738367&27917287424
(smt.stats   84  12498 377013 1996936  9641/9220/400   57504/4094    46  299   30.52)
(smt.stats   85  12692 383112 2071417  9724/9394/405   59091/4461    47  300   30.71)
ramon: poll                 wall=18.000s usage=17.986s mem=32308KiB load=1.00 rootload=1.00
(smt.stats   86  12905 389379 2151737  9984/9441/405   59795/4466    47  300   30.81)
(smt.stats   87  13139 394235 2185792 10202/9881/406   61136/4549    48  300   31.04)
ramon: poll                 wall=19.001s usage=18.986s mem=32704KiB load=1.00 rootload=1.00
(smt.stats   88  13396 401064 2267125 10394/9923/406   62377/4550    48  300   31.46)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   89  13678 410858 2349560 10447/10136/406   64208/4550    48  300   31.65)
ramon: poll                 wall=20.000s usage=19.984s mem=33180KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 19:01:27 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.010s
ramon: group.total          19.992s
ramon: group.utime          19.972s
ramon: group.stime          0.020s
ramon: group.mempeak        33692KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.008s
ramon: loadavg              1.00
