ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 20:32:05 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29023 MiB
ramon: sys.mem.avail        62090 MiB
ramon: sys.nprocs           1395
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/SVFBsWKu4bk3.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             424738
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   240/240     0/0  58       0    18.51   0.00)
(sat.stats    103    605    0   240/240   103/31  58       0    18.82   0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 274 :time 0.00)
(sat.stats    103    605    0   240/240   103/31  58       0    18.82   0.00)
(sat.stats    103    605    0   240/240   103/31  58       0    18.82   0.00)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 2 :time 0.00)
 (sat-probing :cost 376018.82 :time 0.00)
(sat.stats    103    605    0   242/242    39/30  58       0    18.82   0.01)
(sat.stats    163   1476    1   242/242    99/81  58       0    18.91   0.01)
(sat.stats :conflicts    :restarts     :learned/bin       :gc          :time)
(sat.stats       :decisions    :clauses/bin     :units        :memory       )
(sat.stats    166   1538    2   242/242   102/81  58       0    18.91   0.01)
(sat.stats    169   1615    3   242/242   105/81  58       0    18.91   0.01)
(sat.stats    172   1676    4   242/242   108/81  58       0    18.91   0.01)
(sat.stats    175   1734    5   242/242   111/81  58       0    18.91   0.01)
(sat.stats    178   1798    6   242/242   114/81  58       0    18.91   0.01)
(sat.stats    181   1855    7   242/242   117/81  58       0    18.91   0.01)
(sat.stats    184   1916    8   242/242   120/81  58       0    18.91   0.01)
(sat.stats    187   2007    9   242/242   123/81  58       0    18.91   0.01)
(sat.stats    190   2060   10   242/242   126/84  58       0    18.91   0.01)
(sat.stats    193   2107   11   242/242   129/87  58       0    18.91   0.01)
(sat.stats    196   2196   12   242/242   132/90  58       0    18.91   0.01)
(sat.stats :conflicts   :restarts      :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    211   2675   17   242/242   147/105  58       0    18.91   0.01)
(sat.stats    400   5671   18   243/243   336/217  58       0    19.10   0.04)
(sat.stats    512   6413   19   243/243   448/256  58       0    19.20   0.04)
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 4943 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 5959 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 6060 :time 0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 13 :cost 6413 :time 0.00)
(sat.stats    751  25264   54   249/249   551/281  73       0    19.98   0.16)
 (sat-cleaner :elim-literals 49 :elim-clauses 0 :cost 7181 :time 0.00)
 (sat-cleaner :elim-literals 43 :elim-clauses 27 :cost 7785 :time 0.00)
lshr: (lshr[54] (bv2int %0) (mod (bv2int %0) 54)) 6344 := 88 >>l 34
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 0&1048576
lshr: (lshr[64] (bv2int %0) (mod (+ #74 #713) 64)) 88 := 88 >>l 34
 (sat-cleaner :elim-literals 15 :elim-clauses 2 :cost 8651 :time 0.00)
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 1046307 := 1047009&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 994188 := 1047495&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 66 := 114&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 112 := 114&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 40 := 114&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 104 := 120&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 96 := 111&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 99264 := 172072&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 169920 := 172031&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 64512 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 149632 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 143616 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 38912 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 73728 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 4096 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 16384 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 32768 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 65536 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 131072 := 172153&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 512 := 172045&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 128 := 168589&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 512 := 168589&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 4096 := 168589&1048576
(sat.stats   1253  48574   98  7101/7069  1030/499  91       0    22.59   0.48)
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 12011 :time 0.00)
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 1024 := 167077&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 2048 := 167077&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 8267 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 60582 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 117404 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 19536 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 8 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 32 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 16896 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 64 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 128 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 256 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 36864 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 1024 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 2048 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 131072 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 8192 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 114688 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 32768 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 167077&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 65536 := 1048576&167077
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 256 := 167860&1048576
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 14263 :time 0.00)
(sat.stats   1600  54550  192 25840/25808  1519/705 331       0    25.15   0.93)
ramon: poll                 wall=1.000s usage=0.944s mem=26484KiB load=0.94 rootload=0.93
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 16993 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 17312 :time 0.00)
 (sat-cleaner :elim-literals 3 :elim-clauses 0 :cost 17711 :time 0.00)
 (sat-cleaner :elim-literals 70 :elim-clauses 0 :cost 20992 :time 0.00)
 (sat-cleaner :elim-literals 96 :elim-clauses 2 :cost 22252 :time 0.00)
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 16384 := 1048575&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 65536 := 1048575&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 524288 := 1048575&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 262144 := 1048575&1048576
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 1048575&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 262144 := 1048576&1048575
band: (band[54] (lshr[54] (bv2int %0) (mod #74 54)) (if (= #463 53) 9007199254740992 (if #465 4503599627370496 #569))) 0 := 1048575&1048576
band: (band[54] (if (= #584 63) 18446744073709551616 (if #586 9223372036854775808 #710)) (lshr[64] (bv2int %0) (mod #714 64))) 524288 := 1048576&1048575
 (sat-cleaner :elim-literals 76 :elim-clauses 4 :cost 23630 :time 0.00)
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 24738 :time 0.00)
ramon: poll                 wall=2.000s usage=1.942s mem=28572KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 25773 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 26467 :time 0.00)
 (sat-cleaner :elim-literals 326 :elim-clauses 4 :cost 27557 :time 0.00)
ramon: poll                 wall=3.000s usage=2.942s mem=39372KiB load=1.00 rootload=0.99
ramon: poll                 wall=4.000s usage=3.942s mem=54936KiB load=1.00 rootload=1.00
ramon: poll                 wall=5.000s usage=4.942s mem=59448KiB load=1.00 rootload=1.00
ramon: poll                 wall=6.000s usage=5.941s mem=63004KiB load=1.00 rootload=0.99
ramon: poll                 wall=7.000s usage=6.941s mem=66432KiB load=1.00 rootload=1.00
ramon: poll                 wall=8.000s usage=7.941s mem=69188KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.940s mem=71560KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.940s mem=90384KiB load=1.00 rootload=1.00
ramon: poll                 wall=11.000s usage=10.940s mem=92540KiB load=1.00 rootload=1.00
ramon: poll                 wall=12.000s usage=11.940s mem=95168KiB load=1.00 rootload=0.99
ramon: poll                 wall=13.000s usage=12.939s mem=97156KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.939s mem=99528KiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.939s mem=98MiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.938s mem=100MiB load=1.00 rootload=0.99
ramon: poll                 wall=17.000s usage=16.938s mem=101MiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.938s mem=103MiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.938s mem=104MiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.937s mem=105MiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 20:32:25 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.040s
ramon: group.total          20.002s
ramon: group.utime          19.958s
ramon: group.stime          0.044s
ramon: group.mempeak        106MiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.065s
ramon: loadavg              1.00
