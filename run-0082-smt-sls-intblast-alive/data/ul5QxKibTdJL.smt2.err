ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 23:14:59 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27175 MiB
ramon: sys.mem.avail        62083 MiB
ramon: sys.nprocs           1388
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/ul5QxKibTdJL.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             953453
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   104.167     10000        49          0            1        2)
(smt.stats    0    101   1451    217  1066/938/97      96/11     5   16   51.85)
(sat.ddfw       1      1   42.1983     20001        98          1            1        3)
(smt.stats    1    202   3097    663  1247/1137/102     184/18     7   29   51.95)
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 1 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 1 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 1 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 72&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 72 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 72&0
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 37 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 72&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 72 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 72&0
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 37 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 34359738367&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 18446744073709551615 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 72&0
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 73 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 72&0
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 35 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 72&0
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 36 := 36 << 1
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 72&0
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 36 := 36 << 1
(smt.stats    2    313   5185   1754  1490/1139/103     292/43     7   29   52.05)
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 2&0
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 3 := 1 << 1
(smt.stats    3    414   7825   3284  1730/1399/117     420/82     9   35   52.24)
(sat.ddfw       1      1   45.8716     40001       196          2            1        5)
(smt.stats    4    525   9909   5863  2013/1807/140     515/107    12   82   52.43)
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 21 := 22&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 20 := 22&21
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 22 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 20 := 22&21
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 22 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 21 := 22&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 20 := 22&21
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 22 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 7 := 7&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 4 := 7&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 4 := 7&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 6 := 6&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 4 := 6&21
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 6 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 4 := 6&21
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 6 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 28950 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 21 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 20 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 18 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 8 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 16 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 13 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 12 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 12 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 12 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 9 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 8 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 28929 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 28929 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 9 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 227 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 21 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 20 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 16 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 2 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 2 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 2 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 2 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 2 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 8 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 8 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 8 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 8 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 8 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 16 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 8 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
shl: (shl[35] (bv2int %0) (mod (bv2int %0) 35)) 28932 := 113 << 8
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 17 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 16 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 4 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 28928&21
band: (band[35] (shl[35] (bv2int %0) (mod #101 35)) (if (or #559 #560 #561) 0 (if #562 1 #649))) 4 := 28928&21
(smt.stats    5    647  13557   9336  2130/1918/249     678/143    14  107   52.94)
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 16 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 16 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 2 := 28928&21
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 2 := 28928&21
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    748  17233  12487  2262/1959/249     804/151    14  107   53.24)
(smt.stats    7    859  22044  18218  2279/2037/259     934/161    15  109   53.34)
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 8&703
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 8&703
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 8&703
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 8&703
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 8 := 8&703
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 8 := 118 << 13
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 8 := 8&703
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 8 := 118 << 13
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 8 := 8&703
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 8 := 118 << 13
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 0&703
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 0 := 118 << 13
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 0 := 0&703
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 0 := 118 << 13
(sat.ddfw       1      1   41.1523     70001       343          3            1        8)
(smt.stats    8    981  26414  23147  2436/2147/272    1161/192    17  115   53.53)
ramon: poll                 wall=1.000s usage=0.856s mem=56260KiB load=0.86 rootload=0.84
(smt.stats    9   1115  32766  29936  2629/2358/283    1441/216    20  141   54.01)
(sat.ddfw       1      1   35.4925    110001       539          4            1       12)
(smt.stats   10   1216  36709  33953  2753/2445/284    1648/225    21  142   54.01)
(smt.stats   11   1327  41730  39801  2867/2574/285    1979/277    22  142   54.20)
(smt.stats   12   1449  45573  46592  2932/2634/286    2445/308    23  143   54.39)
(smt.stats   13   1583  50037  52887  3042/2767/293    2866/331    24  154   54.49)
(sat.ddfw       1      1   30.8255    160000       784          5            1       17)
(smt.stats   14   1730  56247  60387  3181/2785/293    3231/375    25  166   54.58)
ramon: poll                 wall=2.000s usage=1.855s mem=56952KiB load=1.00 rootload=1.00
(smt.stats   15   1831  60858  67961  3339/2984/294    3647/404    26  167   54.68)
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 8 := 34359738347&10
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 10 := 34359738347&10
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 281474976710635 := 34359738357 << 7
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 10 := 34359738346&10
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 281474976710634 := 34359738357 << 7
band: (band[35] (shl[64] (bv2int %0) (mod #288 64)) (if (or #674 #675 #676 #677) 0 (if #678 1 #823))) 10 := 34359738346&10
shl: (shl[64] (bv2int %0) (mod (+ #101 #287) 64)) 281474976710634 := 34359738357 << 7
(smt.stats   16   1942  64811  78074  3393/3107/305    4121/427    27  172   54.86)
(sat.ddfw       1      1   27.1007    220001      1078          6            1       23)
(smt.stats   17   2064  68274  82857  3426/3148/317    4435/470    28  206   54.96)
(smt.stats   18   2198  73204  87373  3516/3152/318    4608/475    28  206   55.05)
ramon: poll                 wall=3.000s usage=2.855s mem=57388KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   24.0881    290001      1421          7            1       30)
(smt.stats   19   2345  80218  96076  3759/3301/318    5190/484    28  206   55.15)
(sat.ddfw       1      1   21.6567    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=3.855s mem=57620KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   20   2506  86075 107566  3844/3565/323    5915/567    30  221   55.43)
(sat.ddfw       1      1   19.6335    460001      2254          9            1       47)
ramon: poll                 wall=5.003s usage=4.855s mem=58060KiB load=1.00 rootload=1.00
(smt.stats   21   2607  88233 109206  3928/3576/323    6074/567    30  221   55.62)
(sat.ddfw       1      1   17.9662    560001      2745         10            1       57)
(smt.stats   22   2718  91477 115499  4238/3839/323    6405/567    30  221   55.72)
ramon: poll                 wall=6.000s usage=5.851s mem=58240KiB load=1.00 rootload=1.00
(smt.stats   23   2840  96415 125576  4432/3989/323    6756/636    31  257   56.07)
(sat.ddfw       1      1   16.5438    670001      3284         11            1       68)
ramon: poll                 wall=7.000s usage=6.850s mem=58692KiB load=1.00 rootload=0.99
(smt.stats   24   2974  99213 133144  4651/4176/323    7091/636    31  257   56.17)
(sat.ddfw       1      1   15.3178    790001      3872         12            1       80)
ramon: poll                 wall=8.000s usage=7.850s mem=58720KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   14.6926    920001      4509         13            1       93)
(smt.stats   25   3121 105155 141622  4764/4404/324    7557/660    32  261   56.36)
ramon: poll                 wall=9.000s usage=9.059s mem=58596KiB load=1.21 rootload=1.21
ramon: poll                 wall=10.000s usage=10.109s mem=58676KiB load=1.05 rootload=1.05
(sat.ddfw       1      1   13.8326   1060001      5196         14            1      108)
(smt.stats   26   3282 113446 157630  4994/4567/324    7932/663    32  261   56.45)
ramon: poll                 wall=11.000s usage=11.106s mem=58780KiB load=1.00 rootload=1.00
(smt.stats   27   3459 118005 167352  5219/4940/325    8469/724    33  265   56.66)
(sat.ddfw       1      1   12.8381   1210001      5931         15            1      123)
ramon: poll                 wall=12.003s usage=12.036s mem=59140KiB load=0.93 rootload=0.93
(smt.stats   28   3560 121787 174705  5307/4942/325    8772/724    33  265   56.76)
ramon: poll                 wall=13.000s usage=13.032s mem=59156KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   12.0464   1370001      6715         16            1      139)
(smt.stats   29   3671 126463 186231  5495/5088/326    9323/727    33  265   56.85)
ramon: poll                 wall=14.000s usage=14.081s mem=59244KiB load=1.05 rootload=1.04
(smt.stats   30   3793 132254 198624  5648/5234/326    9763/955    34  274   56.95)
ramon: poll                 wall=15.000s usage=15.041s mem=59340KiB load=0.96 rootload=0.96
(sat.ddfw       1      1   11.3477   1540001      7549         17            1      156)
ramon: poll                 wall=16.000s usage=16.037s mem=59468KiB load=1.00 rootload=1.00
(smt.stats   31   3927 136490 204402  5763/5391/326   10043/957    34  274   57.04)
(sat.ddfw       1      1   10.7443   1720001      8431         18            1      174)
ramon: poll                 wall=17.000s usage=17.037s mem=59944KiB load=1.00 rootload=1.00
(smt.stats   32   4074 141224 213768  5847/5540/326   10763/960    34  274   57.44)
ramon: poll                 wall=18.000s usage=18.037s mem=59776KiB load=1.00 rootload=1.00
(smt.stats   33   4235 147217 221804  5988/5636/326   11052/962    34  274   57.44)
(sat.ddfw       1      1   10.2057   1910001      9362         19            1      193)
ramon: poll                 wall=19.000s usage=19.038s mem=59804KiB load=1.00 rootload=1.00
(smt.stats   34   4412 155077 239019  6266/5764/326   11643/967    34  274   57.63)
ramon: poll                 wall=20.000s usage=20.036s mem=60040KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 23:15:19 2024
ramon: root.execname        z3
ramon: root.utime           20.120s
ramon: root.stime           0.010s
ramon: group.total          20.140s
ramon: group.utime          20.128s
ramon: group.stime          0.012s
ramon: group.mempeak        61964KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.104s
ramon: loadavg              1.00
