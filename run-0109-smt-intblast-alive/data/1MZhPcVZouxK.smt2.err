ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:19:16 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         43107 MiB
ramon: sys.mem.avail        61717 MiB
ramon: sys.nprocs           1381
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/1MZhPcVZouxK.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2758642
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   6191   1899  1266/1142/98     101/6     6   15   19.29)
(smt.stats    1    202   7417   2831  2348/2114/99     194/8     7   20   19.50)
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&1
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&1
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 1 := 7&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #865 #869) 64)) 1 := 108 << 2
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 1 := 7&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #865 #869) 64)) 1 := 108 << 2
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 7 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 6 := 7&110
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #865 #869) 64)) 110 := 108 << 2
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 6 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 4 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 4 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 4 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 4 := 7&434
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 4 := 7&440
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 4 := 7&436
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #865 #869) 64)) 436 := 108 << 2
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #103))) 55 := 54 << 3
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #103))) 440 := 54 << 3
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #103))) 440 := 54 << 3
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 7 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 6 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 4 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #103))) 433 := 54 << 3
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 1 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 2 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 2 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 4 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 1 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 4 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 4 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 4 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 4 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 1 := 7&432
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 7&432
band: (band[57] (if (= #107 56) 1 (if #620 3 #780)) (shl[57] (bv2int %0) (+ 57 #783))) 2 := 7&432
(smt.stats    2    313   8641   5223  2658/2405/184     300/12     9   40   19.89)
(smt.stats    3    414  11391   8359  2683/2425/187     396/12    11   43   19.99)
(smt.stats    4    525  13050  10638  2723/2458/206     481/30    13   71   20.18)
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 3&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #865 #869) 64)) 576460752303423490 := 108086391056892008 << 1
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 3&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #865 #869) 64)) 576460752303423490 := 108086391056892008 << 1
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 3&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #865 #869) 64)) 576460752303423490 := 108086391056892008 << 1
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 3&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 56 #865 #869) 64)) 2 := 144115188075855974 << 1
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 3&448
(smt.stats    5    647  16080  14472  2769/2506/212     609/40    14   73   20.28)
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 3&72057594037927696
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 3&72057594037927696
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #103))) 144115188075855867 := 18014398509481924 << 2
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 3&72057594037927696
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #103))) 144115188075855867 := 18014398509481924 << 2
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 3&904
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #103))) 1809 := 226 << 2
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 3&904
shl: (shl[57] (bv2int %0) (+ 57 (* 144115188075855871 #103))) 144115188075855865 := 226 << 2
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  17186  16502  2920/2653/221     712/53    15   75   20.38)
(smt.stats    7    859  18067  17963  3063/2678/221     851/60    15   75   20.57)
(smt.stats    8    981  19478  20419  3255/2984/224     995/68    16   75   20.57)
ramon: poll                 wall=1.000s usage=0.971s mem=21848KiB load=0.97 rootload=0.96
(smt.stats    9   1115  22393  24914  3335/2999/226    1156/96    18   84   20.70)
(smt.stats   10   1216  25002  27864  3436/3081/226    1293/99    18   84   20.80)
(smt.stats   11   1327  26930  31600  3493/3226/228    1434/135    19   85   20.80)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  29156  34199  3614/3279/229    1653/164    20   87   20.89)
ramon: poll                 wall=2.000s usage=1.971s mem=22196KiB load=1.00 rootload=1.00
(smt.stats   13   1583  30718  36261  3735/3405/230    1817/165    20   87   21.00)
(smt.stats   14   1730  32710  40362  3880/3527/230    1992/192    21   88   21.00)
(smt.stats   15   1831  33678  42450  4052/3665/230    2119/192    21   88   21.10)
(smt.stats   16   1942  35243  44240  4129/3808/230    2249/192    21   88   21.10)
(smt.stats   17   2064  38100  47846  4231/3942/230    2381/194    21   88   21.20)
ramon: poll                 wall=3.000s usage=2.971s mem=22412KiB load=1.00 rootload=1.00
(smt.stats   18   2198  40368  51393  4320/3975/230    2587/194    21   88   21.20)
(smt.stats   19   2345  42931  55454  4483/4216/232    2788/248    22   88   21.31)
(smt.stats   20   2506  45537  60542  4607/4303/235    3065/299    23   90   21.31)
(smt.stats   21   2607  49101  64965  4632/4352/235    3174/299    23   90   21.31)
ramon: poll                 wall=4.000s usage=3.970s mem=22732KiB load=1.00 rootload=1.00
(smt.stats   22   2718  52776  70072  4711/4378/235    3317/336    24   93   21.52)
(smt.stats   23   2840  55075  74661  4886/4511/235    3527/337    24   93   21.74)
(smt.stats   24   2974  57293  80365  5179/4760/235    3781/338    24   93   21.84)
ramon: poll                 wall=5.000s usage=4.970s mem=23080KiB load=1.00 rootload=1.00
(smt.stats   25   3121  61086  89304  5250/4917/236    4010/392    25   97   21.84)
(smt.stats   26   3282  64888  96905  5472/5043/236    4290/396    25   97   21.93)
(smt.stats   27   3459  68383 105438  5664/5268/236    4618/396    25   97   22.03)
(smt.stats   28   3560  69806 108985  5718/5423/236    4874/396    25   97   22.03)
ramon: poll                 wall=6.000s usage=5.960s mem=23368KiB load=0.99 rootload=0.99
(smt.stats   29   3671  71304 111406  5908/5461/236    5031/404    25   97   22.12)
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 8 := 144115188075855871&72057594037919776
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 16 := 144115188075855871&72057594037919776
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919776
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919776
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037924488
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919776
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919776
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919736
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919248
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919264
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919736
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919248
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919264
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 32 := 144115188075855871&72057594037919264
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919264
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919264
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919360
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919360
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919488
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919360
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919488
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 576 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 576 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 576 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 512 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 576 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 884 := 144115188075855871&72057594037919296
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2560 := 144115188075855871&72057594037919296
(smt.stats   30   3793  73439 119506  6105/5742/237    5313/588    26   97   22.31)
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 8192 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 8192 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 8192 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 57344 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 57344 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 8192 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 57344 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 90112 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 40960 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 57344 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 90112 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 90112 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 57344 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 90112 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 122880 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 90112 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 122880 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 253952 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 260600 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 253952 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 253952 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 253952 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 253952 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 253952 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 253952 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 260600 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 260592 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 260576 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 253952 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 1040384 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 1040512 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 1040640 := 144115188075855871&72057594037919744
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 1042688 := 144115188075855871&72057594037919744
(smt.stats   31   3927  75146 126660  6335/5890/426    5609/658    27  132   22.83)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074  80121 136717  6378/6110/442    6064/718    28  148   22.93)
ramon: poll                 wall=7.000s usage=6.960s mem=24920KiB load=1.00 rootload=0.99
(smt.stats   33   4235  84799 148036  6585/6117/442    6438/734    28  148   23.52)
(smt.stats   34   4412  96294 175581  6636/6369/446    7064/1131    30  163   23.62)
(smt.stats   35   4606 103502 192871  6743/6407/451    7570/1177    31  167   23.72)
(smt.stats   36   4707 106572 203942  6817/6540/452    7773/1234    32  184   23.82)
(smt.stats   37   4818 110416 211703  6933/6541/452    7943/1248    32  184   23.82)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   38   4940 114240 225288  7119/6763/452    8218/1315    33  185   24.01)
ramon: poll                 wall=8.000s usage=7.960s mem=25436KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 230)
(smt.stats   39   5074 117792 233395  7169/6874/453    8318/1410    34  186   24.01)
(smt.stats   40   5221 125801 249729  7211/6912/455    8524/1410    34  186   24.26)
(smt.stats   41   5382 132370 272690  7457/6941/455    8945/1502    35  190   24.35)
(smt.stats   42   5559 138340 292050  7581/7273/458    9497/1614    37  198   24.45)
ramon: poll                 wall=9.000s usage=8.960s mem=25912KiB load=1.00 rootload=1.00
(smt.stats   43   5753 143573 317958  7875/7315/458    9862/1623    37  198   24.64)
ramon: poll                 wall=10.000s usage=9.960s mem=26188KiB load=1.00 rootload=1.00
(smt.stats   44   5966 149874 347678  8132/7627/461   10506/1760    38  201   24.74)
(smt.stats   45   6067 154715 359200  8159/7876/461   10644/1924    39  203   24.84)
(smt.stats   46   6178 160162 371586  8164/7882/461   10814/1926    39  203   24.84)
(smt.stats   47   6300 168490 397075  8190/7892/461   10966/1926    39  203   24.93)
(smt.stats   48   6434 172935 410597  8331/7967/461   11228/1929    39  203   25.03)
(smt.stats   49   6581 181165 430172  8357/8076/463   11483/2027    40  217   25.03)
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 0 := 17179869183&2097282
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 17179869183&2097282
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 17179869183&2097282
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 17179869183&2097282
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 17179869183&2097282
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 17179869183&2097282
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 17179869183&2097410
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 2 := 17179869183&2097410
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 34 := 17179869183&2097410
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 34 := 17179869183&2097410
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 66 := 17179869183&2097410
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 34 := 17179869183&2097410
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 34 := 17179869183&2097442
(smt.stats   50   6742 188625 464116  8474/8191/474   11827/2143    41  220   25.03)
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 334114 := 17179869183&393506
ramon: poll                 wall=11.000s usage=10.960s mem=26932KiB load=1.00 rootload=1.00
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 332066 := 17179869183&393506
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 332066 := 17179869183&393506
band: (band[57] (if (= #401 63) 1 (if #599 3 #858)) (shl[64] (* 2 #101) (mod #873 64))) 332066 := 17179869183&393506
(smt.stats   51   6919 192369 485702  8770/8241/474   12290/2148    41  220   25.46)
(smt.stats   52   7113 200979 520579  8984/8698/492   13417/2586    43  241   25.66)
ramon: poll                 wall=12.000s usage=11.959s mem=27284KiB load=1.00 rootload=1.00
(smt.stats   53   7326 209019 559000  9351/8702/492   14188/2595    43  241   25.85)
(smt.stats   54   7560 214719 595802  9521/9114/492   15385/2596    43  241   26.04)
ramon: poll                 wall=13.000s usage=12.959s mem=27584KiB load=1.00 rootload=0.99
(smt.stats   55   7661 218610 604425  9626/9246/492   15641/2599    43  241   26.13)
(smt.stats   56   7772 221698 614709  9808/9375/492   15837/2600    43  241   26.13)
ramon: poll                 wall=14.000s usage=13.959s mem=27824KiB load=1.00 rootload=1.00
(smt.stats   57   7894 225602 632536 10066/9621/492   16352/2604    43  241   26.23)
(smt.stats :restarts :decisions   :clauses/bin/units            :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   58   8028 228931 644477 10239/9825/492   16825/2605    43  241   26.23)
(smt.stats   59   8175 235441 668135 10293/9961/492   17214/2607    43  241   26.33)
ramon: poll                 wall=15.000s usage=14.959s mem=28008KiB load=1.00 rootload=1.00
(smt.stats   60   8336 243817 699146 10502/10051/492   17892/2611    43  241   26.55)
ramon: poll                 wall=16.004s usage=15.963s mem=28624KiB load=1.00 rootload=1.01
(smt.stats   61   8513 250233 722315 10797/10342/492   18326/2614    43  241   26.74)
(smt.stats   62   8707 261741 754384 11050/10584/492   18972/2617    43  241   27.04)
ramon: poll                 wall=17.000s usage=16.958s mem=28792KiB load=1.00 rootload=0.99
(smt.stats   63   8920 272174 794844 11353/10730/492   19684/2632    43  241   27.23)
(smt.stats :restarts :decisions   :clauses/bin/units             :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   64   9154 288118 853155 11479/11139/496   20564/4298    45  257   27.43)
ramon: poll                 wall=18.000s usage=17.958s mem=29116KiB load=1.00 rootload=1.00
(smt.stats   65   9411 306424 909093 11524/11158/496   21364/4305    45  257   27.43)
(smt.stats   66   9512 308674 923488 11539/11203/499   21731/4470    46  259   27.55)
(smt.stats   67   9623 315155 945484 11644/11209/499   22066/4474    46  259   27.65)
ramon: poll                 wall=19.004s usage=18.961s mem=29436KiB load=1.00 rootload=1.01
(smt.stats   68   9745 322035 971049 11734/11316/499   22501/4514    47  267   27.74)
ramon: poll                 wall=20.000s usage=19.957s mem=29568KiB load=1.00 rootload=0.99
ramon: end                  Tue Dec 24 14:19:36 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.010s
ramon: group.total          19.991s
ramon: group.utime          19.971s
ramon: group.stime          0.020s
ramon: group.mempeak        30080KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.035s
ramon: loadavg              1.00
