ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 16:07:16 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         40409 MiB
ramon: sys.mem.avail        61704 MiB
ramon: sys.nprocs           1245
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/xxlKS4TmfpcJ.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3117670
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   4710    474  1105/992/97      99/13     4   17   19.14)
(smt.stats    1    202   5914   1559  1871/1692/99     208/15     6   19   19.24)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 1&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 1&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 2&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 2&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 17179869182&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 17179869182&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 17179869180&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 17179869180&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 2&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 17179869176&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 2&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 4&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 8&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 16&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 17179869182&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 17179869182&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 17179869180&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 8&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 16&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 16&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 32&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 8&2047
(smt.stats    2    313   7639   2135  1975/1747/116     316/23     7   19   19.64)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 8&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 2&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 2&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 16 := 32&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 16 := 32&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 16 := 32&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 64&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 64&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 64 := 320&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 64 := 320&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 64 := 512&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 128 := 512&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 512 := 1024&2047
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 1024 := 17179868160&2047
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 288231114886085632 := 11 << 11
(smt.stats    3    414   8191   3001  2233/2054/215     431/34     9   45   19.93)
(smt.stats    4    525  10550   5798  2291/2087/224     515/39    12   55   20.03)
(smt.stats    5    647  12001   8055  2632/2116/224     634/59    12   55   20.12)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  14632  11054  2672/2453/224     782/59    12   55   20.12)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 256 := 256&8589934575
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 288231424123732224 := 135 << 33
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 128 := 128&8589934575
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 288231424123732096 := 135 << 33
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 128 := 128&8589934575
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 18446744056529682560 := 135 << 33
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 133 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 132 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 128 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 8589934336 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 512 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 1024 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 2048 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 4096 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 8192 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 16384 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32768 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 65536 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 131072 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 8192 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32768 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 65536 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 131072 := 8589934592&8589934575
(smt.stats    7    860  18011  14610  2761/2539/265     991/172    13   64   20.42)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 262144 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 524288 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 1048576 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 2097152 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 4194304 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 4194304 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 8388608 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 16777216 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 33554432 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 67108864 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 134217728 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 268435456 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 536870912 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 1073741824 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 2147483648 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 4294967296 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 262144 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 327680 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 327680 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 327680 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 262144 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 262144 := 8589934592&8589934575
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 536870912 := 536870912&2147483643
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 536870912 := 65 << 31
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 536870912 := 536870912&2147483643
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 536870912 := 65 << 31
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 536870912 := 536870912&2147483643
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 536870912 := 65 << 31
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 536870912 := 2147483648&2147483643
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 1073741824 := 2147483648&2147483643
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 536870912 := 17179344896&2147483643
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 536870912 := 2147483648&2147483643
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 1073741824 := 1073741824&2147483643
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 155692564480 := 65 << 31
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 1073741824 := 2147483648&2147483643
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 536870912 := 2147483648&2147483643
(smt.stats    8    982  20669  18598  2874/2636/345    1371/191    14   82   20.92)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 32&536870910
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 32 := 63 << 29
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 33 := 48&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 36 := 48&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 36 := 48&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 36 := 48&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 33 := 48&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 48 := 48&536870910
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 48 := 63 << 29
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 48 := 48&536870910
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 48 := 63 << 29
(smt.stats    9   1116  23747  22066  2962/2730/375    1624/442    16  103   21.11)
(smt.stats   10   1217  24883  24586  3253/2827/375    1894/447    16  103   21.21)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 327155714 := 16642998272&536870910
(smt.stats   11   1328  27050  27498  3429/3124/377    2119/496    17  105   21.31)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1450  31107  34680  3518/3308/384    2680/740    19  122   21.40)
ramon: poll                 wall=1.000s usage=0.946s mem=22884KiB load=0.95 rootload=0.93
(smt.stats   13   1584  34289  44110  3581/3346/387    3152/1018    20  132   21.63)
(smt.stats   14   1731  40123  55788  3737/3479/387    3461/1034    21  139   21.82)
(smt.stats   15   1832  44887  65548  3742/3484/389    3648/1058    22  141   21.92)
(smt.stats   16   1943  48187  72383  3793/3535/391    3885/1079    23  141   22.01)
(smt.stats   17   2065  51910  78845  3920/3657/393    4198/1123    24  148   22.11)
(smt.stats   18   2199  56013  84955  3978/3668/393    4389/1143    25  150   22.11)
ramon: poll                 wall=2.000s usage=1.941s mem=23400KiB load=1.00 rootload=1.00
(smt.stats   19   2346  60847  99662  4098/3840/395    4556/1159    26  155   22.40)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   20   2507  62695 104915  4287/3858/395    4815/1171    27  155   22.49)
(smt.stats   21   2608  65574 111482  4354/4069/395    4942/1172    27  155   22.49)
(smt.stats   22   2719  68400 125711  4375/4100/395    5072/1173    27  155   22.49)
(smt.stats   23   2841  72359 139643  4406/4121/395    5275/1174    27  155   22.59)
(smt.stats   24   2975  76109 152021  4439/4181/399    5879/1311    28  165   22.68)
ramon: poll                 wall=3.000s usage=2.941s mem=24048KiB load=1.00 rootload=1.00
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 496&255
(smt.stats   25   3122  79624 161517  4530/4184/399    6193/1312    28  165   22.68)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 356&255
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 513&255
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 512&255
(smt.stats   26   3283  84155 183688  4760/4303/399    6683/1764    29  178   22.88)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 480&255
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 480&255
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 672&255
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 672&255
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 864&255
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 800&255
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 288230479230927648 := 1606 << 8
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 800&255
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 288230479230927648 := 1946 << 8
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 800&255
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 288230479230927648 := 1946 << 8
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 800&255
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 288230479230927648 := 1912 << 8
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 32 := 800&255
shl: (shl[64] (bv2int %0) (mod (+ #101 #282) 64)) 288230479230927648 := 1946 << 8
(smt.stats   27   3460  88028 194331  4834/4513/399    7007/1768    29  178   23.07)
(smt.stats   28   3561  90655 207204  4848/4578/425    7457/1799    30  183   23.07)
(smt.stats   29   3672  93766 220049  4916/4652/426    7770/1913    31  185   23.17)
(smt.stats   30   3794  97071 228315  5003/4659/426    8195/1915    31  185   23.26)
(smt.stats   31   3928 102747 263189  5096/4819/427    8542/1991    32  186   23.36)
(smt.stats   32   4075 105532 283989  5128/4855/431    8906/2032    33  205   23.36)
ramon: poll                 wall=4.000s usage=3.940s mem=24684KiB load=1.00 rootload=1.00
(smt.stats   33   4236 110442 309093  5186/4875/433    9344/2034    33  205   23.36)
(smt.stats   34   4413 116678 328397  5275/4990/438   10023/2061    34  222   23.65)
(smt.stats   35   4607 121296 352776  5304/5009/438   11408/2237    35  262   23.86)
(smt.stats   36   4708 125367 369674  5351/5036/438   11639/2238    35  262   23.95)
ramon: poll                 wall=5.000s usage=4.940s mem=25312KiB load=1.00 rootload=1.00
(smt.stats   37   4819 128152 382372  5411/5089/438   12165/2238    35  262   23.95)
(smt.stats   38   4941 131237 394016  5461/5160/438   12656/2238    35  262   24.14)
(smt.delete-inactive-clauses  :num-deleted-clauses 12)
(smt.stats   39   5075 135719 414450  5525/5191/438   13516/2251    35  262   24.24)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   40   5222 140057 427918  5597/5275/438   14057/2253    35  262   24.33)
(smt.stats   41   5383 145807 444185  5689/5340/438   14517/2254    35  262   24.43)
ramon: poll                 wall=6.000s usage=5.939s mem=25780KiB load=1.00 rootload=1.00
(smt.stats   42   5560 150191 464066  5730/5457/439   15085/2853    36  275   24.52)
(smt.stats   43   5754 157170 486700  5795/5464/439   16218/2855    36  275   24.62)
(smt.stats   44   5967 163126 514802  5890/5557/439   17382/2860    36  275   24.71)
(smt.stats   45   6068 164669 526398  5915/5633/443   17873/3171    37  278   24.82)
(smt.stats   46   6179 167973 535966  5920/5645/443   18204/3171    37  278   24.82)
(smt.stats   47   6301 171416 567430  5940/5651/443   18594/3172    37  278   25.01)
ramon: poll                 wall=7.000s usage=6.939s mem=26292KiB load=1.00 rootload=1.00
(smt.stats   48   6435 173538 573870  5947/5672/443   18735/3271    38  336   25.01)
(smt.stats   49   6582 177389 594413  5977/5691/446   19614/3271    38  336   25.11)
(smt.stats   50   6743 184300 615660  6100/5714/446   20237/3272    38  336   25.20)
(smt.stats   51   6920 191389 641510  6292/5844/446   20931/3400    39  354   25.30)
ramon: poll                 wall=8.000s usage=7.938s mem=26728KiB load=1.00 rootload=1.00
(smt.stats   52   7114 193746 651457  6348/6070/446   21519/3401    39  354   25.39)
(smt.stats   53   7327 200322 703649  6352/6077/448   22294/3518    40  385   25.62)
(smt.stats   54   7561 206887 736771  6352/6077/448   22673/3518    40  385   25.72)
(smt.stats   55   7662 210810 755663  6370/6079/448   22947/3520    40  385   25.72)
(smt.stats   56   7773 215728 770894  6464/6187/449   23197/3619    41  385   25.81)
(smt.stats   57   7895 218794 780459  6508/6198/449   23503/3620    41  385   25.81)
ramon: poll                 wall=9.000s usage=8.938s mem=27248KiB load=1.00 rootload=1.00
(smt.stats   58   8029 221595 793756  6545/6260/452   24055/3621    41  385   25.91)
(smt.stats   59   8176 224879 811247  6725/6433/454   24536/3623    41  385   25.91)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   60   8337 227588 822308  6866/6565/458   24679/3704    42  432   26.00)
(smt.stats   61   8514 231747 845991  6915/6618/460   25670/3706    42  432   26.10)
ramon: poll                 wall=10.000s usage=9.938s mem=27600KiB load=1.00 rootload=1.00
(smt.stats   62   8708 238459 870012  7024/6667/460   26186/3708    42  432   26.19)
(smt.stats   63   8921 244438 916978  7138/6856/462   27552/4203    43  441   26.41)
ramon: poll                 wall=11.000s usage=10.937s mem=27868KiB load=1.00 rootload=0.99
(smt.stats   64   9155 250469 946471  7413/6953/467   28129/4208    43  441   26.60)
(smt.stats   65   9412 255021 973406  8090/7237/467   28994/4218    43  441   26.79)
ramon: poll                 wall=12.000s usage=11.937s mem=28388KiB load=1.00 rootload=1.00
(smt.stats   66   9513 257860 991299  8117/7830/468   30348/4626    44  464   26.98)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   67   9624 262216 1017058  8128/7855/468   30619/4626    44  464   27.08)
(smt.stats   68   9746 267137 1047477  8278/7860/468   31117/4631    44  464   27.08)
(smt.stats   69   9880 271427 1070396  8340/8059/468   31317/4631    44  464   27.08)
ramon: poll                 wall=13.000s usage=12.936s mem=28500KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 899)
(smt.stats   70  10027 276733 1109579  8370/8074/468   31331/4632    44  464   27.17)
(smt.stats   71  10188 280905 1131005  8471/8104/468   31815/4632    44  464   27.27)
(smt.stats   72  10365 286522 1160395  8511/8213/469   32038/5387    45  468   27.27)
ramon: poll                 wall=14.000s usage=13.936s mem=28704KiB load=1.00 rootload=1.00
(smt.stats   73  10559 290749 1185133  8551/8240/469   32297/5388    45  468   27.27)
(smt.stats   74  10772 297405 1228935  8621/8283/469   33131/5392    45  468   27.52)
ramon: poll                 wall=15.000s usage=14.936s mem=29104KiB load=1.00 rootload=1.00
(smt.stats   75  11006 304313 1265832  8724/8356/470   33938/5486    46  473   27.61)
(smt.stats   76  11263 311914 1312146  8911/8546/472   35440/5486    46  473   27.80)
ramon: poll                 wall=16.000s usage=15.935s mem=29368KiB load=1.00 rootload=1.00
(smt.stats   77  11545 319528 1363744  8958/8666/472   36314/5748    47  506   27.90)
(smt.stats   78  11646 322653 1388468  8969/8696/472   36594/5748    47  506   28.53)
(smt.stats   79  11757 326613 1422838  8969/8696/472   36898/5748    47  506   28.53)
(smt.stats   80  11879 332887 1477022  8969/8696/472   37233/5748    47  506   28.53)
(smt.stats   81  12013 336014 1505604  8973/8700/474   37870/5966    48  550   28.53)
(smt.stats   82  12160 339441 1530304  8979/8700/474   38045/5968    48  550   28.64)
ramon: poll                 wall=17.003s usage=16.938s mem=30188KiB load=1.00 rootload=1.01
(smt.stats   83  12321 342203 1554971  8997/8718/474   38428/5968    48  550   28.64)
(smt.stats   84  12498 346124 1593857  9005/8732/474   39980/5968    48  550   28.83)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
shl: (shl[34] (bv2int %0) (mod (bv2int %0) 34)) 17179869183 := 17179868631 << 29
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
shl: (shl[34] (bv2int %0) (mod (bv2int %0) 34)) 17179868632 := 17179868631 << 29
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 1 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 2 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 4 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 8 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 16 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 32 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 64 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 128 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 256 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 512 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 1024 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 2048 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 4096 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 8192 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 16384 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 32768 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 32768 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 65536 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 131072 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 262144 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 524288 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 1048576 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 2097152 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 4194304 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 8388608 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 16777216 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 33554432 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 262144 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 524288 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 524288 := 12348030976&536870910
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 0 := 12348030976&536870910
band: (band[34] (shl[34] (bv2int %0) (mod #101 34)) (if (= #555 33) 1 (if #557 3 #648))) 4 := 12348030976&536870910
(smt.stats   85  12692 351758 1629451  9260/8896/631   40454/6186    49  582   29.62)
band: (band[34] (shl[64] (bv2int %0) (mod #283 64)) (if (= #667 63) 0 (if #669 1 #821))) 6422528 := 12348030976&536870910
(smt.stats   86  12905 354565 1643102  9891/9056/631   40930/6191    49  582   29.81)
ramon: poll                 wall=18.000s usage=17.934s mem=31576KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units            :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   87  13139 363420 1679004 10072/9719/647   41635/6192    49  582   30.12)
(smt.stats   88  13396 379255 1758197 10124/9773/647   42113/6194    49  582   30.22)
ramon: poll                 wall=19.000s usage=18.934s mem=31720KiB load=1.00 rootload=1.00
(smt.stats   89  13678 383899 1793449 10213/9910/649   43793/6299    50  623   30.50)
ramon: poll                 wall=20.000s usage=19.933s mem=32460KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 16:07:36 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.010s
ramon: group.total          19.991s
ramon: group.utime          19.975s
ramon: group.stime          0.016s
ramon: group.mempeak        32976KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.057s
ramon: loadavg              1.00
