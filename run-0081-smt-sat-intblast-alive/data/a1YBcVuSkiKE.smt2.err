ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 20:46:37 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28675 MiB
ramon: sys.mem.avail        62090 MiB
ramon: sys.nprocs           1397
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/a1YBcVuSkiKE.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             467716
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts     :learned/bin    :gc          :time)
(sat.stats          :decisions   :clauses/bin :units       :memory       )
(sat.stats      0      0    0     8/8     0/0  79       0    18.03   0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 3 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 3 :time 0.00)
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 12 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 10 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 26 :time 0.00)
(sat.stats    156   1132    0  1166/1166   159/12  93       0    18.89   0.67)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 737 :time 0.00)
(sat.stats    156   1132    0  1341/1341   159/12  95       0    18.89   0.67)
(sat.stats    156   1132    0  1341/1341   159/12  95       0    18.89   0.67)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 0 :elim-bin 601 :time 0.00)
 (sat-probing :cost 504418.89 :time 0.00)
(sat.stats    156   1132    0   124/124   159/14  95       0    18.89   0.67)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 836 :time 0.00)
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268436118 := 268436118 >>l 11
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 13
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 15
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 17
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 19
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 21
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 23
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 25
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 27
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 29
lshr: (lshr[46] (bv2int %0) (mod (bv2int %1) 46)) 268435456 := 268435456 >>l 31
shl: (shl[46] (bv2int %1) (+ 46 (* 70368744177663 #61))) 70368744177631 := 70368744177631 << 29
shl: (shl[46] (bv2int %1) (+ 46 (* 70368744177663 #61))) 70368744177625 := 70368744177625 << 35
 (sat-cleaner :elim-literals 3 :elim-clauses 1 :cost 1347 :time 0.00)
shl: (shl[46] (bv2int %1) (+ 46 (* 70368744177663 #61))) 70368744177627 := 70368744177627 << 33
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 1396 :time 0.00)
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1048575&70050916597760
lshr: (lshr[64] (* 262144 (bv2int %0)) (mod (+ 18 #60 #98) 64)) 2251799813423104 := 2251799813423104 >>l 31
 (sat-cleaner :elim-literals 3 :elim-clauses 1 :cost 1435 :time 0.00)
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 0&70050916597760
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 45 #137 #141) 64)) 70050916598522 := 140737488355254 << 32
 (sat-cleaner :elim-literals 19 :elim-clauses 2 :cost 1768 :time 0.00)
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 1 := 1&70050916597760
(sat.stats    400   6360    1  3309/3285   459/94 158       0    20.02   0.87)
 (sat-cleaner :elim-literals 3 :elim-clauses 0 :cost 1842 :time 0.00)
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 141 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 336 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 656 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 64 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 992 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 448 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 384 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 256 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 512 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 1024 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 10 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 12 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 1024&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 8 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 32 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 2 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 4 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 8 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 640 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 256 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 512 := 1024&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 1024 := 1024&70050916597760
ramon: poll                 wall=1.000s usage=0.936s mem=22324KiB load=0.94 rootload=0.92
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 814&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 2 := 814&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 814&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 4 := 814&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 814&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 8 := 814&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 814&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 32 := 814&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 814&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 256 := 814&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 814&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 512 := 814&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 10 := 814&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 8 := 814&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 4 := 814&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 704&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 64 := 704&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 704&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 128 := 704&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 64 := 704&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 128 := 704&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 512 := 704&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 256 := 982&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 16 := 982&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 982&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 16 := 982&70050916597760
(sat.stats :conflicts    :restarts       :learned/bin        :gc          :time)
(sat.stats      :decisions   :clauses/bin         :units         :memory       )
(sat.stats    632  13563    2 18597/18573   835/248 165       0    23.74   1.12)
(sat.stats    639  13595    3 18597/18573   842/248 165       0    23.74   1.13)
(sat.stats    646  13645    4 18597/18573   849/248 165       0    23.74   1.13)
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 32 := 694&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 2048 := 2940&70050916597760
band: (band[46] (lshr[46] (bv2int %0) (mod #60 46)) (shl[46] (bv2int %1) (+ 46 #123))) 0 := 2945&70050916597760
band: (band[46] (lshr[64] (* 262144 #55) (mod #99 64)) (shl[64] (* 2 #60) (mod #146 64))) 2048 := 2945&70050916597760
ramon: poll                 wall=2.000s usage=1.936s mem=40688KiB load=1.00 rootload=0.98
ramon: poll                 wall=3.000s usage=2.935s mem=53108KiB load=1.00 rootload=0.99
ramon: poll                 wall=4.000s usage=3.935s mem=72152KiB load=1.00 rootload=0.99
ramon: poll                 wall=5.000s usage=4.935s mem=82252KiB load=1.00 rootload=0.99
ramon: poll                 wall=6.000s usage=5.935s mem=104MiB load=1.00 rootload=0.99
ramon: poll                 wall=7.000s usage=6.934s mem=105MiB load=1.00 rootload=1.00
ramon: poll                 wall=8.000s usage=7.934s mem=107MiB load=1.00 rootload=0.99
ramon: poll                 wall=9.000s usage=8.934s mem=114MiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.933s mem=118MiB load=1.00 rootload=1.00
ramon: poll                 wall=11.000s usage=10.933s mem=122MiB load=1.00 rootload=1.00
ramon: poll                 wall=12.000s usage=11.933s mem=134MiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.932s mem=134MiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.932s mem=134MiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.932s mem=135MiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.932s mem=136MiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.931s mem=138MiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.931s mem=138MiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.931s mem=138MiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.931s mem=140MiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 20:46:57 2024
ramon: root.execname        z3
ramon: root.utime           19.920s
ramon: root.stime           0.080s
ramon: group.total          20.005s
ramon: group.utime          19.921s
ramon: group.stime          0.084s
ramon: group.mempeak        140MiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.075s
ramon: loadavg              1.00
