ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:55:05 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         42137 MiB
ramon: sys.mem.avail        61713 MiB
ramon: sys.nprocs           1258
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/GG6vGFiU9TS9.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2882177
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   4175    898  1290/1151/89      97/3     2   14   19.00)
(smt.stats    1    202   6082   3864  2039/1829/93     190/5     4   16   19.21)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 1 := 8388607&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 1 := 306 << 23
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&2
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&2
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&4
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&2
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&4
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&8
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&2
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&4
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&8
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&16
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&4
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&8
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&16
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&32
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&2
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&8
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&16
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&32
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&64
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 1 := 8388607&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 1 := 306 << 23
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 1 := 8388607&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 1 := 188 << 23
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 1 := 8388607&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 1 := 188 << 23
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 1 := 8388607&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 1 := 188 << 23
(smt.stats    2    313   7653   6116  2251/1986/133     289/12     6   33   19.69)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&0
shl: (shl[59] (bv2int %0) (+ 59 (* 576460752303423487 #116))) 576460752303423487 := 48412871360512 << 24
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&0
shl: (shl[59] (bv2int %0) (+ 59 (* 576460752303423487 #116))) 576460752303423487 := 48412871360512 << 24
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&0
shl: (shl[59] (bv2int %0) (+ 59 (* 576460752303423487 #116))) 576460752303423487 := 48412871360512 << 24
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 8388607&0
shl: (shl[59] (bv2int %0) (+ 59 (* 576460752303423487 #116))) 22058952032257 := 22058952032256 << 24
(smt.stats    3    414   8628   7317  2309/2040/170     395/20     7   49   19.79)
(smt.stats    4    525   9158   8446  2685/2423/183     500/68    10   68   19.89)
(smt.stats    5    647  11531  13435  2714/2451/186     585/85    12  101   20.00)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas       :deletions     )
(smt.stats    6    748  14508  16759  2718/2452/186     713/85    13  102   20.00)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 1 := 1&80
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 1&80
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 4611686018427387984 := 4466766254104 << 1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 1&144
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 4611686018427388048 := 4466766254104 << 1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 1 := 1&144
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 1&144
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 4611686018427388048 := 4466766254104 << 1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 1 := 1&144
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 1&144
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 4611686018427388048 := 4466766254104 << 1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 1&80
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 4611686018427387984 := 4466766254104 << 1
(smt.stats    7    859  16823  20314  2772/2497/198     842/112    15  112   20.21)
(smt.stats    8    981  17536  21422  2945/2680/200    1076/112    15  112   20.60)
(smt.stats    9   1115  21008  27988  3028/2736/204    1300/195    17  127   20.60)
(smt.stats   10   1216  23107  31543  3060/2779/204    1510/195    17  127   20.70)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 0&288234842917705008
shl: (shl[59] (bv2int %0) (+ 59 (* 576460752303423487 #116))) 1 := 432347797610564248 << 1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 0&288234842917705008
shl: (shl[59] (bv2int %0) (+ 59 (* 576460752303423487 #116))) 1 := 432347797610564248 << 1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 0&288234842917705008
shl: (shl[59] (bv2int %0) (+ 59 (* 576460752303423487 #116))) 45499809791 := 432347797610564248 << 1
(smt.stats   11   1327  24671  37061  3148/2819/204    1718/198    17  127   20.80)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  26661  41468  3184/2911/213    1873/311    19  137   20.80)
(smt.stats   13   1583  29109  48580  3204/2928/220    2150/342    20  155   20.90)
(smt.stats   14   1730  33004  55987  3216/2939/220    2448/342    20  155   20.90)
(smt.stats   15   1831  36367  63169  3216/2939/220    2674/342    20  155   20.90)
(smt.stats   16   1942  40124  69275  3218/2941/220    2830/342    20  155   21.00)
(smt.stats   17   2064  43154  75431  3228/2943/220    3032/343    20  155   21.00)
ramon: poll                 wall=1.000s usage=0.901s mem=22324KiB load=0.90 rootload=0.89
(smt.stats   18   2198  49393  94217  3236/2959/220    3164/343    20  155   21.00)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 71 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 70 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 68 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 64 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 56 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 2 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 5 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 4 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 8 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 5 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 4 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 8 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 64 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 5 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 4 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 8 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 64 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 16 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 24 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 25 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 28 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 56 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 40 := 562949953421311&72
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 72 := 562949953421311&72
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 1729382256910270536 := 864691334613700536 << 49
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 72 := 562949953421311&72
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 1729382256910270536 := 864691334613700536 << 49
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 72 := 562949953421311&72
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 1729382256910270536 := 864691403333042408 << 49
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 72 := 562949953421311&72
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 72 := 6597069766690 << 49
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 72 := 562949953421311&72
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 72 := 6597069766690 << 49
(smt.stats   19   2345  53102 105230  3374/3043/254    3352/442    21  158   21.24)
(smt.stats   20   2506  57636 112563  3401/3116/264    3581/457    22  165   21.24)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 4 := 36028797018963967&6
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 2 := 36028797018963967&6
(smt.stats   21   2607  59280 117763  3438/3146/266    3720/482    23  165   21.33)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 2 := 144115188075855871&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 2 := 2 << 57
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 4 := 72057594037927935&4
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 4 := 4 << 56
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 6 := 36028797018963967&6
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 6 := 6 << 55
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 72057594037927935&1
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 72057594037927935&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 4 << 56
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 72057594037927935&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 4 << 56
(smt.stats   22   2718  60976 122338  3530/3224/284    3847/524    24  176   21.44)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 36028797018963967&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 6 << 55
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 36028797018963967&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 6 << 55
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 144115188075855871&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 2 << 57
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 144115188075855871&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 2 << 57
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 1023&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 96 << 10
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 31&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 106 << 5
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 3&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 112 << 2
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 3&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 112 << 2
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 7&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 110 << 3
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 15&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 108 << 4
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 511&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 98 << 9
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 511&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 98 << 9
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 511&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 98 << 9
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 255&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 100 << 8
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 127&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 102 << 7
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 63&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 104 << 6
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 63&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 104 << 6
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 4095&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 92 << 12
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 2047&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 94 << 11
(smt.stats   23   2840  63288 129796  3656/3308/312    3985/532    24  176   21.63)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 16383&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 88 << 14
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 32767&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 86 << 15
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 140737488355327&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 22 << 47
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 140737488355327&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 22 << 47
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 140737488355327&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 22 << 47
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 0 := 2251799813685247&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 0 := 14 << 51
(smt.stats   24   2974  65672 135440  3816/3473/359    4115/542    25  196   21.92)
ramon: poll                 wall=2.000s usage=1.901s mem=24228KiB load=1.00 rootload=0.99
(smt.stats   25   3121  67983 138023  4046/3535/364    4315/550    26  207   22.72)
ramon: poll                 wall=3.000s usage=2.900s mem=24448KiB load=1.00 rootload=1.00
(smt.stats   26   3282  69988 142168  4594/3789/364    4536/559    26  207   22.91)
(smt.stats   27   3459  75028 155703  4612/4286/367    4859/652    27  213   22.91)
(smt.stats   28   3560  80201 162392  4624/4298/367    4991/652    27  213   22.91)
(smt.stats   29   3671  84947 170692  4654/4309/367    5150/691    28  214   22.91)
(smt.stats   30   3793  90877 179920  4664/4338/367    5358/691    28  214   23.08)
(smt.stats   31   3927  96610 196897  4677/4351/367    5619/691    28  214   23.08)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074 101905 206076  4710/4382/368    5783/788    29  214   23.18)
(smt.stats   33   4235 109438 224848  4827/4388/368    6030/798    29  214   23.28)
ramon: poll                 wall=4.000s usage=3.900s mem=25068KiB load=1.00 rootload=1.00
(smt.stats   34   4412 113882 236864  5062/4530/368    6456/803    29  214   23.47)
(smt.stats   35   4606 122650 266645  5089/4763/371    6847/925    31  219   23.56)
(smt.stats   36   4707 126857 274263  5136/4768/371    6982/929    31  219   23.56)
(smt.stats   37   4818 129027 285384  5354/4825/371    7269/969    32  220   23.66)
(smt.stats   38   4940 132117 298600  5438/5036/371    7820/976    32  220   23.76)
(smt.delete-inactive-clauses  :num-deleted-clauses 91)
(smt.stats   39   5074 135093 311849  5515/5117/371    8295/979    32  220   23.85)
(smt.stats   40   5221 139498 326310  5570/5213/372    8486/1160    33  225   23.95)
ramon: poll                 wall=5.001s usage=4.892s mem=25472KiB load=0.99 rootload=0.99
(smt.stats   41   5382 142641 339409  5777/5247/372    8854/1163    33  225   24.04)
(smt.stats   42   5559 150393 352716  6003/5641/373    9256/1215    34  231   24.16)
ramon: poll                 wall=6.000s usage=5.887s mem=26004KiB load=1.00 rootload=1.00
(smt.stats   43   5753 154398 359726  6270/5644/373    9554/1226    34  231   24.75)
ramon: poll                 wall=7.000s usage=6.887s mem=26468KiB load=1.00 rootload=1.00
ramon: poll                 wall=8.000s usage=7.887s mem=26612KiB load=1.00 rootload=1.00
(smt.stats   44   5966 156187 364821  6511/5964/373    9815/1229    34  231   25.05)
(smt.stats   45   6067 160876 372311  6977/6615/373    9973/1229    34  231   24.96)
ramon: poll                 wall=9.000s usage=8.887s mem=26768KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   46   6178 164798 382169  7187/6618/373   10182/1231    34  231   25.15)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 3 := 3&141
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 1 := 3&141
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 58 #903 #905) 64)) 4611686018427388045 := 811567318140332988 << 2
(smt.stats   47   6300 169096 393768  7268/6888/373   10381/1233    34  231   25.15)
(smt.stats   48   6434 176023 412861  7277/6906/374   11232/1466    35  233   25.24)
(smt.stats   49   6581 179374 430744  7281/6910/374   11791/1466    35  233   25.34)
(smt.stats   50   6742 187073 461976  7312/6935/375   12143/1709    36  255   25.83)
ramon: poll                 wall=10.000s usage=9.887s mem=27536KiB load=1.00 rootload=1.00
(smt.stats   51   6919 197850 487344  7325/6937/375   12511/1710    36  255   25.95)
(smt.stats   52   7113 205180 512116  7414/7008/376   13201/1953    37  258   26.04)
band: (band[59] (if (or #760 #761 #762 #763 #764 #765) 0 (if #766 1 #880)) (shl[64] (* 2 #114) (mod #906 64))) 281474976710465 := 281474976710655&542679348997519969
(smt.stats   53   7326 212707 554369  7720/7046/377   13929/1956    37  258   26.33)
ramon: poll                 wall=11.000s usage=10.886s mem=28096KiB load=1.00 rootload=1.00
(smt.stats   54   7560 220380 572760  7964/7574/379   14626/2020    38  262   26.71)
ramon: poll                 wall=12.000s usage=11.886s mem=28616KiB load=1.00 rootload=1.00
(smt.stats   55   7661 226371 592399  7994/7602/379   14782/2023    38  262   26.62)
(smt.stats   56   7772 232368 605850  8111/7621/379   15124/2104    39  264   26.71)
ramon: poll                 wall=13.000s usage=12.886s mem=28760KiB load=1.00 rootload=1.00
(smt.stats   57   7894 235341 620119  8284/7737/379   15392/2112    39  264   26.90)
ramon: poll                 wall=14.000s usage=13.886s mem=29048KiB load=1.00 rootload=0.99
(smt.stats   58   8028 239117 632553  8343/7965/380   15832/2149    40  264   26.90)
ramon: poll                 wall=15.000s usage=14.886s mem=28800KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.885s mem=29108KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.885s mem=29380KiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.885s mem=29400KiB load=1.00 rootload=1.00
(smt.stats   59   8175 243305 645442  8626/8012/382   16155/2153    40  264   27.29)
(smt.stats   60   8336 250174 671793  8753/8307/382   16568/2154    40  264   27.37)
ramon: poll                 wall=19.001s usage=18.889s mem=29424KiB load=1.00 rootload=1.01
(smt.stats   61   8513 255931 694462  8836/8401/382   17230/2320    41  264   27.47)
(smt.stats   62   8707 272625 741662  8867/8462/385   17771/2324    41  264   27.47)
ramon: poll                 wall=20.000s usage=19.884s mem=29728KiB load=1.00 rootload=0.99
ramon: end                  Tue Dec 24 14:55:25 2024
ramon: root.execname        z3
ramon: root.utime           19.940s
ramon: root.stime           0.010s
ramon: group.total          19.957s
ramon: group.utime          19.941s
ramon: group.stime          0.016s
ramon: group.mempeak        29744KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.072s
ramon: loadavg              0.99
