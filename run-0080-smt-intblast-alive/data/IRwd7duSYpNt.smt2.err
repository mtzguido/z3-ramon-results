ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:04:26 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28193 MiB
ramon: sys.mem.avail        61763 MiB
ramon: sys.nprocs           1273
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/IRwd7duSYpNt.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             4163897
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   5962    311  1302/1166/100      92/17     7   18   19.18)
(smt.stats    1    202   6659    902  2120/1868/100     190/17     7   18   19.28)
(smt.stats    2    313   8849   1503  2207/1949/101     296/26     8   19   19.40)
(smt.stats    3    414  10952   2608  2342/2081/101     408/27     8   19   19.51)
(smt.stats    4    525  11225   2974  2732/2491/106     503/76    10   27   19.61)
(smt.stats    5    647  13506   5163  2797/2513/106     632/76    10   27   19.71)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas        :deletions    )
(smt.stats    6    748  14807   6439  2864/2580/107     725/87    11   32   19.81)
(smt.stats    7    859  17084   8452  3056/2698/107     832/92    11   32   19.81)
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1109 := 1109&268435455
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 4467570830351533141 := 1108 << 28
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1109 := 1109&268435455
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 4467570830351533141 := 1108 << 28
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1109 := 1109&268435455
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 4467570830351533141 := 1108 << 28
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1107 := 1107&268435455
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 4593671619917907027 := 1108 << 28
(smt.stats    8    981  18824  10640  3103/2851/109     947/97    12   33   19.81)
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1133 := 1133&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 4467570830351533165 := 1132 << 52
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1133 := 1133&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 4467570830351533165 := 1132 << 52
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1133 := 1133&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 4467570830351533165 := 1132 << 52
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 4503599627370495 := 4503599627370495&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 5084563979301289983 := 1132 << 52
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509481983&4503599627370495
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509481983&4503599627370495
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1134 := 1134&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 4611686018427389038 := 1132 << 52
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 0&4503599627370495
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 1 := 1132 << 52
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 0&4503599627370495
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 1 := 1132 << 52
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 536870911 := 536870911&536870911
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 4593671620454776831 := 1109 << 29
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480698&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480698&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480700&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480698&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480701&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480700&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480705&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 256 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480705&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 256 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 256 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 512 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480904&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480904&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 256 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1023 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 256 := 18014398509480904&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 256 := 18014398509480896&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 256 := 18014398509480896&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 256 := 18014398509480864&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 256 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 6912 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 6912 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 2816 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480905&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480904&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 768 := 18014398509480896&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1792 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 2816 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13056 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13056 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 15104 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 12286 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 12284 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 8960 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 11008 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13056 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 15104 := 18014398509480704&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 14080 := 18014398509480913&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 14080 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 14096 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 14080 := 18014398509480913&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13056 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13072 := 18014398509480912&536870911
(smt.stats    9   1115  22673  14086  3289/3026/274    1138/143    16   72   20.41)
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13056 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13072 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13072 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13136 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13072 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13136 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13136 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 14224 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13232 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13200 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13264 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13274 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13272 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 13264 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 16336 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 16336 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 15312 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 16208 := 18014398509480912&536870911
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 16336 := 18014398509480912&536870911
(smt.stats   10   1216  24408  15501  3423/3142/341    1315/171    17   86   20.90)
(smt.stats   11   1327  28398  20319  3708/3270/341    1620/174    17   86   21.00)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  32299  28212  3839/3591/356    2000/358    19   98   21.10)
(smt.stats   13   1584  38271  33704  3869/3619/363    2429/488    21  127   21.19)
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 6 := 9007199254806528&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 6 := 9007199254806530&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 6 := 9007199254806534&31
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 5107081977438208006 := 5 << 5
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 6 := 9007199254806535&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 7 := 9007199254806535&31
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 5107081977438208007 := 5 << 5
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 7 := 9007199254839311&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 7 := 9007199254839311&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 7 := 9007199254839335&31
shl: (shl[64] (bv2int %0) (mod (+ #100 #380) 64)) 5107081977438240807 := 5 << 5
(smt.stats   14   1731  44789  42178  4026/3650/364    2689/607    23  199   21.49)
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 0 := 5 << 5
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 0 := 5 << 5
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 1 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 2 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 4 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 8 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 16 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 2 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 2 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 4 := 160&31
(smt.stats   15   1832  50264  48881  4136/3860/439    2878/762    26  246   21.89)
ramon: poll                 wall=1.000s usage=0.946s mem=23224KiB load=0.95 rootload=0.94
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 8 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 0 := 160&31
band: (band[54] (shl[54] (bv2int %0) (mod #100 54)) (if (= #613 53) 1 (if #615 3 #766))) 1 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 1 := 160&31
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 8 := 160&31
(smt.stats   16   1943  55478  54055  4387/4060/441    3097/847    27  250   22.21)
(smt.stats   17   2065  59864  59641  4394/4067/445    3348/882    28  271   22.40)
(smt.stats   18   2199  68329  69253  4479/4096/449    3672/900    30  275   22.69)
(smt.stats   19   2346  75572  76642  4519/4166/449    3850/901    30  275   22.69)
(smt.stats   20   2507  79953  90450  4548/4219/457    4238/1000    31  285   22.78)
ramon: poll                 wall=2.000s usage=1.945s mem=24396KiB load=1.00 rootload=1.00
(smt.stats   21   2608  84175  97223  4572/4226/457    4543/1056    32  290   23.07)
ramon: poll                 wall=3.000s usage=2.945s mem=24900KiB load=1.00 rootload=1.00
(smt.stats   22   2719  90708 109127  4672/4293/460    4833/1118    33  294   23.36)
ramon: poll                 wall=4.000s usage=3.945s mem=25076KiB load=1.00 rootload=1.00
(smt.stats   23   2841  96285 125338  4832/4362/460    5320/1125    33  294   23.64)
(smt.stats   24   2975  99918 136883  4961/4526/460    5981/1134    33  294   23.64)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   25   3122 107357 149328  5032/4702/462    6548/1312    34  306   23.83)
ramon: poll                 wall=5.000s usage=4.944s mem=25268KiB load=1.00 rootload=1.00
(smt.stats   26   3283 114219 166122  5274/4722/462    7133/1319    34  306   23.93)
(smt.stats   27   3460 119470 181493  5335/4972/462    7471/1320    34  306   24.02)
(smt.stats   28   3561 124209 194321  5386/5015/462    7982/1323    34  306   24.02)
ramon: poll                 wall=6.000s usage=5.944s mem=25468KiB load=1.00 rootload=1.00
(smt.stats   29   3672 130104 208134  5479/5066/462    8232/1323    34  306   24.21)
(smt.stats   30   3794 136228 221640  5738/5213/462    8726/1327    34  306   24.31)
ramon: poll                 wall=7.000s usage=6.944s mem=25720KiB load=1.00 rootload=0.99
(smt.stats   31   3928 140306 233378  5975/5640/464    9290/1691    35  308   24.31)
(smt.stats   32   4075 145064 244200  6108/5669/464    9835/1700    35  308   24.41)
ramon: poll                 wall=8.000s usage=7.943s mem=25824KiB load=1.00 rootload=1.00
(smt.stats   33   4236 149971 258279  6317/5807/465   10170/1910    36  313   24.50)
ramon: poll                 wall=9.000s usage=8.943s mem=26320KiB load=1.00 rootload=1.00
(smt.stats   34   4413 157961 290854  6740/6414/466   11049/2029    37  328   24.69)
(smt.stats   35   4607 171091 314395  6901/6426/467   11958/2033    37  328   24.79)
(smt.stats   36   4708 175622 328650  6987/6617/467   12201/2103    38  329   24.98)
ramon: poll                 wall=10.000s usage=9.943s mem=26448KiB load=1.00 rootload=1.00
(smt.stats   37   4819 182888 369389  7005/6679/467   12575/2103    38  329   24.98)
(smt.stats   38   4941 188799 397438  7018/6692/469   13386/2204    39  357   25.08)
(smt.delete-inactive-clauses  :num-deleted-clauses 410)
(smt.stats   39   5075 194465 432565  7028/6702/469   13710/2204    39  357   25.18)
ramon: poll                 wall=11.000s usage=10.943s mem=26668KiB load=1.00 rootload=1.00
(smt.stats   40   5222 200359 459571  7266/6704/470   14236/2518    40  366   25.27)
ramon: poll                 wall=12.000s usage=11.942s mem=26872KiB load=1.00 rootload=1.00
(smt.stats   41   5383 205099 478112  7572/6979/471   14878/2656    41  367   25.37)
(smt.stats   42   5560 211035 501341  7695/7360/472   16006/2657    41  367   25.46)
ramon: poll                 wall=13.000s usage=12.942s mem=27140KiB load=1.00 rootload=1.00
(smt.stats   43   5754 220278 537872  7830/7403/472   16976/2889    42  368   25.65)
(smt.stats   44   5967 230135 575936  7980/7643/475   18404/3109    43  385   25.84)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   45   6068 234511 593451  8029/7662/476   19361/3113    43  385   25.94)
ramon: poll                 wall=14.000s usage=13.941s mem=27396KiB load=1.00 rootload=1.00
(smt.stats   46   6179 239624 616830  8245/7738/476   19739/3307    44  413   26.03)
(smt.stats   47   6301 244963 642906  8495/7956/476   20452/3308    44  413   26.34)
(smt.stats   48   6435 249263 666464  8610/8195/476   21272/3309    44  413   26.34)
ramon: poll                 wall=15.000s usage=14.941s mem=27908KiB load=1.00 rootload=1.00
(smt.stats   49   6582 256177 698370  8631/8305/478   21937/3584    45  415   26.44)
(smt.stats   50   6743 265592 735090  8784/8306/478   22409/3593    45  415   26.54)
(smt.stats   51   6920 276996 779487  8918/8592/479   22825/3889    47  417   26.77)
(smt.stats   52   7114 281893 808737  9251/8602/480   23892/3893    47  417   26.96)
(smt.stats   53   7327 288671 839377  9408/9029/481   24763/4115    48  430   27.16)
ramon: poll                 wall=16.000s usage=15.941s mem=28636KiB load=1.00 rootload=1.00
(smt.stats   54   7561 296965 867909  9468/9089/481   25433/4123    48  430   27.26)
(smt.stats   55   7662 301081 897584  9499/9150/481   25674/4126    48  430   27.26)
(smt.stats   56   7773 303383 922463  9517/9173/482   25877/4235    49  441   27.35)
band: (band[54] (shl[64] (bv2int %0) (mod #381 64)) (if (= #785 63) 0 (if #787 1 #919))) 16 := 160&31
(smt.stats   57   7895 305997 934757  9575/9227/484   26190/4236    49  441   27.63)
(smt.stats   58   8029 309882 948895  9598/9239/484   26619/4239    49  441   27.72)
ramon: poll                 wall=17.005s usage=16.946s mem=29424KiB load=1.00 rootload=1.00
(smt.stats   59   8176 315472 983477  9697/9271/484   27107/4346    50  465   27.91)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   60   8337 324014 1036099  9744/9352/485   27966/4348    50  465   28.01)
(smt.stats   61   8514 332023 1108889  9770/9406/485   28764/4691    51  468   28.10)
ramon: poll                 wall=18.000s usage=17.941s mem=29832KiB load=1.00 rootload=1.00
(smt.stats   62   8708 340582 1195591  9797/9427/485   29162/4691    51  468   28.43)
(smt.stats   63   8921 350585 1266710  9805/9453/485   30373/4691    51  468   28.52)
(smt.stats   64   9155 359082 1303005  9923/9457/485   31034/4691    51  468   28.62)
ramon: poll                 wall=19.000s usage=18.940s mem=30096KiB load=1.00 rootload=1.00
(smt.stats   65   9412 377867 1416887  9949/9597/486   31852/5355    52  497   28.72)
(smt.stats   66   9513 381942 1433626  9971/9603/486   32367/5360    52  497   28.72)
(smt.stats   67   9624 388365 1462548 10083/9652/486   32710/5362    52  497   28.72)
ramon: poll                 wall=20.000s usage=19.940s mem=30324KiB load=1.00 rootload=1.00
(smt.stats   68   9746 394396 1485334 10162/9759/486   32968/5365    52  497   28.82)
ramon: end                  Fri Nov  1 18:04:46 2024
ramon: root.execname        z3
ramon: root.utime           19.990s
ramon: root.stime           0.000s
ramon: group.total          19.999s
ramon: group.utime          19.991s
ramon: group.stime          0.008s
ramon: group.mempeak        30836KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.059s
ramon: loadavg              1.00
