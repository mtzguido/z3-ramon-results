ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:45:15 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27853 MiB
ramon: sys.mem.avail        62084 MiB
ramon: sys.nprocs           1386
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/aTT6av9ZB1HB.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             856995
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 1&71303168
lshr: (lshr[64] (bv2int %0) (mod (+ #109 #628) 64)) 1 := 33 >>l 33
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 1&71303168
lshr: (lshr[64] (bv2int %0) (mod (+ #109 #628) 64)) 1 := 292057776153 >>l 33
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   87.7193     10000        49          0            1        2)
(sat.ddfw       1      1   44.4489     20001        98          1            1        3)
(smt.stats    0    101   4734    710  1290/1133/96     101/8     4   14   52.26)
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 12&71303168
lshr: (lshr[64] (bv2int %0) (mod (+ #109 #628) 64)) 12 := 1108101562403 >>l 33
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 184&71303168
lshr: (lshr[55] (bv2int %0) (mod (bv2int %0) 55)) 36028797018963967 := 1580547964963 >>l 33
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 172 := 184&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 171 := 184&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 170 := 184&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 168 := 184&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 168 := 184&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 168 := 184&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 168 := 184&71303168
(smt.stats    1    202   5922   1818  2391/2177/128     220/14     5   25   52.47)
(sat.ddfw       1      1   45.1467     40001       196          2            1        5)
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 180 := 239&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 176 := 239&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 176 := 239&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 176 := 624&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 176 := 624&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 176 := 624&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 176 := 624&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 192 := 624&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 192 := 624&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 256 := 624&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 256 := 624&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 512 := 624&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 256 := 1394&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 512 := 1394&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 512 := 569&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 256 := 1779&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 256 := 1779&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 256 := 789&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 512 := 569&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 1024 := 1394&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 2048 := 2109&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 4096 := 4914&71303168
(sat.ddfw       1      1   38.6598     70001       343          3            1        8)
(smt.stats    2    313   6921   3036  2606/2361/182     381/34     7   33   52.88)
ramon: poll                 wall=1.000s usage=0.896s mem=55080KiB load=0.90 rootload=0.88
(sat.ddfw       1      1   32.8947    110001       539          4            1       12)
(smt.stats    3    414   7358   3681  2693/2398/192     573/52     8   39   53.07)
(smt.stats    4    525   9244   5091  3052/2776/197     868/153    10   44   53.16)
(smt.stats    5    647  12241  11458  3170/2823/211    1081/190    12   55   53.39)
(sat.ddfw       1      1   28.4408    160000       784          5            1       17)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations          :lemmas          :deletions    )
(smt.stats    6    748  13230  13401  3303/2948/211    1255/218    13   55   53.49)
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 196610 := 1063631470985256&278528
(smt.stats    7    859  14993  18166  3574/3123/212    1511/219    13   55   53.60)
ramon: poll                 wall=2.000s usage=1.893s mem=55648KiB load=1.00 rootload=1.00
(smt.stats    8    981  16837  22084  3660/3412/224    2103/465    16   70   53.70)
(smt.stats    9   1115  18726  25926  3770/3424/225    2326/482    17   70   53.80)
(smt.stats   10   1216  22714  35210  3941/3537/225    2853/484    17   70   53.80)
(smt.stats   11   1327  26721  44570  3958/3708/226    3073/536    18   70   53.93)
(smt.stats   12   1449  30660  56257  3984/3734/227    3636/609    19   79   54.03)
(smt.stats   13   1583  36297  60979  3987/3737/227    3779/609    19   79   54.03)
(smt.stats   14   1730  42699  74687  4013/3760/229    4094/680    20   87   54.22)
(sat.ddfw       1      1   24.8451    220001      1078          6            1       23)
(smt.stats   15   1831  47296  86342  4067/3799/229    4376/713    21   96   54.22)
(smt.stats   16   1942  49483  93787  4081/3812/229    4757/713    21   96   54.35)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   17   2064  52526 100366  4138/3878/232    4931/986    23  103   54.35)
(smt.stats   18   2198  57737 121753  4182/3883/235    5099/990    24  108   54.45)
(smt.stats   19   2345  63464 148711  4190/3926/237    5381/1077    26  121   54.56)
ramon: poll                 wall=3.000s usage=2.995s mem=56864KiB load=1.10 rootload=1.09
(smt.stats   20   2506  68407 168475  4207/3931/237    6039/1078    26  121   54.66)
(smt.stats   21   2607  70886 178279  4232/3948/237    6189/1078    26  121   54.66)
(sat.ddfw       1      1   22.0195    290001      1421          7            1       30)
(smt.stats   22   2718  73682 182660  4334/3979/237    6330/1079    26  121   54.76)
(smt.stats   23   2840  77094 191867  4341/4078/237    6508/1079    26  121   54.76)
(smt.stats   24   2974  80538 202567  4351/4091/238    6755/1260    27  130   54.76)
(smt.stats   25   3121  85387 235427  4352/4092/238    6919/1260    27  130   54.76)
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 18014398509474304 := 18014647617577536&18014398509481984
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 18014398509474304 := 18014647617577536&18014398509481984
(smt.stats   26   3282  88746 251026  4481/4221/239    7356/1409    28  135   54.94)
ramon: poll                 wall=4.004s usage=3.947s mem=57072KiB load=0.95 rootload=0.96
(sat.ddfw       1      1   19.6996    370001      1813          8            1       38)
(smt.stats   27   3459  92110 261740  4604/4228/239    7589/1409    28  135   55.03)
(smt.stats   28   3560  95181 270070  4614/4352/240    7870/1508    29  136   55.19)
(smt.stats   29   3671  97371 279162  4660/4360/241    8318/1512    29  136   55.29)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   30   3793 101528 289081  4691/4402/244    8434/1542    30  155   55.29)
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 2251799813685248 := 18014492998762539&2251799813685248
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 2251799813685248 := 18014492998762539&2251799813685248
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 2251799813685248 := 18014492998762539&2251799813685248
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 2251799813685248 := 18014492998762539&2251799813685248
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 2251799813685248 := 18014501588697134&2251799813685248
(smt.stats   31   3927 103252 291841  4780/4432/245    8577/1543    30  155   55.63)
ramon: poll                 wall=5.000s usage=4.940s mem=57736KiB load=1.00 rootload=0.99
(smt.stats   32   4074 106280 305146  4934/4674/255    8832/1560    31  160   55.53)
(sat.ddfw       1      1   17.7585    460001      2254          9            1       47)
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883842&71303168
lshr: (lshr[55] (bv2int %0) (mod (bv2int %0) 55)) 71303169 := 24772014153662468 >>l 33
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883842&71303168
lshr: (lshr[55] (bv2int %0) (mod (bv2int %0) 55)) 71303169 := 24772014153662468 >>l 33
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 8 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 8 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 7 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 6 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 4 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 1 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 8 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 8 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 1 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2 := 2883714&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2883714&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2 := 2883714&71303168
(smt.stats   33   4235 108889 311087  5101/4679/256    9036/1637    32  160   55.72)
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 1 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 4 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 64 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 128 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 256 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 512 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 1024 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2048 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 4096 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 8192 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 16384 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 32768 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 65536 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 131072 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 262144 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 524288 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 1048576 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2097152 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 16 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 16 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 16 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2097152 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 65536 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 65536 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 131072 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 262144 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 524288 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 524288 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 1048576 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 524288 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 1048576 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 1048576 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 262144 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 262144 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 262144 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 262144 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 2048 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 4096 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 8192 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 4096 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 4096 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 4096 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 16384 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 32768 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 32768 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 32768 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 32768 := 2884354&71303168
band: (band[55] (lshr[64] (bv2int %0) (mod #629 64)) (if (= #639 63) 313594649253062377472 (if #641 156797324626531188736 #765))) 0 := 2884354&71303168
band: (band[55] (lshr[55] (bv2int %0) (mod #109 55)) (if (= #512 54) 306244774661193728 (if #514 153122387330596864 #620))) 32768 := 2884354&71303168
(smt.stats   34   4412 111655 325347  5343/5008/429    9345/1646    32  160   56.34)
(smt.stats   35   4606 118282 348751  5356/5088/441    9690/1687    33  201   56.44)
(smt.stats   36   4707 123463 372899  5410/5130/441    9889/1738    34  204   56.44)
ramon: poll                 wall=6.000s usage=5.895s mem=58676KiB load=0.95 rootload=0.95
(sat.ddfw       1      1   16.1238    560001      2745         10            1       57)
(smt.stats   37   4818 125765 378933  5609/5131/442   10266/1781    35  211   56.67)
(smt.stats   38   4940 129070 390398  5745/5360/442   10833/1782    35  211   56.67)
(smt.delete-inactive-clauses  :num-deleted-clauses 94)
(smt.stats   39   5074 132847 406444  5758/5478/442   11009/1782    35  211   56.79)
ramon: poll                 wall=7.000s usage=6.895s mem=59196KiB load=1.00 rootload=1.00
(smt.stats   40   5221 137817 425811  5834/5478/442   11404/1785    35  211   56.98)
(sat.ddfw       1      1   14.7989    670001      3284         11            1       68)
(smt.stats   41   5382 141357 433768  6176/5667/442   11900/1788    35  211   57.36)
ramon: poll                 wall=8.000s usage=7.884s mem=59452KiB load=0.99 rootload=0.99
(smt.stats   42   5559 147111 448780  6266/5938/442   12377/1788    35  211   57.45)
(smt.stats   43   5753 152575 459217  6399/5991/442   12627/1791    35  211   57.55)
(sat.ddfw       1      1   13.5777    790001      3872         12            1       80)
ramon: poll                 wall=9.004s usage=8.862s mem=59708KiB load=0.97 rootload=0.98
(smt.stats   44   5966 157831 474562  6731/6443/449   13086/2265    36  217   57.65)
(smt.stats   45   6067 166062 493659  6735/6447/449   13202/2265    36  217   57.65)
(smt.stats   46   6178 171033 511494  6743/6455/450   13457/2347    37  226   57.75)
(smt.stats   47   6300 176324 537833  6782/6467/450   13687/2347    37  226   57.84)
ramon: poll                 wall=10.004s usage=9.864s mem=60272KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   12.6165    920001      4509         13            1       93)
(smt.stats   48   6434 179174 547861  6988/6522/450   14152/2352    37  226   57.94)
(smt.stats   49   6581 185137 571327  7005/6717/450   14377/2352    37  226   57.94)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   50   6742 189395 590313  7072/6728/450   14668/2354    37  226   58.42)
ramon: poll                 wall=11.000s usage=10.861s mem=60980KiB load=1.00 rootload=1.00
(smt.stats   51   6919 191233 596955  7487/6890/450   14956/2360    37  226   58.51)
(sat.ddfw       1      1   11.7964   1060001      5196         14            1      108)
(smt.stats   52   7113 199033 627150  7512/7207/451   15567/2741    38  236   58.51)
ramon: poll                 wall=12.000s usage=11.861s mem=61236KiB load=1.00 rootload=1.00
(smt.stats   53   7326 203082 645966  7707/7228/452   15837/2865    39  241   58.70)
(smt.stats   54   7560 205026 650954  8143/7589/452   16134/2868    39  241   59.05)
(smt.stats   55   7661 207181 667582  8361/7883/452   16303/2868    39  241   59.14)
ramon: poll                 wall=13.000s usage=13.000s mem=61704KiB load=1.14 rootload=1.14
(smt.stats   56   7772 210370 691546  8420/8078/452   16631/2868    39  241   59.55)
(smt.stats   57   7894 217242 717213  8444/8126/453   16973/2978    40  243   59.67)
(smt.stats   58   8028 222691 746311  8456/8138/461   17820/3119    41  266   59.77)
(sat.ddfw       1      1   11.0758   1210001      5931         15            1      123)
ramon: poll                 wall=14.000s usage=14.000s mem=62136KiB load=1.00 rootload=1.00
(smt.stats   59   8175 233639 809075  8476/8144/461   18365/3122    41  266   59.88)
(smt.stats   60   8336 241518 842807  8643/8170/461   19181/3256    42  287   60.00)
(smt.stats   61   8513 247911 868852  8785/8389/462   19728/3257    42  287   60.11)
ramon: poll                 wall=15.004s usage=15.003s mem=62492KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   10.4302   1370001      6715         16            1      139)
(smt.stats   62   8707 256105 891301  8976/8480/462   20274/3415    43  298   60.32)
ramon: poll                 wall=16.000s usage=15.996s mem=62840KiB load=1.00 rootload=1.00
(smt.stats   63   8920 271234 935815  9112/8688/462   20994/3415    43  298   60.42)
(smt.stats   64   9154 278838 951440  9141/8819/463   21676/3600    44  301   60.51)
ramon: poll                 wall=17.000s usage=17.043s mem=63076KiB load=1.05 rootload=1.04
(sat.ddfw       1      1   9.91485   1540001      7549         17            1      156)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   65   9411 297478 1021089  9150/8828/465   22436/3600    44  301   60.51)
(smt.stats   66   9512 300582 1033351  9167/8845/467   22708/3704    45  324   60.63)
(smt.stats   67   9624 302419 1049303  9188/8866/468   23073/3704    45  324   60.63)
(smt.stats   68   9746 307510 1075915  9209/8883/468   23360/3704    45  324   60.63)
ramon: poll                 wall=18.000s usage=18.045s mem=63412KiB load=1.00 rootload=1.00
(smt.stats   69   9880 311865 1087607  9346/8888/468   23524/3800    46  341   61.33)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10027 315259 1103602  9474/9067/468   24103/3802    46  341   61.49)
(smt.stats   71  10188 319226 1130464  9890/9191/468   24466/3805    46  341   61.49)
ramon: poll                 wall=19.000s usage=19.061s mem=63732KiB load=1.02 rootload=1.02
(smt.stats   72  10365 323486 1171858 10118/9590/468   25336/3806    46  341   61.70)
(sat.ddfw       1      1   9.39751   1720001      8431         18            1      174)
(smt.stats   73  10559 329700 1210510 10203/9797/468   26012/3814    46  341   61.70)
ramon: poll                 wall=20.000s usage=20.083s mem=64168KiB load=1.02 rootload=1.02
ramon: end                  Fri Nov  1 22:45:35 2024
ramon: root.execname        z3
ramon: root.utime           20.130s
ramon: root.stime           0.010s
ramon: group.total          20.153s
ramon: group.utime          20.137s
ramon: group.stime          0.016s
ramon: group.mempeak        64480KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.070s
ramon: loadavg              1.00
