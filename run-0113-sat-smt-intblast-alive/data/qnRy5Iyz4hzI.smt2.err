ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Wed Dec 25 16:39:10 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         39839 MiB
ramon: sys.mem.avail        61377 MiB
ramon: sys.nprocs           1325
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/qnRy5Iyz4hzI.smt2
ramon: argv                 2 = sat.smt=true
ramon: argv                 3 = smt.bv.solver=2
ramon: argv                 4 = -T:20
ramon: argv                 5 = -v:2
ramon: argv                 6 = -st
ramon: argv                 7 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 8 = model_validate=true
ramon: childpid             3975586
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   222/221     0/0  58       0    18.53   0.00)
(sat.stats    142   1146    0   222/221   142/71  58       0    18.96   0.01)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 514 :time 0.00)
(sat.stats    142   1146    0   222/221   142/71  58       0    18.96   0.01)
(sat.stats    142   1146    0   222/221   142/71  58       0    18.96   0.01)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 0 :time 0.00)
 (sat-probing :cost 498018.96 :time 0.00)
(sat.stats    142   1146    0   222/221   147/76  58       0    18.96   0.01)
(sat.stats    145   1163    1   222/221   150/79  58       0    18.96   0.01)
(sat.stats :conflicts    :restarts     :learned/bin       :gc          :time)
(sat.stats       :decisions    :clauses/bin     :units        :memory       )
(sat.stats    148   1201    2   222/221   153/82  58       0    18.96   0.01)
(sat.stats    151   1260    3   222/221   156/85  58       0    18.96   0.01)
(sat.stats    155   1338    4   222/221   160/88  58       0    18.96   0.01)
(sat.stats    162   1507    5   222/221   167/94  58       0    19.05   0.01)
(sat.stats    165   1530    6   222/221   170/94  58       0    19.05   0.01)
(sat.stats    168   1636    7   222/221   173/97  58       0    19.05   0.02)
(sat.stats    171   1721    8   222/221   176/98  58       0    19.05   0.02)
(sat.stats :conflicts    :restarts     :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    174   1865    9   222/221   179/100  58       0    19.05   0.02)
(sat.stats    177   1948   10   222/221   182/101  58       0    19.05   0.02)
(sat.stats    180   2052   11   222/221   185/103  58       0    19.05   0.02)
(sat.stats    183   2218   12   222/221   188/106  58       0    19.05   0.02)
(sat.stats    210   3878   21   222/221   215/114  58       0    19.05   0.03)
(sat.stats    332  10646   45   222/221   337/180  58       0    19.15   0.05)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 3741 :time 0.00)
(sat.stats    476  12897   51   242/240   479/242  63       0    19.63   0.09)
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 5770 :time 0.00)
 (sat-cleaner :elim-literals 4 :elim-clauses 0 :cost 8543 :time 0.00)
shl: (shl[51] (bv2int %0) (mod (bv2int %0) 51)) 0 := 2251799812521470 << 50
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&0
shl: (shl[64] (bv2int %0) (mod (+ #63 #724) 64)) 562949953421311 := 2251799810751464 << 50
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 6691 := 562949953421311&1125899906842624
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 64902 := 562949953421311&1125899906842624
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 23482 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 109217 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 174064 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 12 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 8 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 911936 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 32 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 1550080 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 128 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 5632 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 2170880 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 7168 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 4096 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 2048 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 61571072 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 16384 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 662700032 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 5636096 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 65536 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 1572864 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 262144 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 2097152 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 1048576 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 4194304 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 71319945216 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 33420214272 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 100663296 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 67108864 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 7273258680320 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 1059246309376 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 12714176937984 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 51900384804864 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 2147483648 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 4294967296 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 8589934592 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 84490596646912 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 108095736905728 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 193239168581632 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 137438953472 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 53326313947136 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 297967651127296 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 90159953477632 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 4398046511104 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 43980465111040 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 123145302310912 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 422212465065984 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 35184372088832 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 70368744177664 := 1125899906842624&562949953421311
band: (band[51] (if (= #573 50) 0 (if #575 1 #715)) (shl[51] (bv2int %0) (mod #63 51))) 0 := 562949953421311&1125899906842624
band: (band[51] (shl[64] (bv2int %0) (mod #725 64)) (if (or #736 #737 #738 #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #847))) 281474976710656 := 1125899906842624&562949953421311
ramon: poll                 wall=1.000s usage=0.952s mem=32456KiB load=0.95 rootload=0.92
ramon: poll                 wall=2.000s usage=1.951s mem=34728KiB load=1.00 rootload=1.00
ramon: poll                 wall=3.000s usage=2.951s mem=35952KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 27 :elim-clauses 0 :cost 13301 :time 0.00)
ramon: poll                 wall=4.000s usage=3.950s mem=39068KiB load=1.00 rootload=1.00
(sat.stats :conflicts   :restarts       :learned/bin          :gc          :time)
(sat.stats      :decisions   :clauses/bin          :units         :memory       )
(sat.stats   1286  44425   98 89213/89205  3014/2065 393       0    38.64   3.97)
(sat.stats   1289  44731   99 89221/89213  3017/2065 393       0    38.64   4.23)
ramon: poll                 wall=5.000s usage=4.949s mem=39384KiB load=1.00 rootload=1.00
ramon: poll                 wall=6.000s usage=5.949s mem=39676KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 14438 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 2 :cost 14435 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 14429 :time 0.00)
ramon: poll                 wall=7.000s usage=6.949s mem=40312KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 0 :elim-clauses 2 :cost 14426 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 14420 :time 0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 14530 :time 0.00)
ramon: poll                 wall=8.000s usage=7.948s mem=41232KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.947s mem=41312KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 14784 :time 0.00)
ramon: poll                 wall=10.000s usage=9.947s mem=41380KiB load=1.00 rootload=1.00
ramon: poll                 wall=11.000s usage=10.947s mem=47108KiB load=1.00 rootload=0.99
ramon: poll                 wall=12.000s usage=11.946s mem=48444KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.946s mem=49820KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.945s mem=52932KiB load=1.00 rootload=1.00
(sat.stats   1597  58827  122 167228/167220  4433/3209 411       0    62.26  14.89)
ramon: poll                 wall=15.000s usage=14.944s mem=63420KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.944s mem=65604KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.927s mem=68700KiB load=0.98 rootload=0.98
ramon: poll                 wall=18.000s usage=17.926s mem=71088KiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.926s mem=73488KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.925s mem=76484KiB load=1.00 rootload=1.00
ramon: end                  Wed Dec 25 16:39:30 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.030s
ramon: group.total          19.982s
ramon: group.utime          19.950s
ramon: group.stime          0.032s
ramon: group.mempeak        76996KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.057s
ramon: loadavg              1.00
