ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:27:11 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         41331 MiB
ramon: sys.mem.avail        61711 MiB
ramon: sys.nprocs           1256
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/WU0L23bvY7zQ.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2990691
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 4611686018427387904 := 0 << 59
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 4611686018427387904 := 0 << 59
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 4611686018427387904 := 0 << 59
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 2 := 0 << 59
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 2 := 0 << 59
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387901
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 9223372036854775805 := 9223372036854775804 << 59
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387902
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 18446744073709551614 := 9223372036854775804 << 59
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&2305843009213693952
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 4611686018427387903 := 4611686018427387902 << 60
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&2305843009213693952
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 4611686018427387903 := 4611686018427387902 << 60
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&2305843009213693952
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 4611686018427387903 := 4611686018427387902 << 60
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&1152921504606846976
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 1152921504606846975 := 5 << 60
(smt.stats    0    101    993    611  1319/1178/131      81/10    12   25   19.06)
(smt.stats    1    202   2325   1822  1427/1279/133     173/12    14   26   19.15)
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387886
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 0 := 4611686018427387895 << 1
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387886
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 0 := 4611686018427387895 << 1
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387886
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 0 := 4611686018427387895 << 1
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387878
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 0 := 2305843009213693939 << 1
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387878
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 0 := 2305843009213693939 << 1
(smt.stats    2    313   2858   2920  1491/1326/141     287/18    16   29   19.25)
(smt.stats    3    414   4084   5919  1539/1373/142     391/19    17   30   19.35)
(smt.stats    4    525   5025   7911  1569/1394/163     483/42    20   52   19.44)
(smt.stats    5    647   6296   9202  1604/1426/163     600/49    21   59   19.54)
(smt.stats :restarts  :decisions   :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748   7276  11731  1648/1440/167     701/54    22   61   19.54)
(smt.stats    7    859   8812  17500  1703/1521/167     815/66    23   65   19.82)
(smt.stats    8    981   9787  20362  1905/1723/181     977/92    25   74   19.82)
(smt.stats    9   1115  11876  23017  1970/1750/182    1241/109    27   90   19.92)
(smt.stats   10   1216  13532  26392  2046/1818/182    1363/111    27   90   19.92)
(smt.stats   11   1327  15271  30464  2092/1882/182    1491/114    27   90   19.92)
ramon: poll                 wall=1.000s usage=0.995s mem=21064KiB load=0.99 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  16635  34273  2184/2003/183    1626/195    28   93   20.01)
(smt.stats   13   1583  17742  38018  2212/2021/183    1767/195    28   93   20.01)
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 2&3
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 2&3
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 2&5
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 5 := 4611686018427387950 << 61
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 2&3
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 2&4
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 4 := 4611686018427387946 << 61
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 2&3
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 2 := 2&3
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 3 := 4611686018427387946 << 61
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 2 := 2&39
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 39 := 4611686018427387946 << 61
(smt.stats   14   1730  20326  41581  2257/2036/184    1918/219    29   95   20.11)
(smt.stats   15   1831  21084  43565  2323/2115/199    2019/221    30   98   20.11)
(smt.stats   16   1942  22549  49809  2394/2206/201    2135/230    31  101   20.11)
(smt.stats   17   2064  25307  55746  2402/2222/205    2255/238    32  103   20.11)
(smt.stats   18   2198  26592  61047  2417/2234/205    2391/236    33  112   20.21)
(smt.stats   19   2345  28067  65806  2444/2244/205    2565/238    33  112   20.21)
(smt.stats   20   2506  29780  74642  2486/2271/205    2740/241    33  112   20.21)
(smt.stats   21   2607  30730  79124  2510/2313/205    2861/242    33  112   20.21)
(smt.stats   22   2718  32711  84312  2529/2329/207    2963/294    34  123   20.37)
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 1&4
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 9223372036854775812 := 4611686018427387914 << 60
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 1&4
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 13835058055282163716 := 4611686018427387914 << 60
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 1&4
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 13835058055282163716 := 4611686018427387914 << 60
(smt.stats   23   2840  34114  87064  2600/2362/213    3093/304    35  124   20.46)
ramon: poll                 wall=2.000s usage=1.994s mem=21624KiB load=1.00 rootload=0.99
(smt.stats   24   2974  34637  88341  2900/2460/213    3244/319    35  124   20.56)
(smt.stats   25   3121  36680  94348  2999/2811/213    3425/320    35  124   20.56)
(smt.stats   26   3282  41280 103911  3008/2817/213    3587/322    35  124   20.56)
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&1152921504606846976
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 5764607523034234880 := 9223372036854775496 << 1
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&1152921504606846976
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 5764607523034234880 := 9223372036854775496 << 1
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387588
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 9223372036854775492 := 9223372036854775496 << 1
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387280
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 60 := 4611686018427387748 << 2
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387280
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 60 := 4611686018427387748 << 2
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387280
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 59 := 4611686018427387748 << 2
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&4611686018427387280
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 59 := 4611686018427387748 << 2
(smt.stats   27   3459  46976 113911  3076/2885/226    3799/416    36  124   20.66)
(smt.stats   28   3560  49457 117936  3102/2912/226    3911/416    36  124   20.66)
(smt.stats   29   3671  53481 129456  3103/2915/226    4021/441    37  127   20.75)
(smt.stats   30   3793  58157 142692  3103/2915/226    4143/441    37  127   20.75)
(smt.stats   31   3927  62838 155994  3107/2919/230    4272/442    38  133   20.75)
ramon: poll                 wall=3.000s usage=2.994s mem=21928KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074  65349 165584  3110/2922/230    4426/442    38  133   20.75)
(smt.stats   33   4235  68144 178939  3113/2925/230    4581/448    39  137   20.88)
(smt.stats   34   4412  69600 189832  3143/2932/230    4763/450    39  137   20.88)
(smt.stats   35   4606  71280 197017  3161/2973/236    5010/457    40  141   20.98)
(smt.stats   36   4707  74842 205472  3182/2974/236    5110/455    41  161   20.98)
(smt.stats   37   4818  80271 220324  3191/3001/236    5232/455    41  161   20.98)
(smt.stats   38   4940  81682 227838  3198/3002/236    5355/455    41  161   20.98)
(smt.delete-inactive-clauses  :num-deleted-clauses 72)
(smt.stats   39   5074  82635 233332  3210/3013/236    5427/455    41  161   20.98)
(smt.stats   40   5221  87018 243831  3219/3023/236    5580/456    41  161   20.98)
(smt.stats   41   5382  89159 253052  3246/3036/236    5740/456    41  161   20.98)
(smt.stats   42   5559  91624 260699  3312/3070/236    5937/461    41  161   21.07)
(smt.stats   43   5753  95891 282710  3349/3141/236    6157/464    41  161   21.07)
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 4611686018427387620 := 1152921504606846976 << 2
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 4611686018427387904 := 2305843009213693952 << 5
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 6
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 6
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 6
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 6
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 27
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 28
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 27
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 28
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 25
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 26
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 25
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 26
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 25
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 26
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 25
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 26
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 9
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 10
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 9
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 10
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 9
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 10
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 9
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 10
ramon: poll                 wall=4.004s usage=3.995s mem=22636KiB load=1.00 rootload=1.00
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 17
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 18
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 17
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 18
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 17
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 18
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 17
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 18
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 19
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 20
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 23
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 24
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 23
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 24
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 23
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 24
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 23
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 24
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 21
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 22
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 21
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 22
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 21
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 22
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 0 := 0 << 21
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&0
shl: (shl[62] (bv2int %0) (+ 62 (* 4611686018427387903 #109))) 20 := 0 << 22
(smt.stats   44   5966  98602 288173  3531/3163/236    6368/470    41  161   21.56)
(smt.stats   45   6067  99732 292726  3659/3439/277    6515/529    42  169   21.75)
(smt.stats   46   6178 102929 301154  3667/3447/278    6628/529    42  169   21.75)
(smt.stats   47   6300 104242 307145  3668/3448/278    6766/545    43  171   21.85)
(smt.stats   48   6434 107520 314783  3702/3464/281    6913/550    44  177   21.85)
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 2&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 9223372036854775809 := 0 << 61
(smt.stats   49   6581 112330 325680  3785/3526/281    7071/550    44  177   21.94)
(smt.stats   50   6742 121302 346810  3811/3568/287    7237/559    45  181   21.94)
ramon: poll                 wall=5.000s usage=4.990s mem=23244KiB load=1.00 rootload=1.00
(smt.stats   51   6919 128887 363448  3842/3580/287    7547/562    45  181   21.94)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   52   7113 132435 374710  3884/3627/287    7761/576    46  182   22.13)
(smt.stats   53   7326 137495 395100  3909/3657/287    7978/579    46  182   22.13)
(smt.stats   54   7560 143264 410210  3919/3681/287    8216/579    46  182   22.13)
(smt.stats   55   7661 145735 416779  3919/3681/287    8318/579    46  182   22.35)
(smt.stats   56   7772 149012 425566  3930/3682/287    8432/580    46  182   22.35)
(smt.stats   57   7894 153668 436239  3936/3698/287    8559/580    46  182   22.35)
(smt.stats   58   8028 156027 445457  3937/3699/287    8700/580    46  182   22.35)
(smt.stats   59   8175 156811 449789  3937/3699/287    8851/580    46  182   22.35)
ramon: poll                 wall=6.000s usage=5.990s mem=23668KiB load=1.00 rootload=0.99
(smt.stats   60   8336 160697 454940  4004/3701/287    9034/585    46  182   22.45)
ramon: poll                 wall=7.000s usage=6.990s mem=23872KiB load=1.00 rootload=1.00
(smt.stats   61   8513 164278 470696  4140/3902/291    9230/649    47  186   22.54)
(smt.stats   62   8707 170614 480788  4170/3912/293    9432/651    47  186   22.64)
ramon: poll                 wall=8.000s usage=7.989s mem=24092KiB load=1.00 rootload=1.00
(smt.stats   63   8920 174370 488245  4416/4040/294    9696/675    48  195   22.83)
ramon: poll                 wall=9.000s usage=8.989s mem=24284KiB load=1.00 rootload=1.00
(smt.stats   64   9154 181051 503403  4441/4203/294    9955/675    48  195   22.93)
(smt.stats   65   9411 187133 527047  4442/4204/295   10209/749    50  196   22.93)
(smt.stats   66   9512 189018 532787  4445/4207/295   10336/749    50  196   22.93)
(smt.stats   67   9623 191611 536978  4446/4208/295   10451/749    50  196   22.93)
ramon: poll                 wall=10.000s usage=9.988s mem=24320KiB load=1.00 rootload=1.00
(smt.stats   68   9745 193887 541272  4535/4208/295   10598/751    50  196   23.02)
(smt.stats   69   9879 195947 557953  4732/4308/295   10862/763    50  196   23.02)
ramon: poll                 wall=11.000s usage=10.988s mem=24412KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 27)
(smt.stats   70  10026 198513 564736  4787/4549/295   11005/763    50  196   23.02)
(smt.stats   71  10187 208142 588196  4801/4557/296   11205/818    51  199   23.12)
ramon: poll                 wall=12.000s usage=11.988s mem=24596KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats    :conflicts   :propagations          :lemmas          :deletions     )
(smt.stats   72  10364 212001 591898  5003/4575/296   11431/825    51  199   23.40)
ramon: poll                 wall=13.000s usage=12.988s mem=24772KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.987s mem=24896KiB load=1.00 rootload=1.00
(smt.stats   73  10558 215480 602567  5390/4918/297   11676/881    52  202   23.49)
ramon: poll                 wall=15.000s usage=14.987s mem=24912KiB load=1.00 rootload=1.00
(smt.stats   74  10771 219345 618307  5566/5225/297   11930/883    52  202   23.59)
(smt.stats   75  11005 226233 637852  5624/5386/299   12183/995    54  210   23.68)
ramon: poll                 wall=16.004s usage=15.991s mem=25212KiB load=1.00 rootload=1.01
(smt.stats   76  11262 236830 660916  5690/5398/299   12459/996    54  210   23.68)
(smt.stats   77  11544 244067 679838  5810/5476/300   12779/1023    55  212   23.78)
ramon: poll                 wall=17.000s usage=16.986s mem=25220KiB load=1.00 rootload=0.99
(smt.stats   78  11645 245984 688723  5851/5583/300   12887/1024    55  212   23.78)
(smt.stats   79  11756 249427 698154  5915/5643/302   13021/1084    56  215   23.88)
ramon: poll                 wall=18.000s usage=17.986s mem=25252KiB load=1.00 rootload=1.00
(smt.stats   80  11878 251248 707140  6092/5703/302   13163/1098    56  215   23.97)
(smt.stats   81  12012 253541 717088  6156/5906/302   13321/1102    56  215   23.97)
(smt.stats   82  12159 259881 739625  6158/5920/302   13479/1102    56  215   23.97)
(smt.stats   83  12320 263597 761466  6164/5926/302   13656/1102    56  215   23.97)
ramon: poll                 wall=19.000s usage=18.986s mem=25500KiB load=1.00 rootload=1.00
(smt.stats   84  12497 267987 784550  6189/5944/302   13847/1102    56  215   23.97)
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&1288310968404672540
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 10511683005259448348 := 644155484202336296 << 3
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&1288310968404672540
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 10511683005259448348 := 644155484202336296 << 3
(smt.stats   85  12691 275036 799755  6260/5958/302   14050/1106    56  215   24.07)
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&1288310968404672556
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 10511683005259448364 := 644155484202336304 << 3
band: (band[62] (if (or #448 #451 #454 #457 #460 #463 #466 #469 #472 #475 #478 #481 #484 #487 #490 #493 ...) 0 (if #445 1 #952)) (shl[64] (* 2 #416) (mod #1202 64))) 0 := 0&1288310968404672556
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 61 #1194 #1198) 64)) 10511683005259448364 := 644155484202336304 << 3
(smt.stats   86  12904 280998 812318  6287/6044/307   14264/1196    57  216   24.07)
ramon: poll                 wall=20.000s usage=19.985s mem=25676KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 15:27:31 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.020s
ramon: group.total          19.995s
ramon: group.utime          19.971s
ramon: group.stime          0.024s
ramon: group.mempeak        25932KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.011s
ramon: loadavg              1.00
