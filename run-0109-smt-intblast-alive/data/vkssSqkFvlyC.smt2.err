ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 16:04:40 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         40488 MiB
ramon: sys.mem.avail        61705 MiB
ramon: sys.nprocs           1257
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/vkssSqkFvlyC.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3110179
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   3894    460  1128/1020/104     101/18     9   19   19.06)
(smt.stats    1    202   5861   1260  1721/1565/107     194/27    10   21   19.25)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1 := 1&1
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 1 := 2 << 1
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 0 := 2 << 1
(smt.stats    2    313   7917   1885  2272/2046/115     293/64    13   28   19.46)
(smt.stats    3    414  11983   4224  2322/2112/117     391/70    15   32   19.55)
(smt.stats    4    525  13273   5417  2355/2138/122     514/71    16   44   19.55)
(smt.stats    5    647  17247   9863  2363/2147/122     633/94    17   45   19.65)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  18007  12347  2370/2153/122     733/94    17   45   19.65)
(smt.stats    7    859  20302  15513  2373/2160/122     843/94    17   45   19.75)
(smt.stats    8    981  21101  19208  2391/2177/130     975/108    19   57   19.75)
(smt.stats    9   1115  21729  20334  2409/2187/131    1106/126    20   58   19.75)
(smt.stats   10   1216  22942  21746  2441/2209/134    1206/126    20   58   19.85)
(smt.stats   11   1327  25133  23678  2456/2225/134    1321/127    21   64   19.85)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  25827  26138  2476/2260/135    1443/146    22   64   19.85)
(smt.stats   13   1583  29101  29512  2495/2275/135    1580/146    22   64   19.95)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 36 := 36&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 35 := 36&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 40 := 40&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 34 := 36&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 32 := 36&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 16 := 36&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 32 := 36&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 64 := 64&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 128&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 256 := 256&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 512 := 512&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1024 := 1024&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1024 := 1024&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2048 := 2048&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4096 := 4096&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 8192 := 8192&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 16384 := 16384&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 32768 := 32768&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 65536 := 65536&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 65536 := 65536&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 131072 := 131072&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 262144 := 262144&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 524288 := 524288&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1048576 := 1048576&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2097152 := 2097152&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4194304 := 4194304&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 8388608 := 8388608&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 16777216 := 16777216&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4194304 := 4194304&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4194304 := 4194304&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 8388608 := 8388608&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 33554432 := 33554432&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 67108864 := 67108864&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 134217728 := 134217728&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 268435456 := 268435456&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 536870912 := 536870912&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1073741824 := 1073741824&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2147483648 := 2147483648&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4294967296 := 4294967296&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 8589934592 := 8589934592&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1090519040 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1073741824 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 939524096 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 805306368 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 536870912 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 268435456 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 268435456 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 201326592 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 671088640 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 536870912 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2147483648 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2147483648 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4294967296 := 17179869182&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 17179869184&17179869184
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 17179869184 := 17179869184 << 35
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 17179869184&17179869184
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 17179869184 := 17179869184 << 35
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 17179869184&17179869184
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 17179869184 := 17179869184 << 35
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 17179869185&17179869184
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 17179869185 := 17179869185 << 35
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 22548578303&17179869184
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 22548578303 := 22548578303 << 35
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 34359738368&17179869184
(smt.stats   14   1730  30746  32945  2758/2390/269    1816/157    23   65   20.84)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 34359738368&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 34359738368&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 34359738368&17179869184
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17179869184 := 34359738368&17179869184
(smt.stats   15   1831  32057  34791  2795/2503/315    1978/223    24  103   20.94)
(smt.stats   16   1942  32614  36959  2918/2696/324    2141/289    25  117   21.03)
(smt.stats   17   2064  33521  40603  2931/2709/330    2307/289    25  117   21.03)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 52613349381&65536
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 121332826117 := 52613349380 << 17
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 52613349381&65536
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 121332826117 := 52613349380 << 17
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 52613349381&65536
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 121332826117 := 52613349380 << 17
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 52613349381&65536
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 121332826117 := 52613349380 << 17
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 52613349381&65536
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 121332826117 := 52613349380 << 17
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 52613349381&65536
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 121332826117 := 52613349380 << 17
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 53150220289&65536
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 121869697025 := 52613349380 << 17
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 52613873664&65536
shl: (shl[36] (bv2int %0) (mod (bv2int %1) 36)) 53150220290 := 52613750788 << 17
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 52613873664&65536
shl: (shl[36] (bv2int %0) (mod (bv2int %1) 36)) 53150220290 := 52613750788 << 17
(smt.stats   18   2198  35608  47522  2953/2718/336    2459/390    27  133   21.13)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 52614397952&65536
shl: (shl[36] (bv2int %0) (mod (bv2int %1) 36)) 53150220290 := 52614275080 << 17
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 34359738368&131072
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 2462940405956608 := 18790744064 << 18
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 34359738368&131072
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 2322202917601280 := 17717002240 << 18
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 34359738368&131072
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 103079215104 := 786432 << 18
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 0&131072
shl: (shl[36] (bv2int %0) (mod (bv2int %1) 36)) 52076478467 := 0 << 18
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 0&131072
shl: (shl[36] (bv2int %0) (mod (bv2int %1) 36)) 52076478467 := 0 << 18
(smt.stats   19   2345  39447  53755  3017/2766/348    2622/393    27  133   21.42)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 32212254720&16
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 3588838165315584 := 27380662272 << 5
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 32212254720&16
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 3659138190016512 := 27917008896 << 5
ramon: poll                 wall=1.000s usage=1.000s mem=22756KiB load=1.00 rootload=0.99
(smt.stats   20   2506  41817  59405  3098/2856/368    2834/426    29  150   21.51)
(smt.stats   21   2607  44739  64521  3170/2898/372    2956/431    29  150   21.61)
(smt.stats   22   2718  47532  70274  3214/2953/372    3077/476    30  158   21.61)
(smt.stats   23   2840  53115  83155  3246/2990/383    3234/503    32  171   21.70)
(smt.stats   24   2974  56011  89270  3263/3001/383    3392/505    32  171   21.70)
(smt.stats   25   3121  57930  93538  3278/3019/383    3530/506    33  173   21.92)
(smt.stats   26   3282  61041  98546  3365/3029/383    3695/511    33  173   21.92)
(smt.stats   27   3459  65275 107047  3385/3121/383    3886/511    33  173   21.92)
(smt.stats   28   3560  68084 113027  3389/3132/383    4020/511    33  173   22.01)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4 := 4&4
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 4 := 2 << 3
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4 := 4&4
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 4 := 2 << 3
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4 := 4&4
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 4 := 2 << 3
(smt.stats   29   3671  69722 117730  3412/3137/383    4151/512    33  173   22.01)
(smt.stats   30   3793  71682 125309  3458/3170/388    4267/584    34  174   22.01)
(smt.stats   31   3927  74437 132878  3460/3205/395    4401/585    35  184   22.11)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 128&256
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 128&256
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 128&256
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 128&256
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 256 := 256&512
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 256 := 256&512
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 128&512
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 512 := 512&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1024 := 1024&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2048 := 2048&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4096 := 4096&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4096 := 4096&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 4096 := 4096&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2048 := 2048&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2048 := 2048&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1024 := 1024&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1024 := 1024&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1024 := 1024&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1024 := 1024&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1024 := 1024&8192
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1024 := 1024&4096
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 512 := 512&4096
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 512 := 512&4096
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 512 := 512&4096
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 512 := 512&4096
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 256 := 1023&1024
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074  79061 137926  3555/3234/396    4593/595    35  184   22.32)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738368&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738496&128
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 34359738496 := 52616364033 << 8
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738368&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738623&128
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 34359738623 := 52615839745 << 8
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738368&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738623&128
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 34359738623 := 52615323663 << 8
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738368&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738496&128
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 34359738496 := 52614799371 << 8
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34426847232&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34426847488&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34426847488&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34359738624&128
ramon: poll                 wall=2.000s usage=1.999s mem=24052KiB load=1.00 rootload=1.00
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 128 := 34629225728&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 112 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 32 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 64 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 64 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 48 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 32 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 17 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 16 := 34359738624&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 32 := 34359738880&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 16 := 34359738880&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 16 := 34359738880&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1 := 34359738880&128
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 1 := 34359738624&128
(smt.stats   33   4235  82046 142161  3678/3395/472    4834/612    36  191   22.60)
(smt.stats   34   4412  88652 156520  3783/3520/484    5067/699    37  212   22.71)
(smt.stats   35   4606  95935 171982  3811/3548/490    5391/724    38  216   22.80)
(smt.stats   36   4707 100845 183606  3924/3635/493    5654/804    39  235   23.00)
(smt.stats   37   4818 105976 192419  3931/3636/493    5848/834    40  244   23.10)
(smt.stats   38   4940 107881 195292  4136/3651/493    6001/837    40  244   23.19)
(smt.delete-inactive-clauses  :num-deleted-clauses 156)
(smt.stats   39   5074 112891 201551  4197/3906/495    6084/862    41  250   23.19)
(smt.stats   40   5221 118370 221185  4208/3918/497    6337/942    42  252   23.46)
ramon: poll                 wall=3.000s usage=2.999s mem=24904KiB load=1.00 rootload=1.00
(smt.stats   41   5382 124588 236974  4217/3923/497    6588/942    42  252   23.56)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   42   5559 129795 253363  4227/3937/499    6869/1080    43  259   23.66)
(smt.stats   43   5753 139122 282668  4247/3957/503    7176/1088    44  274   23.66)
(smt.stats   44   5966 147874 306055  4272/3974/505    7529/1138    46  296   23.76)
(smt.stats   45   6067 151498 317742  4282/3990/505    7633/1138    46  296   23.85)
(smt.stats   46   6178 155152 328515  4347/4049/506    7934/1256    47  303   23.85)
(smt.stats   47   6300 157601 343353  4386/4094/507    8098/1256    47  303   23.95)
(smt.stats   48   6434 161281 357634  4405/4113/509    8369/1281    48  309   24.05)
ramon: poll                 wall=4.000s usage=3.999s mem=25392KiB load=1.00 rootload=1.00
(smt.stats   49   6581 163912 369961  4471/4126/510    8599/1281    48  309   24.14)
(smt.stats   50   6742 166185 388484  4522/4230/511    8770/1341    49  340   24.14)
(smt.stats   51   6919 171694 415213  4650/4235/511    9073/1347    49  340   24.24)
(smt.stats   52   7113 174854 429868  4714/4391/511    9299/1350    49  340   24.33)
(smt.stats   53   7326 184460 467215  4746/4446/511    9751/1350    49  340   24.33)
ramon: poll                 wall=5.000s usage=4.999s mem=25720KiB load=1.00 rootload=1.00
(smt.stats   54   7560 189628 493144  4776/4480/514   10188/1499    50  363   24.43)
(smt.stats   55   7661 191561 507493  4780/4488/514   10302/1499    50  363   24.43)
(smt.stats   56   7772 194233 521147  4856/4495/514   10458/1540    51  370   24.43)
(smt.stats   57   7894 196203 536340  4877/4567/514   10620/1540    51  370   24.43)
(smt.stats   58   8028 198322 550408  4886/4588/514   10757/1541    51  370   24.53)
(smt.stats   59   8175 202648 577063  4911/4597/514   10932/1541    51  370   24.53)
(smt.stats   60   8336 205929 602156  4920/4625/514   11106/1541    51  370   24.53)
(smt.stats   61   8513 208853 622143  4936/4631/516   11424/1606    52  381   24.53)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   62   8707 210911 643774  4943/4651/516   11696/1606    52  381   24.53)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2 := 2&4
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2 := 2&4
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 2 := 2&4
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 2&4
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 1030792151042 := 34823733248 << 3
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 2&4
shl: (shl[64] (bv2int %0) (mod (+ #104 #294) 64)) 343597383682 := 34823733248 << 3
ramon: poll                 wall=6.004s usage=6.002s mem=25968KiB load=1.00 rootload=1.00
(smt.stats   63   8920 214954 665000  4983/4659/517   11980/1678    53  386   24.62)
(smt.stats   64   9154 222329 691838  5017/4719/523   12273/1678    53  386   24.72)
(smt.stats   65   9411 231172 740326  5029/4734/525   12580/1750    55  447   24.72)
(smt.stats   66   9512 234105 748476  5079/4772/525   12773/1750    55  447   24.81)
(smt.stats   67   9623 236133 760106  5242/4778/526   12921/1759    55  447   24.91)
(smt.stats   68   9745 237648 776229  5299/4946/526   13138/1759    55  447   24.91)
(smt.stats   69   9879 238766 792422  5302/4995/526   13296/1853    56  447   25.00)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10026 241648 807945  5311/5004/526   13652/1853    56  447   25.00)
ramon: poll                 wall=7.000s usage=6.999s mem=26384KiB load=1.00 rootload=1.00
(smt.stats   71  10187 248842 843823  5312/5005/526   13858/1853    56  447   25.00)
(smt.stats   72  10364 258300 915770  5312/5005/526   14042/1853    56  447   25.00)
(smt.stats   73  10558 264268 950222  5326/5019/528   14493/1953    57  449   25.10)
(smt.stats   74  10771 270230 976763  5403/5046/529   14963/2123    58  456   25.29)
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 0&17179869184
shl: (shl[36] (bv2int %0) (mod (bv2int %1) 36)) 1 := 786436 << 35
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 0&17179869184
shl: (shl[36] (bv2int %0) (mod (bv2int %1) 36)) 786437 := 786436 << 35
band: (band[36] (shl[64] (bv2int %0) (mod #295 64)) (if (= #653 63) 0 (if #655 1 #779))) 0 := 0&17179869184
shl: (shl[36] (bv2int %0) (mod (bv2int %1) 36)) 786437 := 786436 << 35
ramon: poll                 wall=8.000s usage=7.998s mem=26768KiB load=1.00 rootload=1.00
(smt.stats   75  11005 274648 991578  5488/5099/530   15228/2130    58  456   25.38)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   76  11262 280433 1035895  5540/5227/536   15677/2192    59  482   25.38)
(smt.stats   77  11544 286111 1060523  5687/5242/536   16136/2198    59  482   25.57)
ramon: poll                 wall=9.000s usage=8.998s mem=27024KiB load=1.00 rootload=1.00
(smt.stats   78  11645 286882 1062614  6063/5671/536   16329/2207    59  482   25.96)
(smt.stats   79  11756 288170 1074475  6276/5899/536   16507/2214    59  482   25.96)
(smt.stats   80  11878 288969 1081862  6590/6274/538   16658/2340    60  486   25.96)
(smt.stats   81  12012 289586 1090826  6599/6290/539   16908/2340    60  486   25.96)
(smt.stats   82  12159 293761 1110598  6616/6293/539   17110/2341    60  486   26.05)
(smt.stats   83  12320 299073 1160180  6656/6330/540   17311/2466    61  491   26.05)
(smt.stats   84  12497 302238 1179248  6671/6362/540   17610/2466    61  491   26.15)
ramon: poll                 wall=10.000s usage=9.998s mem=28060KiB load=1.00 rootload=1.00
(smt.stats   85  12691 306778 1215396  6678/6367/540   17933/2466    61  491   26.65)
(smt.stats   86  12904 312945 1239533  6972/6373/540   18398/2471    61  491   26.84)
ramon: poll                 wall=11.000s usage=10.998s mem=28396KiB load=1.00 rootload=0.99
(smt.stats   87  13138 317429 1257028  7117/6714/543   18924/2655    62  525   27.03)
(smt.stats   88  13395 323957 1323903  7174/6863/545   19394/2777    63  544   27.03)
(smt.stats   89  13677 333770 1368024  7206/6890/549   20185/2777    63  544   27.13)
ramon: poll                 wall=12.000s usage=11.997s mem=28748KiB load=1.00 rootload=1.00
(smt.stats   90  13987 343694 1419031  7324/6902/550   20886/2951    64  621   27.32)
(smt.stats   91  14088 348460 1439484  7358/7033/551   21046/3086    65  623   27.32)
(smt.stats   92  14199 352979 1481713  7362/7046/551   21219/3086    65  623   27.32)
(smt.stats   93  14321 357272 1509621  7373/7057/551   21585/3086    65  623   27.41)
ramon: poll                 wall=13.000s usage=12.995s mem=28952KiB load=1.00 rootload=1.00
(smt.stats   94  14455 359040 1533708  7385/7069/551   21781/3086    65  623   27.41)
(smt.stats   95  14602 361158 1540704  7386/7070/551   21960/3086    65  623   27.41)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   96  14763 366364 1581189  7393/7077/551   22332/3086    65  623   27.51)
(smt.stats   97  14940 370734 1628795  7398/7080/551   22714/3086    65  623   27.51)
(smt.delete-inactive-clauses  :num-deleted-clauses 1)
(smt.stats   98  15134 374230 1664980  7419/7097/551   23093/3086    65  623   27.61)
(smt.stats   99  15347 380029 1720570  7422/7102/551   23389/3086    65  623   27.61)
ramon: poll                 wall=14.000s usage=13.995s mem=29172KiB load=1.00 rootload=1.00
(smt.stats  100  15581 387004 1762050  7429/7109/556   23739/3360    66  637   27.80)
(smt.stats  101  15838 393747 1820533  7437/7111/556   24132/3360    66  637   27.80)
(smt.stats  102  16120 403483 1863441  7479/7135/556   24597/3379    67  663   27.80)
ramon: poll                 wall=15.000s usage=14.995s mem=29432KiB load=1.00 rootload=1.00
(smt.stats  103  16430 408354 1907580  7487/7163/556   25031/3379    67  663   27.89)
(smt.stats  104  16770 420517 2030808  7492/7172/557   25550/3474    68  699   27.99)
(smt.stats  105  16871 422697 2043437  7502/7172/557   25675/3474    68  699   27.99)
(smt.stats  106  16982 425522 2083621  7521/7201/557   25850/3474    68  699   27.99)
ramon: poll                 wall=16.000s usage=15.994s mem=29672KiB load=1.00 rootload=1.00
(smt.stats  107  17104 429804 2113747  7565/7203/557   25998/3474    68  699   28.08)
(smt.stats  108  17238 433246 2147687  7569/7249/557   26164/3474    68  699   28.08)
(smt.stats  109  17385 435382 2175067  7569/7249/557   26412/3474    68  699   28.19)
(smt.stats  110  17546 439541 2215518  7577/7257/557   26914/3474    68  699   28.28)
(smt.stats  111  17723 443010 2248660  7581/7261/557   27139/3474    68  699   28.28)
(smt.stats  112  17917 444715 2279897  7582/7262/557   27365/3474    68  699   28.38)
ramon: poll                 wall=17.000s usage=16.994s mem=30064KiB load=1.00 rootload=1.00
(smt.stats  113  18130 446022 2311326  7585/7265/557   27652/3474    68  699   28.38)
(smt.stats  114  18364 453535 2373779  7589/7269/557   28148/3474    68  699   28.47)
(smt.stats  115  18621 457731 2433967  7590/7270/557   28489/3474    68  699   29.28)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats  116  18903 465631 2507550  7597/7277/557   28924/3474    68  699   29.28)
ramon: poll                 wall=18.000s usage=17.994s mem=30900KiB load=1.00 rootload=1.00
(smt.stats  117  19213 476089 2615187  7600/7280/557   29462/3474    68  699   29.37)
(smt.stats  118  19553 483832 2683805  7604/7284/557   29966/3474    68  699   29.47)
ramon: poll                 wall=19.000s usage=18.994s mem=31224KiB load=1.00 rootload=1.00
(smt.stats  119  19926 494298 2774205  7621/7301/557   30462/3474    68  699   29.47)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats  120  20027 495607 2783521  7639/7315/557   30595/3475    68  699   29.47)
(smt.stats  121  20138 498203 2811985  7677/7320/557   30824/3475    68  699   29.56)
(smt.stats  122  20260 501873 2840113  7685/7365/557   30967/3475    68  699   29.56)
(smt.stats  123  20394 509181 2882213  7687/7367/557   31165/3475    68  699   29.66)
ramon: poll                 wall=20.000s usage=19.994s mem=31272KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 16:05:00 2024
ramon: root.execname        z3
ramon: root.utime           19.980s
ramon: root.stime           0.010s
ramon: group.total          20.000s
ramon: group.utime          19.988s
ramon: group.stime          0.012s
ramon: group.mempeak        31856KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.006s
ramon: loadavg              1.00
