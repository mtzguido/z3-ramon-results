ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:52:33 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29042 MiB
ramon: sys.mem.avail        62087 MiB
ramon: sys.nprocs           1391
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/AXQTEkDnPGvm.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             676024
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   67.1141     10000        49          0            1        2)
(sat.ddfw       1      1   33.4482     20001        98          1            1        3)
(smt.stats    0    102   3436    374  1173/1065/98     124/14     6   17   51.96)
(smt.stats    1    203   5253    808  1622/1428/98     244/19     6   17   51.96)
(smt.stats    2    314   6979   1727  1680/1528/105     364/54     8   26   52.26)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 4&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 4&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 4&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 4&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 16&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 16 := 31 << 31
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 16&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 16 := 31 << 31
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 8 := 8&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 8 := 31 << 31
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 16&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 16 := 31 << 31
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 16&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 16 := 31 << 31
(sat.ddfw       1      1   35.0877     40001       196          2            1        5)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741823 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741822 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741820 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741816 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741808 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741792 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 64 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 128 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 256 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 512 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1024 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 2048 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 4096 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 8192 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16384 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 32768 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65536 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 131072 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 262144 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 524288 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1048576 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 2097152 := 66571993088&1073741823
(smt.stats    3    415   8470   2642  2338/2138/265     464/66    11   62   52.94)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
(smt.stats    4    526  10464   3961  2432/2223/274     569/77    15   98   53.03)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 18446741874686296072 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255551 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255444 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1 := 8&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1 := 8&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1 := 8&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1 := 8&1
(smt.stats    5    648  14387   6511  2491/2276/291     781/130    17  104   53.13)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&3
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 3 << 3
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&3
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255560 := 3 << 3
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&3
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255560 := 3 << 3
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    750  18900  10445  2660/2408/298     960/172    19  111   53.43)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 164&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 160&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 192&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 256&127
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255808 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 192&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65 := 128&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65 := 129&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65 := 65&127
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255617 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65 := 65&127
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255617 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 32 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255551 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255450 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 1 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 2 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 4 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 8 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 16 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 32 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 64 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 64 := 2048&127
(smt.stats    7    861  26059  16126  2786/2514/391    1169/232    21  133   53.94)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 64 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 32 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 1 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 2 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 2 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 16 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 16 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 8 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 5 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 4 := 2048&127
(sat.ddfw       1      1    32.538     70001       343          3            1        8)
(smt.stats    8    983  29286  20874  2882/2605/411    1394/273    23  157   54.40)
ramon: poll                 wall=1.000s usage=0.840s mem=56484KiB load=0.84 rootload=0.82
(smt.stats    9   1117  36110  27424  2978/2653/411    1721/277    23  157   54.59)
(sat.ddfw       1      1   29.6296    110001       539          4            1       12)
(smt.stats   10   1218  42147  34927  3023/2723/413    1966/366    25  168   54.78)
(smt.stats   11   1329  48596  43876  3094/2793/416    2231/396    27  179   54.88)
(smt.stats   12   1451  51753  48913  3145/2852/426    2556/406    28  189   54.97)
(sat.ddfw       1      1   26.4126    160000       784          5            1       17)
ramon: poll                 wall=2.000s usage=1.834s mem=57280KiB load=0.99 rootload=0.99
(smt.stats   13   1585  56156  55824  3268/2941/432    2836/484    29  219   55.45)
(sat.ddfw       1      1   23.7534    220001      1078          6            1       23)
ramon: poll                 wall=3.000s usage=2.928s mem=58048KiB load=1.09 rootload=1.10
(smt.stats   14   1732  63346  63910  3406/2981/432    3264/487    29  219   55.96)
(sat.ddfw       1      1   21.3936    290001      1421          7            1       30)
(smt.stats   15   1833  66849  69402  3654/3243/432    3489/580    30  222   55.86)
(sat.ddfw       1      1   20.1562    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=4.085s mem=58188KiB load=1.16 rootload=1.15
(smt.stats   16   1944  69805  76142  3800/3416/432    3784/581    30  222   56.06)
(sat.ddfw       1      1   18.7735    460001      2254          9            1       47)
ramon: poll                 wall=5.003s usage=5.199s mem=58664KiB load=1.11 rootload=1.12
(smt.stats   17   2066  73160  83719  3833/3520/438    4145/669    31  223   56.15)
(smt.stats   18   2200  78732  95320  3859/3556/440    4470/771    33  250   56.25)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   19   2347  85436 107385  4019/3615/443    4914/773    33  250   56.54)
(sat.ddfw       1      1   17.0707    560001      2745         10            1       57)
ramon: poll                 wall=6.000s usage=6.199s mem=58988KiB load=1.00 rootload=1.00
(smt.stats   20   2508  91124 118172  4205/3870/449    5517/817    34  279   56.64)
(smt.stats   21   2609  99317 140973  4240/3898/449    5717/889    35  299   56.87)
ramon: poll                 wall=7.000s usage=7.198s mem=59212KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   15.6673    670001      3284         11            1       68)
(smt.stats   22   2720 104872 150094  4313/3899/449    6152/891    35  299   57.16)
ramon: poll                 wall=8.000s usage=8.201s mem=59572KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   14.4805    790001      3872         12            1       80)
ramon: poll                 wall=9.000s usage=9.204s mem=59580KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   13.4311    920001      4509         13            1       93)
(smt.stats   23   2842 111210 161570  4551/3985/449    6464/902    35  299   57.26)
ramon: poll                 wall=10.000s usage=10.203s mem=59844KiB load=1.00 rootload=1.00
ramon: poll                 wall=11.003s usage=11.250s mem=59612KiB load=1.04 rootload=1.05
(sat.ddfw       1      1   12.6274   1060001      5196         14            1      108)
(smt.stats   24   2976 115741 173151  4679/4338/451    7071/1016    36  302   57.45)
ramon: poll                 wall=12.007s usage=12.291s mem=59936KiB load=1.04 rootload=1.04
(sat.ddfw       1      1   11.8944   1210001      5931         15            1      123)
ramon: poll                 wall=13.000s usage=13.282s mem=60244KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   25   3123 124178 189378  4828/4358/452    7570/1019    36  302   57.54)
ramon: poll                 wall=14.000s usage=14.342s mem=60336KiB load=1.06 rootload=1.06
(sat.ddfw       1      1   11.1826   1370001      6715         16            1      139)
(smt.stats   26   3284 135607 214453  5050/4500/452    8146/1092    37  310   57.73)
ramon: poll                 wall=15.000s usage=15.341s mem=60424KiB load=1.00 rootload=1.00
(smt.stats   27   3461 143452 230061  5232/4721/452    8762/1095    37  310   58.05)
(smt.stats   28   3562 148340 238560  5257/4892/452    9276/1097    37  310   58.15)
ramon: poll                 wall=16.000s usage=16.341s mem=60524KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   10.5511   1540001      7549         17            1      156)
(smt.stats   29   3673 157043 252276  5333/4929/452    9804/1097    37  310   58.25)
(smt.stats   30   3795 165401 267797  5400/4998/452   10223/1098    37  310   58.25)
ramon: poll                 wall=17.003s usage=17.345s mem=60752KiB load=1.00 rootload=1.00
(smt.stats   31   3929 171854 283927  5534/5065/452   10797/1103    37  310   58.34)
ramon: poll                 wall=18.000s usage=18.341s mem=60900KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   9.99001   1720001      8431         18            1      174)
(smt.stats   32   4076 178304 301020  5577/5208/455   11481/1323    38  339   58.53)
(smt.stats   33   4237 184771 321553  5662/5271/455   12009/1326    38  339   58.53)
ramon: poll                 wall=19.000s usage=19.341s mem=61144KiB load=1.00 rootload=1.00
(smt.stats   34   4414 193123 349073  5822/5333/455   12738/1456    39  342   58.73)
ramon: poll                 wall=20.000s usage=20.341s mem=61324KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 21:52:53 2024
ramon: root.execname        z3
ramon: root.utime           20.340s
ramon: root.stime           0.010s
ramon: group.total          20.359s
ramon: group.utime          20.343s
ramon: group.stime          0.016s
ramon: group.mempeak        61580KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.017s
ramon: loadavg              1.02
