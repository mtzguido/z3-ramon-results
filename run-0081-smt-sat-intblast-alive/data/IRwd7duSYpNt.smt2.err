ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 20:08:55 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29325 MiB
ramon: sys.mem.avail        62091 MiB
ramon: sys.nprocs           1394
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/IRwd7duSYpNt.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             355401
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   240/240     0/0  61       0    18.54   0.00)
(sat.stats    165    711    0   240/240   165/72  61       0    18.85   0.01)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 333 :time 0.00)
(sat.stats    165    711    0   240/240   165/72  61       0    18.85   0.01)
(sat.stats    165    711    0   240/240   165/72  61       0    18.85   0.01)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 0 :time 0.00)
 (sat-probing :cost 569418.85 :time 0.00)
(sat.stats    165    711    0   240/240   167/74  61       0    18.85   0.01)
(sat.stats    333   2561    1   240/240   335/181  61       0    19.04   0.02)
(sat.stats :conflicts    :restarts     :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    336   2613    2   240/240   338/184  61       0    19.04   0.02)
(sat.stats    339   2682    3   240/240   341/185  61       0    19.04   0.02)
(sat.stats    342   2753    4   240/240   344/185  61       0    19.04   0.02)
(sat.stats    345   2829    5   240/240   347/186  61       0    19.04   0.02)
(sat.stats    349   2910    6   240/240   351/188  61       0    19.04   0.02)
(sat.stats    352   2947    7   240/240   354/190  61       0    19.04   0.02)
(sat.stats    355   2976    8   240/240   357/190  61       0    19.04   0.02)
(sat.stats    358   3061    9   240/240   360/190  61       0    19.04   0.02)
(sat.stats    361   3141   10   240/240   363/190  61       0    19.04   0.02)
(sat.stats    364   3230   11   240/240   366/190  61       0    19.04   0.02)
(sat.stats    367   3339   12   240/240   369/190  61       0    19.04   0.02)
(sat.stats    370   3463   13   240/240   372/190  61       0    19.04   0.02)
(sat.stats    373   3603   14   240/240   375/190  61       0    19.04   0.02)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 2294 :time 0.00)
(sat.stats    519   5784   24   713/712   520/205  68       0    20.50   0.56)
ramon: poll                 wall=1.004s usage=0.958s mem=22328KiB load=0.95 rootload=0.95
(sat.stats :conflicts   :restarts       :learned/bin        :gc          :time)
(sat.stats       :decisions   :clauses/bin        :units        :memory       )
(sat.stats    710   8949   54  5378/5377   738/232  68       0    20.98   1.20)
(sat.stats   1064  15832  116  8592/8591  1116/276  68       0    22.15   1.95)
ramon: poll                 wall=2.000s usage=1.953s mem=23180KiB load=1.00 rootload=0.99
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 15597 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 16069 :time 0.00)
 (sat-cleaner :elim-literals 36 :elim-clauses 0 :cost 16874 :time 0.00)
 (sat-cleaner :elim-literals 228 :elim-clauses 1 :cost 18140 :time 0.00)
(sat.stats   1706  38983  218 11105/11104  1754/531  77       0    22.34   2.47)
 (sat-cleaner :elim-literals 5 :elim-clauses 1 :cost 21479 :time 0.00)
ramon: poll                 wall=3.000s usage=2.952s mem=23640KiB load=1.00 rootload=1.00
ramon: poll                 wall=4.000s usage=3.952s mem=24540KiB load=1.00 rootload=1.00
(sat.stats   3266  79492  221 15109/15108  3442/666  83       0    23.13   3.96)
(sat.stats   3597  86600  280 15702/15701  3778/758  83       0    23.22   4.21)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 31337 :time 0.00)
ramon: poll                 wall=5.000s usage=4.951s mem=24780KiB load=1.00 rootload=1.00
ramon: poll                 wall=6.000s usage=5.950s mem=25200KiB load=1.00 rootload=1.00
ramon: poll                 wall=7.000s usage=6.949s mem=25700KiB load=1.00 rootload=1.00
ramon: poll                 wall=8.000s usage=7.949s mem=26308KiB load=1.00 rootload=1.00
(sat.stats   7960 156995  282 35342/35341  6580/1019  84       0    26.48   8.89)
 (sat-cleaner :elim-literals 5 :elim-clauses 1 :cost 44913 :time 0.00)
ramon: poll                 wall=9.000s usage=8.948s mem=27596KiB load=1.00 rootload=1.00
(sat.stats :conflicts  :restarts        :learned/bin          :gc          :time)
(sat.stats     :decisions    :clauses/bin           :units        :memory       )
(sat.stats   8090 158852  318 37161/37160  6646/1021  86       0    26.67   9.15)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 45706 :time 0.00)
ramon: poll                 wall=10.000s usage=9.947s mem=27860KiB load=1.00 rootload=0.99
 (sat-cleaner :elim-literals 14 :elim-clauses 0 :cost 48468 :time 0.00)
ramon: poll                 wall=11.000s usage=10.947s mem=28132KiB load=1.00 rootload=1.00
ramon: poll                 wall=12.003s usage=11.946s mem=28352KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 2 :elim-clauses 1 :cost 52346 :time 0.00)
ramon: poll                 wall=13.000s usage=12.945s mem=28716KiB load=1.00 rootload=1.00
(sat.stats  12372 218592  501 45583/45582  9219/1272  89       0    28.08  13.92)
ramon: poll                 wall=14.004s usage=13.948s mem=29192KiB load=1.00 rootload=1.01
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 0 := 18014398509481811 << 17
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 131024 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 131023 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 131022 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 131040 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 131012 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 131016 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 62080 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 64 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 55808 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 256 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 107520 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 14336 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 16384 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 4096 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 8192 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 65536 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 32768 := 131071&18014398508040192
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
shl: (shl[64] (bv2int %0) (mod (+ #51 #346) 64)) 18014398509481902 := 18014398509481973 << 17
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 42 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 1 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 4 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 64 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 8 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 48 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 32 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 128 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 1024 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 256 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 512 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 67584 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 118784 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 8192 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 16384 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 65536 := 18014398508040192&131071
band: (band[54] (if (= #580 53) 1 (if #582 3 #733)) (shl[54] (bv2int %0) (mod #51 54))) 0 := 131071&18014398508040192
band: (band[54] (shl[64] (bv2int %0) (mod #347 64)) (if (= #753 63) 0 (if #755 1 #887))) 32768 := 18014398508040192&131071
ramon: poll                 wall=15.000s usage=14.944s mem=37292KiB load=1.00 rootload=0.98
ramon: poll                 wall=16.000s usage=15.943s mem=58168KiB load=1.00 rootload=0.99
ramon: poll                 wall=17.000s usage=16.943s mem=65208KiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.943s mem=70072KiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.943s mem=73912KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.943s mem=93104KiB load=1.00 rootload=0.99
ramon: end                  Fri Nov  1 20:09:15 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.040s
ramon: group.total          19.996s
ramon: group.utime          19.952s
ramon: group.stime          0.044s
ramon: group.mempeak        104MiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.054s
ramon: loadavg              1.00
