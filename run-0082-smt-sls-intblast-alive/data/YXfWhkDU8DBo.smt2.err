ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:42:05 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27956 MiB
ramon: sys.mem.avail        62085 MiB
ramon: sys.nprocs           1382
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/YXfWhkDU8DBo.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             846382
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   106.383     10000        49          0            1        2)
(sat.ddfw       1      1    65.366     20001        98          1            1        3)
(sat.ddfw       1      1   66.2252     40001       196          2            1        5)
(smt.stats    0    101   4389    456  1197/1083/114      96/12    10   23   52.19)
(sat.ddfw       1      1   47.4684     70001       343          3            1        8)
(smt.stats    1    202   5827    783  2115/1890/115     201/17    11   23   52.28)
ramon: poll                 wall=1.002s usage=0.969s mem=54644KiB load=0.97 rootload=0.96
(smt.stats    2    313   8495   1692  2425/1978/115     322/36    11   23   52.47)
(sat.ddfw       1      1    37.037    110001       539          4            1       12)
(smt.stats    3    414   9832   2646  2495/2256/117     423/44    12   28   52.66)
(smt.stats    4    525  11451   3475  2736/2517/124     543/72    15   36   52.66)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 1&1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 1&1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 2&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 17803292276948994 := 94 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 2&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 17803292276948994 := 94 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 2&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 17803292276948994 := 94 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 376&1
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 1 := 94 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 377&1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 378&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 378 := 94 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 376&1
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 0 := 94 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 376&1
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 0 := 94 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 376&1
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 1 := 376&1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1 := 376&1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 376&1
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 1 := 376&1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 376&1
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 1 := 376&1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1 := 376&1
(smt.stats    5    647  14235   4977  2813/2588/161     684/110    17   46   52.86)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 372&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 70368744178036 := 93 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 372&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 372 := 93 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 372&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 372 := 93 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 186&0
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 184 := 93 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 186&0
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 184 := 93 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 186&0
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 94 := 93 << 1
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas         :deletions    )
(smt.stats    6    748  15060   6341  2876/2602/161     789/113    17   46   52.96)
(sat.ddfw       1      1   30.5058    160000       784          5            1       17)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 30 := 54&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 22 := 32&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 8 := 30&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 8&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 8 := 12&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 8 := 8&31
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 8 := 98 << 6
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 8 := 8&31
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 8 := 98 << 6
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 8 := 8&31
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 8 := 98 << 6
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 30&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 30&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 22&31
(smt.stats    7    859  17216   8583  2956/2674/172     921/119    18   48   53.15)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 18&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 6&31
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 6 := 98 << 6
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 30&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 22&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 30&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 22&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 6 := 6&31
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 6 := 98 << 6
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 12 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 8 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 16 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 24 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 16 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 16 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 8 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 28 := 98 << 6
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 28 := 98 << 6
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 30 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 5 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 4 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 8 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 16 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 29 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 28 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 24 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 16 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 4 := 6272&31
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 6272&31
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 4 := 6272&31
(smt.stats    8    981  22027  11121  3038/2788/279    1064/145    20   71   53.45)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 76&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 76&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 76&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 76&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 68&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 68&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 68&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 68&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 36&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 36&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 36&127
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4 := 36&127
(smt.stats    9   1116  27524  15377  3109/2860/323    1200/202    24  123   53.74)
ramon: poll                 wall=2.002s usage=1.967s mem=56020KiB load=1.00 rootload=0.99
(smt.stats   10   1217  31453  18219  3116/2862/326    1305/203    24  123   53.84)
(smt.stats   11   1328  37312  23921  3135/2886/327    1393/207    26  138   53.84)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1450  41382  29728  3152/2901/329    1553/233    27  142   54.03)
(sat.ddfw       1      1   26.0534    220001      1078          6            1       23)
(smt.stats   13   1584  46688  37236  3155/2904/331    1756/247    28  150   54.17)
(smt.stats   14   1731  52613  48242  3168/2909/331    1903/248    28  150   54.17)
(smt.stats   15   1832  57359  54774  3182/2922/332    2015/294    29  150   54.17)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 64 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 64 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 64 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 64 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 192 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 192 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 64 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 192 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 960 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 960 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 64 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 192 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 320 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 448 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 448 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 448 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 448 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 704 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 960 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 448 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 704 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 960 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1472 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1984 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1472 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 960 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 704 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 960 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 2752 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 3008 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1984 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1984 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1984 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1984 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4032 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 4032 := 70368744177600&4294967295
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 16320 := 70368744177600&4294967295
(smt.stats   16   1943  60723  61262  3294/3043/428    2261/353    31  180   54.56)
(smt.stats   17   2065  65073  68987  3310/3059/435    2397/353    32  188   54.77)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 3424 := 70368744176994&8796093022207
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 3426 := 70368744176994&8796093022207
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 3426 := 70368744176994&8796093022207
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 3426 := 70368744176994&8796093022207
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 3426 := 70368744176994&8796093022207
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 3426 := 70368744176994&8796093022207
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 7522 := 70368744176994&8796093022207
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 7522 := 70368744176994&8796093022207
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 7522 := 70368744176994&8796093022207
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 8034 := 70368744176994&8796093022207
(smt.stats   18   2199  68914  75248  3487/3236/460    2681/476    34  210   54.86)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 7650 := 70368744176995&17592186044415
ramon: poll                 wall=3.000s usage=2.962s mem=57216KiB load=1.00 rootload=0.99
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 7650 := 70368744177010&17592186044415
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 7654 := 70368744176998&17592186044415
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 15716 := 70368744176996&17592186044415
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 15716 := 70368744176996&17592186044415
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 15716 := 70368744176996&17592186044415
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 15716 := 70368744176996&17592186044415
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 15716 := 70368744176996&17592186044415
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 15716 := 70368744176996&17592186044415
(smt.stats   19   2346  73708  83339  3605/3324/466    3044/596    35  211   54.96)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 32100 := 70368744176992&17592186044415
(sat.ddfw       1      1   22.7568    290001      1421          7            1       30)
(smt.stats   20   2507  76875  92315  3742/3491/479    3507/658    36  223   55.17)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 352 := 352&511
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 352 := 70368744177624 << 10
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 360 := 360&511
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 360 := 70368744177624 << 10
(smt.stats   21   2608  79473  97333  3795/3492/479    3710/758    37  233   55.28)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 256 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 32 := 70368744177624 << 10
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 32 := 70368744177624 << 10
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 3 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 1 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 2 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 32 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 64 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 128 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 256 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 256 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 32 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 64 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 128 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 128 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 24 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 0 := 70368744136704&511
band: (band[46] (shl[46] (bv2int %0) (mod #107 46)) (if (= #599 45) 0 (if #601 1 #727))) 24 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 8 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 64 := 70368744136704&511
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 32 := 70368744136704&511
(smt.stats   22   2719  83256 104504  3928/3666/537    3871/841    38  243   56.01)
(smt.stats   23   2841  89899 111985  4000/3725/537    3990/841    38  243   56.01)
(smt.stats   24   2975  94970 122643  4021/3748/539    4405/955    40  266   56.19)
(smt.stats   25   3122  99671 135554  4026/3753/539    4639/955    40  266   56.29)
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 2 := 70368744177594&7
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 140737488355258 := 70368744177618 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 2 := 70368744177594&7
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 211106232532922 := 70368744177618 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #351 64)) (if (or #747 #748) 0 (if #749 1 #887))) 2 := 70368744177594&7
shl: (shl[64] (bv2int %0) (mod (+ #107 #350) 64)) 211106232532922 := 70368744177618 << 4
ramon: poll                 wall=4.000s usage=3.964s mem=58680KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   20.1511    370001      1813          8            1       38)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   26   3283 103266 146746  4182/3800/541    4910/1059    41  266   56.38)
(smt.stats   27   3460 104948 148738  4474/3986/546    5105/1084    42  267   56.77)
(smt.stats   28   3561 108111 156704  4943/4668/549    5326/1084    42  267   56.87)
(smt.stats   29   3672 113417 172951  4947/4669/549    5604/1146    43  280   56.87)
(smt.stats   30   3794 117522 186186  5081/4686/549    5918/1149    43  280   56.96)
ramon: poll                 wall=5.000s usage=4.962s mem=59384KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   18.1159    460001      2254          9            1       47)
(smt.stats   31   3928 120206 196433  5265/4822/549    6314/1150    43  280   57.06)
(smt.stats   32   4075 123725 206816  5322/5002/550    6733/1396    44  284   57.15)
(smt.stats   33   4236 128769 234952  5796/5209/552    7471/1471    45  288   57.34)
ramon: poll                 wall=6.002s usage=6.020s mem=59868KiB load=1.06 rootload=1.06
(sat.ddfw       1      1   16.7616    560001      2745         10            1       57)
(smt.stats   34   4413 135213 258602  6035/5526/552    8209/1475    45  288   57.53)
(smt.stats   35   4607 140224 272164  6115/5822/556    8856/1726    46  289   58.13)
ramon: poll                 wall=7.000s usage=7.014s mem=60520KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   15.3182    670001      3284         11            1       68)
(smt.stats   36   4708 144755 285075  6153/5825/556    9772/1730    46  289   58.32)
ramon: poll                 wall=8.000s usage=8.013s mem=60548KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   14.0895    790001      3872         12            1       80)
(smt.stats   37   4819 149061 298255  6298/5964/557   10616/1968    47  290   58.51)
ramon: poll                 wall=9.000s usage=9.012s mem=61052KiB load=1.00 rootload=1.00
(smt.stats   38   4941 154312 312567  6387/6047/557   11018/1969    47  290   58.51)
(smt.delete-inactive-clauses  :num-deleted-clauses 89)
(smt.stats   39   5075 160191 341341  6436/6118/557   11507/1971    47  290   58.61)
(smt.stats   40   5222 167392 384407  6494/6154/557   12139/1976    47  290   58.61)
ramon: poll                 wall=10.000s usage=10.012s mem=61576KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   13.0522    920001      4509         13            1       93)
(smt.stats   41   5383 173377 414490  6705/6204/557   12747/1989    47  290   58.81)
(smt.stats   42   5560 179876 445202  6796/6497/559   13514/2755    48  294   58.81)
(smt.stats   43   5754 187864 484380  6985/6518/562   14194/2913    49  294   58.90)
ramon: poll                 wall=11.000s usage=11.010s mem=61420KiB load=1.00 rootload=1.00
(smt.stats   44   5967 193981 514043  7289/6709/562   15289/3075    50  300   59.10)
(sat.ddfw       1      1   12.1729   1060001      5196         14            1      108)
(smt.stats   45   6068 198067 531463  7365/7001/562   15707/3080    50  300   59.30)
ramon: poll                 wall=12.000s usage=12.010s mem=61936KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   46   6179 204376 573762  7372/7079/562   15863/3080    50  300   59.47)
(smt.stats   47   6301 210440 612220  7378/7085/562   16320/3080    50  300   59.90)
(smt.stats   48   6435 213562 635105  7405/7112/562   17414/3080    50  300   60.09)
ramon: poll                 wall=13.000s usage=13.008s mem=62384KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   11.4077   1210001      5931         15            1      123)
(smt.stats   49   6582 220142 675089  7418/7125/562   18056/3080    50  300   60.09)
(smt.stats   50   6743 227677 714423  7534/7130/562   18767/3082    50  300   60.18)
ramon: poll                 wall=14.000s usage=14.009s mem=62660KiB load=1.00 rootload=1.00
(smt.stats   51   6920 234001 754434  7775/7259/562   19657/3091    50  300   60.47)
ramon: poll                 wall=15.000s usage=15.003s mem=62772KiB load=0.99 rootload=1.00
(sat.ddfw       1      1   10.7267   1370001      6715         16            1      139)
(smt.stats   52   7114 239962 787673  7828/7491/562   20203/3096    50  300   60.47)
ramon: poll                 wall=16.000s usage=16.003s mem=62856KiB load=1.00 rootload=1.00
(smt.stats   53   7327 248843 820330  7928/7557/563   20834/4470    51  314   60.57)
(sat.ddfw       1      1   10.1124   1540001      7549         17            1      156)
ramon: poll                 wall=17.000s usage=17.004s mem=63252KiB load=1.00 rootload=1.00
(smt.stats   54   7561 255037 845711  8214/7658/563   21430/4470    51  314   61.28)
(smt.stats   55   7662 256636 863301  8249/7954/563   21603/4470    51  314   61.28)
ramon: poll                 wall=18.000s usage=18.004s mem=63792KiB load=1.00 rootload=1.00
(sat.ddfw       1      1    9.5704   1720001      8431         18            1      174)
ramon: poll                 wall=19.000s usage=19.003s mem=63796KiB load=1.00 rootload=1.00
(smt.stats   56   7773 258306 873343  8389/7977/564   21807/4661    52  314   61.37)
ramon: poll                 wall=20.000s usage=19.861s mem=63816KiB load=0.86 rootload=0.85
ramon: end                  Fri Nov  1 22:42:25 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.020s
ramon: group.total          19.982s
ramon: group.utime          19.958s
ramon: group.stime          0.024s
ramon: group.mempeak        64076KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.096s
ramon: loadavg              0.99
