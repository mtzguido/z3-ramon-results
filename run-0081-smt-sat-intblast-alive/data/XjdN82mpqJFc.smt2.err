ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 20:42:14 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28971 MiB
ramon: sys.mem.avail        62090 MiB
ramon: sys.nprocs           1397
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/XjdN82mpqJFc.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             454982
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   216/216     0/0  64       0    18.53   0.00)
(sat.stats    171    936    0   216/216   171/80  64       0    18.82   0.01)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 480 :time 0.00)
(sat.stats    171    936    0   216/216   171/80  64       0    18.82   0.01)
(sat.stats    171    936    0   216/216   171/80  64       0    18.82   0.01)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 2 :time 0.00)
 (sat-probing :cost 539618.82 :time 0.00)
(sat.stats    171    936    0   218/218   149/79  64       0    18.82   0.01)
(sat.stats    192   1104    1   218/218   170/96  64       0    18.82   0.01)
(sat.stats :conflicts    :restarts     :learned/bin       :gc          :time)
(sat.stats       :decisions    :clauses/bin     :units        :memory       )
(sat.stats    195   1136    2   218/218   173/97  64       0    18.82   0.01)
(sat.stats    198   1163    3   218/218   176/98  64       0    18.82   0.01)
(sat.stats    201   1201    4   218/218   179/100  64       0    18.82   0.01)
(sat.stats    204   1208    5   218/218   182/103  64       0    18.92   0.01)
(sat.stats    207   1251    6   218/218   185/106  64       0    18.92   0.01)
(sat.stats    259   2420    7   218/218   237/143  64       0    18.92   0.01)
(sat.stats :conflicts    :restarts     :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    262   2494    8   218/218   240/145  64       0    18.92   0.01)
(sat.stats    265   2578    9   218/218   243/147  64       0    18.92   0.01)
(sat.stats    268   2682   10   218/218   246/149  64       0    18.92   0.01)
(sat.stats    271   2741   11   218/218   249/150  64       0    18.92   0.02)
(sat.stats    275   2781   12   218/218   253/152  64       0    18.92   0.02)
(sat.stats    278   2830   13   218/218   256/152  64       0    18.92   0.02)
(sat.stats    340   3989   17   218/218   318/175  64       0    19.03   0.02)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 4027 :time 0.00)
(sat.stats    516   7684   30   381/381   492/225  76       0    19.60   0.31)
 (sat-cleaner :elim-literals 5 :elim-clauses 1 :cost 4493 :time 0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 4841 :time 0.00)
lshr: (lshr[42] (bv2int %0) (+ 42 (* 4398046511103 #62))) 0 := 4398046511098 >>l 26
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 0&4398046445568
lshr: (lshr[64] (mod (div #56 2) 2199023255552) (mod (+ 41 #676 #678) 64)) 4398046511103 := 176 >>l 25
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 1&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 1 := 4398046445568&1
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 1 := 2&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 2&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 2 := 4398046445568&2
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 2 := 4&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 2 := 6&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 6&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 4 := 4398046445568&6
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 11&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 8 := 4398046445568&11
 (sat-cleaner :elim-literals 10 :elim-clauses 1 :cost 6034 :time 0.00)
(sat.stats :conflicts   :restarts       :learned/bin        :gc          :time)
(sat.stats      :decisions    :clauses/bin       :units         :memory       )
(sat.stats    742  19220   54  1333/1331   725/303 133       0    20.32   0.46)
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 16&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 16 := 4398046445568&16
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 32&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 32 := 4398046445568&32
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 64&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 64 := 4398046445568&64
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 128&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 128 := 4398046445568&128
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 256&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 256 := 4398046445568&256
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 512&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 512 := 4398046445568&512
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 1024&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 1024 := 4398046445568&1024
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 2048&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 2048 := 4398046445568&2048
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 4096&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 4096 := 4398046445568&4096
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 8192&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 8192 := 4398046445568&8192
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 16384&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 16384 := 4398046445568&16384
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 0 := 32768&4398046445568
band: (band[42] (if (= #545 63) 40564819207294117475857647796224 (if #547 20282409603647058737928823898112 #671)) (lshr[64] (mod #432 2199023255552) (mod #679 64))) 32768 := 4398046445568&32768
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 6853 :time 0.00)
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 19720 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 4 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 16 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 58016 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 7424 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 192 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 128 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 16384 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 512 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 8192 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 2048 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 1024 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 4096 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 32768 := 65535&4398046445568
band: (band[42] (lshr[42] (bv2int %0) (+ 42 #450)) (if (= #52 41) 9671406556914834374393856 (if #454 4835703278457417187196928 #534))) 1 := 65535&4398046445568
(sat.stats   1200  26152   93 13103/13100  1596/729 216       0    24.10   0.67)
(sat.stats   1598  27637  222 23326/23323  2380/1115 216       0    26.69   0.89)
ramon: poll                 wall=1.000s usage=0.930s mem=28244KiB load=0.93 rootload=0.91
ramon: poll                 wall=2.000s usage=1.928s mem=34212KiB load=1.00 rootload=0.99
ramon: poll                 wall=3.000s usage=2.927s mem=37828KiB load=1.00 rootload=0.99
(sat.stats   3221  33540  311 65027/65024  5576/2688 216       0    37.27   2.97)
ramon: poll                 wall=4.000s usage=3.926s mem=41948KiB load=1.00 rootload=1.00
(sat.stats   3675  35133  360 99199/99196  6470/3128 216       0    49.37   4.39)
ramon: poll                 wall=5.000s usage=4.926s mem=52192KiB load=1.00 rootload=1.00
ramon: poll                 wall=6.000s usage=5.926s mem=54912KiB load=1.00 rootload=0.99
ramon: poll                 wall=7.000s usage=6.925s mem=57572KiB load=1.00 rootload=1.00
ramon: poll                 wall=8.000s usage=7.925s mem=59280KiB load=1.00 rootload=1.00
(sat.stats   5396  36914  738 124906/124903  8851/4486 216       0    58.98   8.28)
ramon: poll                 wall=9.000s usage=8.924s mem=60768KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.924s mem=62260KiB load=1.00 rootload=0.99
ramon: poll                 wall=11.000s usage=10.924s mem=64228KiB load=1.00 rootload=1.00
ramon: poll                 wall=12.000s usage=11.923s mem=65492KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.923s mem=69960KiB load=1.00 rootload=0.99
ramon: poll                 wall=14.000s usage=13.922s mem=87068KiB load=1.00 rootload=0.99
ramon: poll                 wall=15.000s usage=14.922s mem=88208KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.921s mem=89264KiB load=1.00 rootload=0.99
ramon: poll                 wall=17.000s usage=16.921s mem=90616KiB load=1.00 rootload=1.00
(sat.stats :conflicts  :restarts         :learned/bin           :gc         :time )
(sat.stats      :decisions   :clauses/bin            :units         :memory       )
(sat.stats   8092  39610  945 160628/160625 12221/6508 216       0    89.85  17.03)
ramon: poll                 wall=18.000s usage=17.921s mem=91404KiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.920s mem=93756KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.920s mem=94032KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 20:42:34 2024
ramon: root.execname        z3
ramon: root.utime           19.910s
ramon: root.stime           0.080s
ramon: group.total          19.997s
ramon: group.utime          19.921s
ramon: group.stime          0.076s
ramon: group.mempeak        101MiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.078s
ramon: loadavg              1.00
