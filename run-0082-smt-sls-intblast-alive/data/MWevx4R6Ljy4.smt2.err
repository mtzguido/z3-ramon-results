ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:19:08 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28438 MiB
ramon: sys.mem.avail        62086 MiB
ramon: sys.nprocs           1382
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/MWevx4R6Ljy4.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             768085
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1    75.188     10000        49          0            1        2)
(sat.ddfw       1      1   38.1718     20001        98          1            1        3)
(sat.ddfw       1      1   38.5356     40001       196          2            1        5)
(sat.ddfw       1      1   33.0396     70001       343          3            1        8)
ramon: poll                 wall=1.004s usage=0.984s mem=54468KiB load=0.98 rootload=0.98
(smt.stats    0    101   5270    883  1381/1243/109     101/22     7   17   52.28)
(smt.stats    1    202   7566   1821  2628/1801/109     203/82     7   17   52.47)
(sat.ddfw       1      1   28.1889    110001       539          4            1       12)
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 28 := 306&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 24 := 306&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 306&28
shl: (shl[64] (bv2int %0) (mod (+ #114 #836) 64)) 306 := 7 << 7
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 306&28
shl: (shl[64] (bv2int %0) (mod (+ #114 #836) 64)) 306 := 7 << 7
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 306&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 8&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 8&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 32&28
shl: (shl[64] (bv2int %0) (mod (+ #114 #836) 64)) 32 := 7 << 7
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
shl: (shl[61] (bv2int %0) (mod (bv2int %0) 61)) 7 := 7 << 7
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
shl: (shl[61] (bv2int %0) (mod (bv2int %0) 61)) 7 := 7 << 7
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
band: (band[61] (shl[61] (bv2int %0) (mod #114 61)) (if (or #655 #656) 0 (if #657 1 #825))) 1 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
band: (band[61] (shl[61] (bv2int %0) (mod #114 61)) (if (or #655 #656) 0 (if #657 1 #825))) 2 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
band: (band[61] (shl[61] (bv2int %0) (mod #114 61)) (if (or #655 #656) 0 (if #657 1 #825))) 28 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
band: (band[61] (shl[61] (bv2int %0) (mod #114 61)) (if (or #655 #656) 0 (if #657 1 #825))) 8 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
band: (band[61] (shl[61] (bv2int %0) (mod #114 61)) (if (or #655 #656) 0 (if #657 1 #825))) 8 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
band: (band[61] (shl[61] (bv2int %0) (mod #114 61)) (if (or #655 #656) 0 (if #657 1 #825))) 16 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
band: (band[61] (shl[61] (bv2int %0) (mod #114 61)) (if (or #655 #656) 0 (if #657 1 #825))) 4 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
band: (band[61] (shl[61] (bv2int %0) (mod #114 61)) (if (or #655 #656) 0 (if #657 1 #825))) 2 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 896&28
band: (band[61] (shl[61] (bv2int %0) (mod #114 61)) (if (or #655 #656) 0 (if #657 1 #825))) 1 := 896&28
(smt.stats    2    314  10768   3206  2738/2422/139     311/92    10   28   52.76)
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 1 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 2 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 4 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 8 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 14 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 14 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 13 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 12 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 12 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 8 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 9 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 8 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 1 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 1 := 896&28
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 896&28
(smt.stats    3    417  15127   5665  2774/2516/238     415/97    13   53   53.07)
(smt.stats    4    528  16960   7259  2841/2573/260     485/129    15   95   53.27)
(smt.stats    5    650  19529  10076  2946/2650/266     630/149    18  102   53.46)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    751  23939  14083  3009/2709/269     740/155    20  107   53.56)
(smt.stats    7    862  27653  17235  3065/2738/269     893/159    20  107   53.98)
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 682&454
ramon: poll                 wall=2.000s usage=1.978s mem=56272KiB load=1.00 rootload=0.98
(smt.stats    8    985  30614  20709  3139/2832/282    1119/171    22  129   53.98)
(smt.stats    9   1119  33373  26073  3143/2836/282    1302/171    22  129   53.98)
(smt.stats   10   1220  38343  31664  3147/2839/282    1435/171    22  129   53.98)
(sat.ddfw       1      1   24.1658    160000       784          5            1       17)
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 117701&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 117701&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 1 := 117701&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 117637&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 117669&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 117509&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 117509&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 117509&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 117509&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 116741&116463
(smt.stats   11   1331  43143  35906  3297/2848/283    1623/201    23  130   54.39)
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 5 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 21 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 37 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 69 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 261 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 69 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 133 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 389 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 325 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 32773 := 116741&116463
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 49157 := 116741&116463
(smt.stats   12   1453  46437  41829  3418/3047/360    1874/211    24  140   54.69)
(smt.stats   13   1587  50528  48077  3419/3109/370    2087/253    25  151   54.78)
(smt.stats   14   1734  59337  59644  3427/3110/370    2320/286    26  151   54.78)
(smt.stats   15   1835  63822  66795  3456/3120/370    2528/286    26  151   54.97)
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 2305843009213628560&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 2305843009213628560&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 2305843009213628560&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 2305843009213628560&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 2305843009213628560&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 2305843009213628560&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 2305843009213628560&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 2305843009213628560&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 2305843009213628624&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 16 := 2305843009213628624&976968370483
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 131088 := 2305843009213628560&976968370483
(smt.stats   16   1946  66584  71616  3571/3204/397    2772/402    27  154   55.20)
(sat.ddfw       1      1   20.7904    220001      1078          6            1       23)
ramon: poll                 wall=3.000s usage=2.957s mem=57756KiB load=0.98 rootload=0.98
(smt.stats   17   2068  72259  82302  3612/3307/411    3057/478    28  187   55.40)
(sat.ddfw       1      1   18.4745    290001      1421          7            1       30)
ramon: poll                 wall=4.000s usage=3.955s mem=57908KiB load=1.00 rootload=1.00
(smt.stats   18   2202  76400  87107  3734/3312/411    3253/481    28  187   55.59)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   19   2349  84981 104878  3878/3573/413    3517/607    30  189   55.59)
(sat.ddfw       1      1   16.5906    370001      1813          8            1       38)
ramon: poll                 wall=5.000s usage=4.956s mem=58076KiB load=1.00 rootload=1.00
(smt.stats   20   2510  89994 113902  3921/3616/416    4004/618    31  190   55.68)
(smt.stats   21   2611  95141 122957  3927/3622/418    4159/739    32  206   55.91)
(smt.stats   22   2722 101457 139017  3941/3622/418    4403/740    32  206   55.91)
(smt.stats   23   2844 108096 156201  3956/3647/418    4655/740    32  206   56.02)
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 262144&0
shl: (shl[64] (bv2int %0) (mod (+ #114 #836) 64)) 4611686018427650048 := 124 << 2
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 262144&0
shl: (shl[64] (bv2int %0) (mod (+ #114 #836) 64)) 4611686018427650048 := 124 << 2
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 262144&0
shl: (shl[64] (bv2int %0) (mod (+ #114 #836) 64)) 4611686018427650048 := 124 << 2
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 262144&0
shl: (shl[64] (bv2int %0) (mod (+ #114 #836) 64)) 262144 := 124 << 2
band: (band[61] (shl[64] (bv2int %0) (mod #837 64)) (if (or #852 #853 #854) 0 (if #855 1 #976))) 0 := 262144&0
shl: (shl[64] (bv2int %0) (mod (+ #114 #836) 64)) 262144 := 124 << 2
(smt.stats   24   2978 111994 170361  3998/3691/427    5012/803    33  209   56.12)
ramon: poll                 wall=6.000s usage=5.958s mem=58596KiB load=1.00 rootload=1.00
(smt.stats   25   3125 118241 178105  4093/3695/427    5342/809    33  209   56.11)
(sat.ddfw       1      1   15.0451    460001      2254          9            1       47)
(smt.stats   26   3286 125107 192716  4224/3869/427    5582/919    34  221   56.29)
(smt.stats   27   3463 131580 213037  4269/3962/428    5994/966    35  224   56.29)
(smt.stats   28   3564 138203 230814  4279/3966/428    6311/966    35  224   56.38)
(smt.stats   29   3675 142739 244995  4310/3981/428    6518/970    35  224   56.69)
(smt.stats   30   3797 149664 261394  4331/4009/428    6713/970    35  224   56.69)
ramon: poll                 wall=7.000s usage=6.957s mem=58976KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   13.7419    560001      2745         10            1       57)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   31   3931 154347 277256  4375/4046/429    6931/1089    36  224   56.78)
ramon: poll                 wall=8.000s usage=7.953s mem=59168KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   12.6306    670001      3284         11            1       68)
ramon: poll                 wall=9.000s usage=8.951s mem=59028KiB load=1.00 rootload=0.99
ramon: poll                 wall=10.000s usage=9.951s mem=59028KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   11.6959    790001      3872         12            1       80)
ramon: poll                 wall=11.000s usage=10.947s mem=59028KiB load=1.00 rootload=1.00
ramon: poll                 wall=12.000s usage=11.949s mem=59028KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   10.8969    920001      4509         13            1       93)
ramon: poll                 wall=13.000s usage=12.946s mem=59028KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   10.1974   1060001      5196         14            1      108)
ramon: poll                 wall=14.000s usage=13.948s mem=59028KiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.952s mem=59052KiB load=1.00 rootload=1.01
(smt.stats   32   4078 158185 286428  4513/4103/429    7242/1095    36  224   56.88)
(sat.ddfw       1      1   9.57732   1210001      5931         15            1      123)
ramon: poll                 wall=16.000s usage=15.981s mem=59092KiB load=1.03 rootload=1.02
ramon: poll                 wall=17.000s usage=17.078s mem=59348KiB load=1.10 rootload=1.10
(sat.ddfw       1      1   9.13086   1370001      6715         16            1      139)
ramon: poll                 wall=18.004s usage=18.103s mem=59364KiB load=1.02 rootload=1.03
(smt.stats   33   4239 163520 307811  4621/4232/429    7545/1099    36  224   57.16)
ramon: poll                 wall=19.000s usage=19.135s mem=59428KiB load=1.04 rootload=1.03
(sat.ddfw       1      1   8.67701   1540001      7549         17            1      156)
ramon: poll                 wall=20.000s usage=20.138s mem=59496KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 22:19:28 2024
ramon: root.execname        z3
ramon: root.utime           20.190s
ramon: root.stime           0.010s
ramon: group.total          20.211s
ramon: group.utime          20.199s
ramon: group.stime          0.012s
ramon: group.mempeak        59752KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.077s
ramon: loadavg              1.01
