ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:33:37 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         42678 MiB
ramon: sys.mem.avail        61715 MiB
ramon: sys.nprocs           1257
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/74WMOfbqfNVJ.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2808335
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   3862    454  1222/1072/98     106/19     6   14   19.14)
(smt.stats    1    202   5581    860  1681/1457/98     223/24     6   14   19.33)
(smt.stats    2    313   7995   1800  1905/1693/98     360/25     6   14   19.33)
(smt.stats    3    414  10030   2818  2050/1906/103     486/52     8   18   19.33)
(smt.stats    4    525  12548   4364  2264/2023/105     622/124     9   25   19.52)
(smt.stats    5    647  14513   6858  2684/2473/106     754/131    10   26   19.63)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas         :deletions    )
(smt.stats    6    748  15768   9606  2790/2555/106     865/131    10   26   19.63)
(smt.stats    7    859  17051  12373  2810/2609/108     972/146    11   35   19.63)
(smt.stats    8    981  19671  14762  2951/2717/111    1112/166    12   36   19.73)
ramon: poll                 wall=1.002s usage=0.912s mem=20852KiB load=0.91 rootload=0.90
(smt.stats    9   1115  20672  17378  2979/2772/112    1250/174    14   38   19.82)
(smt.stats   10   1216  23238  19113  3068/2852/112    1353/174    14   38   19.92)
(smt.stats   11   1327  24500  23308  3129/2865/112    1468/174    14   38   19.92)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  27771  27095  3136/2916/112    1590/174    14   38   19.92)
(smt.stats   13   1583  31248  30778  3137/2920/112    1725/174    14   38   20.04)
(smt.stats   14   1730  35222  35327  3140/2923/112    1869/174    14   38   20.04)
(smt.stats   15   1831  38282  39747  3148/2930/112    1973/174    14   38   20.04)
(smt.stats   16   1942  41323  45354  3158/2938/112    2086/174    14   38   20.04)
(smt.stats   17   2064  42330  48935  3193/2940/112    2226/174    14   38   20.13)
(smt.stats   18   2198  44506  54090  3197/2977/112    2365/174    14   38   20.13)
(smt.stats   19   2345  46296  59706  3198/2978/112    2512/174    14   38   20.13)
(smt.stats   20   2506  47932  64930  3219/2981/112    2683/175    14   38   20.23)
(smt.stats   21   2607  49000  68112  3229/3009/114    2782/223    15   39   20.23)
(smt.stats   22   2718  50500  72756  3239/3017/114    2896/223    15   39   20.23)
(smt.stats   23   2840  52601  75560  3243/3021/114    3015/227    16   45   20.23)
(smt.stats   24   2974  53668  78923  3251/3027/114    3156/227    16   45   20.49)
(smt.stats   25   3121  54967  84438  3251/3027/114    3305/227    16   45   20.49)
(smt.stats   26   3282  56863  91820  3267/3033/114    3476/227    16   45   20.49)
(smt.stats   27   3459  57934  98294  3287/3053/121    3640/257    17   50   20.49)
(smt.stats   28   3560  58315 101983  3297/3071/122    3744/260    18   52   20.49)
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218173&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218173&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218172&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218173&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218172&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218168&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218160&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218173&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218172&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134218168&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 564&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 568&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 564&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 568&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 568&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 640&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 570&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 568&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 570&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 568&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 192 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 128 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 192 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 64 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 64 := 624&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 64 := 624&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 64 := 608&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 64 := 608&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 64 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 64 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 64 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 320 := 576&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 576 := 578&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 576 := 608&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 576 := 624&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 576 := 608&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 576 := 608&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 608 := 624&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 576 := 592&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 576 := 592&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 576 := 594&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 578 := 594&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 578 := 594&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 578 := 594&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 578 := 594&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 590 := 594&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 586 := 594&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 578 := 594&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 586 := 594&137438953471
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 578 := 594&137438953471
(smt.stats   29   3671  59781 105332  3425/3147/231    3879/274    19   64   20.88)
(smt.stats   30   3793  61416 113164  3619/3393/262    4145/302    20   86   20.98)
ramon: poll                 wall=2.000s usage=1.909s mem=22156KiB load=1.00 rootload=1.00
(smt.stats   31   3927  63335 120524  3657/3404/262    4415/304    20   86   20.98)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions    )
(smt.stats   32   4074  66317 130482  3664/3434/262    4604/304    20   86   21.08)
(smt.stats   33   4235  68239 139731  3665/3439/262    4768/304    20   86   21.08)
(smt.stats   34   4412  72163 157313  3670/3444/264    4982/476    21   89   21.08)
(smt.stats   35   4606  75626 171156  3673/3447/267    5285/476    21   89   21.17)
(smt.stats   36   4707  77204 178487  3675/3449/267    5378/491    22   99   21.17)
(smt.stats   37   4818  78568 185086  3675/3449/267    5489/491    22   99   21.17)
(smt.stats   38   4940  79995 192235  3677/3451/267    5613/491    22   99   21.41)
(smt.delete-inactive-clauses  :num-deleted-clauses 29)
(smt.stats   39   5074  80976 200366  3681/3451/267    5723/491    22   99   21.41)
(smt.stats   40   5221  81666 206197  3681/3455/267    5870/491    22   99   21.41)
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 1 := 134217732&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134217732&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 134217729&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 1 := 134217729&8191
shl: (shl[64] (bv2int %0) (mod (+ #101 #327) 64)) 8796227239937 := 134217548 << 14
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 9 := 134217736&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134217736&8191
shl: (shl[64] (bv2int %0) (mod (+ #101 #327) 64)) 17592320262152 := 134217548 << 14
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134217736&8191
shl: (shl[64] (bv2int %0) (mod (+ #101 #327) 64)) 17592320262152 := 134217548 << 14
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134217992&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134217992&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134217992&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134218760&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134218760&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134218760&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134218760&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134219784&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134218760&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 8 := 134217736&8191
shl: (shl[64] (bv2int %0) (mod (+ #101 #327) 64)) 8796227239944 := 134217548 << 14
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 1 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
shl: (shl[43] (bv2int %0) (mod (bv2int %0) 43)) 8190 := 134217548 << 14
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
shl: (shl[43] (bv2int %0) (mod (bv2int %0) 43)) 8190 := 134217548 << 14
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 8191 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 8190 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 8188 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 8 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 16 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 32 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 64 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 128 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 256 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 512 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 1024 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 2048 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 4096 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 2048 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 4096 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 32 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 16 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 16 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 512 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 256 := 2199020306432&8191
(smt.stats   41   5382  84334 214175  3923/3459/267    6154/507    22   99   22.13)
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 32 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 5 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 4 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 64 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 1 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 128 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 8 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 160 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 160 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 160 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 256 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 512 := 2199020306432&8191
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 0 := 2199020306432&8191
band: (band[43] (shl[43] (bv2int %0) (mod #101 43)) (if (= #582 42) 0 (if #584 1 #701))) 1024 := 2199020306432&8191
(smt.stats   42   5559  89620 226055  3951/3704/440    6506/566    23  130   22.23)
ramon: poll                 wall=3.000s usage=2.909s mem=23772KiB load=1.00 rootload=0.99
(smt.stats   43   5753  94090 237759  4072/3803/441    6916/722    24  140   22.42)
(smt.stats   44   5966  98381 257893  4095/3841/456    7271/744    25  142   22.51)
(smt.stats   45   6067 102415 270369  4102/3848/456    7429/744    25  142   22.51)
(smt.stats   46   6178 106285 281746  4108/3856/456    7517/833    26  190   22.70)
(smt.stats   47   6300 110185 291916  4174/3857/456    7767/839    26  190   22.70)
(smt.stats   48   6434 112936 300623  4319/4067/457    8350/871    27  199   22.92)
(smt.stats   49   6581 119770 326627  4320/4068/457    8539/871    27  199   22.92)
(smt.stats   50   6742 125069 342296  4467/4071/457    8930/878    27  199   23.11)
band: (band[43] (shl[64] (bv2int %0) (mod #328 64)) (if (or #721 #722) 0 (if #723 1 #864))) 3 := 43&7
shl: (shl[64] (bv2int %0) (mod (+ #101 #327) 64)) 17592186044459 := 134217882 << 4
(smt.stats   51   6919 128769 360553  4660/4390/458    9638/1087    28  211   23.60)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   52   7113 133762 374366  4784/4435/465   10484/1096    28  211   23.70)
ramon: poll                 wall=4.000s usage=3.909s mem=25124KiB load=1.00 rootload=1.00
(smt.stats   53   7326 141388 413764  5303/4619/465   11625/1102    28  211   23.89)
(smt.stats   54   7560 147420 442661  5429/5074/465   12409/1422    29  217   24.12)
(smt.stats   55   7661 150818 460338  5490/5209/465   12897/1423    29  217   24.22)
(smt.stats   56   7772 153704 480519  5553/5300/467   13680/1539    30  219   24.31)
ramon: poll                 wall=5.000s usage=4.909s mem=25628KiB load=1.00 rootload=1.00
(smt.stats   57   7894 158427 507177  5619/5304/467   13998/1541    30  219   24.41)
(smt.stats   58   8028 161812 521132  5659/5393/470   15048/1796    31  228   24.51)
(smt.stats   59   8175 166907 551683  5741/5422/470   15555/1802    31  228   24.51)
(smt.stats   60   8336 170345 571084  5972/5490/470   16470/2223    32  250   24.70)
(smt.stats   61   8513 173884 594265  6046/5793/474   17599/2447    33  258   24.90)
ramon: poll                 wall=6.000s usage=5.908s mem=26288KiB load=1.00 rootload=1.00
(smt.stats   62   8707 180913 651974  6060/5807/476   18175/2447    33  258   24.90)
(smt.stats   63   8920 186511 677095  6116/5863/478   18997/2572    34  283   24.99)
(smt.stats   64   9154 190523 701064  6156/5866/479   19390/2573    34  283   25.09)
(smt.stats   65   9411 201757 786412  6200/5947/479   20125/2807    35  345   25.19)
ramon: poll                 wall=7.000s usage=6.908s mem=26596KiB load=1.00 rootload=0.99
(smt.stats   66   9512 203210 797367  6205/5952/480   20695/3071    36  362   25.19)
(smt.stats   67   9623 205758 819302  6210/5957/480   21133/3071    36  362   25.28)
(smt.stats   68   9745 207787 839446  6211/5958/480   21351/3071    36  362   25.28)
(smt.stats   69   9879 211289 874245  6211/5958/480   21680/3071    36  362   25.38)
(smt.delete-inactive-clauses  :num-deleted-clauses 1196)
(smt.stats   70  10026 212141 885739  6211/5958/480   20869/3071    36  362   25.38)
(smt.stats   71  10187 217497 930571  6215/5962/480   21441/3071    36  362   25.38)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations          :lemmas           :deletions     )
(smt.stats   72  10364 224393 979762  6216/5963/480   21823/3071    36  362   25.38)
ramon: poll                 wall=8.000s usage=7.908s mem=26800KiB load=1.00 rootload=1.00
(smt.stats   73  10558 227041 998344  6224/5971/480   22501/3071    36  362   25.47)
(smt.stats   74  10771 231446 1058593  6225/5972/480   22895/3071    36  362   25.47)
(smt.stats   75  11005 236287 1113300  6232/5975/480   23369/3071    36  362   25.89)
(smt.stats   76  11262 244502 1194327  6235/5982/480   23798/3071    36  362   25.89)
ramon: poll                 wall=9.000s usage=8.908s mem=27348KiB load=1.00 rootload=1.00
(smt.stats   77  11544 261140 1337248  6235/5982/480   24193/3071    36  362   25.89)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   78  11645 267736 1400415  6236/5983/480   24296/3071    36  362   25.89)
(smt.stats   79  11756 275179 1468543  6236/5983/480   24413/3071    36  362   25.89)
(smt.stats   80  11878 281918 1527096  6238/5984/483   24536/3780    37  372   25.99)
(smt.stats   81  12012 284095 1543022  6294/6040/484   24986/3784    37  372   25.99)
(smt.stats   82  12159 289054 1571568  6486/6199/487   25295/3928    38  402   26.18)
ramon: poll                 wall=10.000s usage=9.908s mem=27616KiB load=1.00 rootload=1.00
(smt.stats   83  12320 291079 1592735  6617/6216/488   25561/3932    38  402   26.28)
(smt.stats   84  12497 293612 1608429  6848/6375/488   25905/3938    38  402   26.28)
(smt.stats   85  12691 302369 1659039  6975/6675/492   26461/4110    39  456   26.47)
ramon: poll                 wall=11.000s usage=10.907s mem=27924KiB load=1.00 rootload=1.00
(smt.stats   86  12904 310253 1710420  7214/6729/492   27162/4116    39  456   26.57)
(smt.stats   87  13138 316060 1750110  7359/6967/494   28479/4313    40  457   26.80)
ramon: poll                 wall=12.000s usage=11.907s mem=28432KiB load=1.00 rootload=1.00
(smt.stats   88  13395 321646 1781108  7764/7096/494   29465/4321    40  457   26.99)
(smt.stats   89  13677 328412 1814620  8029/7545/494   30315/4488    41  461   27.37)
ramon: poll                 wall=13.000s usage=12.907s mem=29192KiB load=1.00 rootload=1.00
(smt.stats   90  13987 335981 1872702  8412/7832/494   31611/4493    41  461   27.46)
(smt.stats   91  14088 338946 1888172  8546/8190/498   32176/4786    42  469   27.71)
(smt.stats   92  14199 342550 1908211  8695/8417/499   32628/4793    42  469   27.80)
ramon: poll                 wall=14.000s usage=13.907s mem=29416KiB load=1.00 rootload=1.00
(smt.stats   93  14321 345356 1923276  8871/8418/499   32939/4793    42  469   27.99)
(smt.stats   94  14455 348628 1947195  9039/8656/499   33560/4794    42  469   27.99)
(smt.stats   95  14602 353414 1970422  9087/8770/499   33934/5027    43  472   28.09)
ramon: poll                 wall=15.002s usage=14.909s mem=29656KiB load=1.00 rootload=1.00
(smt.stats   96  14763 358579 2006688  9388/8847/499   34872/5030    43  472   28.18)
(smt.stats   97  14940 365294 2061650  9601/9323/502   36339/5231    44  480   28.47)
(smt.delete-inactive-clauses  :num-deleted-clauses 322)
ramon: poll                 wall=16.000s usage=15.906s mem=30096KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   98  15134 369750 2085694  9715/9345/503   36951/5234    44  480   28.57)
ramon: poll                 wall=17.000s usage=16.906s mem=30316KiB load=1.00 rootload=1.00
(smt.stats   99  15347 373766 2113886 10157/9450/503   37680/5237    44  480   28.87)
ramon: poll                 wall=18.000s usage=17.906s mem=30512KiB load=1.00 rootload=1.00
(smt.stats  100  15581 378991 2129723 10295/9906/503   38235/5648    45  492   28.96)
ramon: poll                 wall=19.000s usage=18.906s mem=30708KiB load=1.00 rootload=1.00
(smt.stats  101  15838 383167 2157700 10825/10095/504   38974/5651    45  492   29.15)
ramon: poll                 wall=20.000s usage=19.905s mem=30888KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 14:33:58 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.020s
ramon: group.total          19.974s
ramon: group.utime          19.954s
ramon: group.stime          0.020s
ramon: group.mempeak        31144KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.069s
ramon: loadavg              1.00
