ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:55:30 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         24822 MiB
ramon: sys.mem.avail        61750 MiB
ramon: sys.nprocs           1395
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/lLM1yPcANn6L.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             139194
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   2902    335  1104/986/104     100/24     5   21   19.09)
(smt.stats    1    202   4115   1433  1431/1315/108     200/28     8   27   19.18)
(smt.stats    2    313   5424   2508  1703/1530/112     321/53    10   34   19.28)
(smt.stats    3    414   7942   3771  1832/1630/112     429/54    10   34   19.37)
(smt.stats    4    525   8756   5248  2246/2053/122     540/103    12   48   19.47)
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1 := 1&2147483647
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 1 := 33857 << 32
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1 := 1&2147483647
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 1 := 33857 << 32
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1 := 1&2147483647
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 1 := 33857 << 32
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 0&2147483647
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 0 := 33857 << 32
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 0&2147483647
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 0 := 33857 << 32
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 2147483647 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 2147483646 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 2147483644 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 2147483640 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 16 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 64 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 128 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 256 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 512 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1024 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 2048 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 4096 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32768 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32768 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32768 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32768 := 4294967296&2147483647
(smt.stats    5    647   9788   6412  2497/2115/127     798/112    13   50   20.08)
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 31282 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 31282 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 31282 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 31282 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 31282 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 24576 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 24576 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 24576 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 24576 := 4294967296&2147483647
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts   :propagations         :lemmas          :deletions    )
(smt.stats    6    748  11410   9982  2692/2454/224    1102/251    16   82   20.17)
(smt.stats    7    859  12545  11032  2881/2488/234    1349/283    17  102   20.17)
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 33829&3
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 33829&3
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 33829&3
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 33832&3
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145290153722920 := 33828 << 3
(smt.stats    8    981  14239  14257  3117/2897/238    1722/453    18  108   20.57)
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 65536&0
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145281563820032 := 33826 << 1
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 65536&1
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145290153754624 := 33827 << 2
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 4294983680&1
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145285858738176 := 33827 << 2
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 4294967300&1
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145285858721796 := 33827 << 2
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 4294967297&1
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1 := 4294967297&1
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145285858721793 := 33827 << 2
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1 := 4294967297&1
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145285858721793 := 33827 << 2
(smt.stats    9   1115  17557  23992  3141/2936/265    2108/627    19  121   20.67)
(smt.stats   10   1216  19356  32328  3176/2967/265    2231/627    19  121   20.67)
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1 := 4294983681&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1 := 4294983681&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1 := 4295032833&32767
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145406117871617 := 33808 << 16
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 4295032832&32767
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145406117871616 := 33808 << 16
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 8589926396&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 8589918208&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 8589901824&32767
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 145410412740608 := 33808 << 16
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
shl: (shl[33] (bv2int %0) (mod (bv2int %0) 33)) 32766 := 33808 << 16
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
shl: (shl[33] (bv2int %0) (mod (bv2int %0) 33)) 32767 := 33808 << 16
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
shl: (shl[33] (bv2int %0) (mod (bv2int %0) 33)) 32767 := 33808 << 16
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 32767 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 32766 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 32764 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 32760 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 32752 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 32736 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 19 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 18 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 16 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 8 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2215641088&32767
band: (band[33] (shl[33] (bv2int %0) (mod #114 33)) (if (= #568 32) 0 (if #570 1 #657))) 4 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 1 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 4 := 2215641088&32767
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 8 := 2215641088&32767
(smt.stats   11   1327  22728  40223  3327/3035/317    2401/860    20  132   20.99)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  25517  46368  3452/3239/353    2702/948    21  140   21.08)
ramon: poll                 wall=1.004s usage=0.907s mem=22448KiB load=0.90 rootload=0.89
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 200768 := 200792&262143
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 200768 := 200792&262143
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 200768 := 200792&262143
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 200768 := 200792&262143
(smt.stats   13   1583  29020  50834  3568/3282/354    3137/953    21  140   21.27)
(smt.stats   14   1730  33947  55791  3750/3376/359    3535/1205    22  147   21.37)
(smt.stats   15   1831  36699  60710  4086/3618/359    3859/1367    23  147   21.56)
(smt.stats   16   1942  39489  70042  4255/4032/363    4356/1450    25  159   21.65)
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 36&255
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 36&255
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&255
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 32 := 8589934560 << 9
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&255
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 32 := 8589934560 << 9
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&255
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 32 := 8589934560 << 9
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 64&127
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 48&127
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 64&127
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 48&127
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 48&127
(smt.stats   17   2064  43048  79269  4314/4039/364    4663/1458    25  159   21.85)
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 40 := 40&127
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 40 := 8589934559 << 8
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 40 := 40&127
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 40 := 8589934559 << 8
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 36 := 36&127
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 36 := 8589934559 << 8
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 36 := 36&127
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 36 := 8589934559 << 8
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&131071
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 18446743979220271136 := 8589934569 << 18
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&131071
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 18446743979220271136 := 8589934569 << 18
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&131071
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 18446743979220271136 := 8589934569 << 18
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&262143
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 18446743979220271136 := 8589934570 << 19
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&262143
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 18446743987810205728 := 8589934570 << 19
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&262143
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 18446743987810205728 := 8589934570 << 19
(smt.stats   18   2198  46569  90241  4385/4147/396    5004/1592    27  167   22.04)
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&2097151
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 18446744022169944096 := 8589934573 << 22
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32 := 32&2097151
shl: (shl[64] (bv2int %0) (mod (+ #114 #669 #665) 64)) 18446744030759878688 := 8589934573 << 22
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 64 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 4096 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 4096 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 4096 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 2048 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 16384 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 16384 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 16384 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 16384 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 16384 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 65536 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 65536 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32768 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32768 := 4294967296&2147483647
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 32768 := 4294967296&2147483647
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   19   2345  51572 104700  4501/4172/402    5466/1602    27  167   22.44)
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 4294967296&2147483647
shl: (shl[33] (bv2int %0) (mod (bv2int %0) 33)) 79 := 8589934583 << 32
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 4294967296&2147483647
shl: (shl[33] (bv2int %0) (mod (bv2int %0) 33)) 57 := 8589934583 << 32
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 4294967296&2147483647
shl: (shl[33] (bv2int %0) (mod (bv2int %0) 33)) 63 := 8589934583 << 32
band: (band[33] (shl[64] (bv2int %0) (mod #670 64)) (if (or #691 #692) 0 (if #693 1 #844))) 0 := 2&63
(smt.stats   20   2506  56256 126709  4570/4338/469    5804/1864    30  234   22.64)
(smt.stats   21   2607  59325 134194  4677/4398/473    6044/1867    30  234   22.92)
ramon: poll                 wall=2.000s usage=1.902s mem=24272KiB load=1.00 rootload=0.99
(smt.stats   22   2718  61872 138754  5087/4531/473    6159/1949    31  253   23.11)
ramon: poll                 wall=3.000s usage=2.901s mem=24592KiB load=1.00 rootload=1.00
(smt.stats   23   2840  62470 140234  5289/4853/473    6291/1956    31  253   23.21)
ramon: poll                 wall=4.000s usage=3.900s mem=24708KiB load=1.00 rootload=1.00
(smt.stats   24   2974  63446 141830  5518/5203/473    6428/1957    31  253   23.68)
ramon: poll                 wall=5.000s usage=4.899s mem=25084KiB load=1.00 rootload=0.99
(smt.stats   25   3121  67818 150749  6217/5832/477    6703/2012    32  264   23.49)
(smt.stats   26   3282  72297 156160  6319/5999/477    6988/2018    32  264   23.68)
ramon: poll                 wall=6.000s usage=5.898s mem=25252KiB load=1.00 rootload=1.00
(smt.stats   27   3459  78972 171316  6843/6388/478    7321/2129    33  264   23.78)
(smt.stats   28   3560  85600 186842  6873/6583/479    7625/2164    34  272   23.87)
(smt.stats   29   3671  89488 192736  6957/6611/479    7840/2170    34  272   24.25)
ramon: poll                 wall=7.000s usage=6.897s mem=25940KiB load=1.00 rootload=1.00
(smt.stats   30   3793  93427 201684  7348/6842/480    8116/2219    35  273   24.35)
(smt.stats   31   3927  98119 216779  7387/7117/484    8512/2259    36  288   24.54)
(smt.stats   32   4074 102926 229633  7455/7165/488    8760/2295    37  308   24.64)
ramon: poll                 wall=8.000s usage=7.896s mem=26100KiB load=1.00 rootload=1.00
(smt.stats   33   4235 109384 240738  7614/7194/488    9202/2299    37  308   24.78)
ramon: poll                 wall=9.000s usage=8.894s mem=26388KiB load=1.00 rootload=1.00
(smt.stats   34   4412 115597 254643  7889/7605/489    9632/2431    38  309   24.97)
(smt.stats   35   4606 122466 280749  7959/7624/495   10939/2436    38  309   25.16)
(smt.stats   36   4707 128453 313712  8050/7745/496   11555/2667    39  339   25.16)
ramon: poll                 wall=10.000s usage=9.893s mem=26792KiB load=1.00 rootload=1.00
(smt.stats   37   4818 133037 335205  8102/7818/498   12201/2747    40  340   25.35)
(smt.stats   38   4940 138105 357199  8232/7948/501   13006/2814    41  342   25.45)
(smt.delete-inactive-clauses  :num-deleted-clauses 262)
ramon: poll                 wall=11.000s usage=10.892s mem=26980KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   39   5074 145056 374112  8361/7954/502   13295/3030    42  379   25.64)
(smt.stats   40   5221 153050 408813  8672/8177/502   14186/3036    42  379   25.84)
ramon: poll                 wall=12.000s usage=11.886s mem=27432KiB load=0.99 rootload=1.00
(smt.stats   41   5382 163503 449611  8869/8432/503   15111/3310    43  382   25.93)
(smt.stats   42   5559 170882 467577  8998/8656/504   15958/3561    44  396   26.12)
ramon: poll                 wall=13.000s usage=12.885s mem=27552KiB load=1.00 rootload=1.00
(smt.stats   43   5753 179757 499837  9354/8744/504   16450/3566    44  396   26.12)
(smt.stats   44   5966 189899 550741  9604/9320/505   17594/3780    45  397   26.32)
ramon: poll                 wall=14.000s usage=13.884s mem=27892KiB load=1.00 rootload=1.00
(smt.stats   45   6067 193955 569287  9632/9320/505   17847/3781    45  397   26.41)
(smt.stats   46   6178 198467 597406  9835/9442/506   18344/3965    46  408   26.51)
(smt.stats   47   6300 203726 634101  9998/9608/506   18990/3969    46  408   26.51)
(smt.stats   48   6434 209106 686690 10146/9784/507   19770/4078    47  408   26.70)
ramon: poll                 wall=15.000s usage=14.883s mem=28276KiB load=1.00 rootload=0.99
(smt.stats   49   6581 213836 704787 10209/9912/508   21447/4172    48  408   27.08)
(smt.stats   50   6742 223959 736387 10326/9965/511   22709/4184    48  408   27.08)
ramon: poll                 wall=16.000s usage=15.882s mem=28716KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions   :clauses/bin/units             :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   51   6919 234686 769599 10492/10139/517   23620/4508    49  415   27.28)
(smt.stats   52   7113 240369 788336 10588/10216/518   25188/4679    50  420   27.37)
ramon: poll                 wall=17.000s usage=16.881s mem=29052KiB load=1.00 rootload=1.00
(smt.stats   53   7326 251253 832682 10972/10333/519   25931/4680    50  420   27.66)
(smt.stats   54   7560 261922 878459 11163/10738/519   27421/4852    51  423   27.94)
ramon: poll                 wall=18.000s usage=17.880s mem=29344KiB load=1.00 rootload=1.00
(smt.stats   55   7661 266305 900818 11257/10907/519   28118/4856    51  423   28.04)
(smt.stats   56   7772 270764 930377 11302/10999/519   28596/4857    51  423   28.13)
ramon: poll                 wall=19.000s usage=18.879s mem=29712KiB load=1.00 rootload=1.00
(smt.stats   57   7894 278148 979762 11356/11030/519   29275/4857    51  423   28.23)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats     :conflicts  :propagations            :lemmas           :deletions     )
(smt.stats   58   8028 282578 1002226 11380/11089/519   29683/4857    51  423   28.23)
(smt.stats   59   8175 289912 1028916 11461/11100/519   29990/4860    51  423   28.33)
ramon: poll                 wall=20.004s usage=19.881s mem=29852KiB load=1.00 rootload=1.00
(smt.stats   60   8336 298167 1080918 11519/11210/519   30342/4860    51  423   28.33)
ramon: end                  Fri Nov  1 18:55:50 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.020s
ramon: group.total          19.979s
ramon: group.utime          19.951s
ramon: group.stime          0.028s
ramon: group.mempeak        30620KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.102s
ramon: loadavg              0.99
