ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:57:50 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28963 MiB
ramon: sys.mem.avail        62087 MiB
ramon: sys.nprocs           1389
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/Cl5ERcKnMeCn.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             693841
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1    101.01     10000        49          0            1        2)
(sat.ddfw       1      1    50.005     20001        98          1            1        3)
(smt.stats    0    101   5192    471  1225/1111/116      86/12    11   21   52.15)
(smt.stats    1    202   6479   1511  2365/2103/116     213/13    11   21   52.25)
(sat.ddfw       1      1   50.5051     40001       196          2            1        5)
(smt.stats    2    313   8339   3622  2455/2158/116     461/25    11   21   52.34)
(smt.stats    3    414  11463   5746  2492/2260/128     558/50    13   22   52.46)
(smt.stats    4    525  13237   8361  2498/2267/131     647/75    14   38   52.57)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2 := 70368744177662 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2 := 70368744177662 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 3&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 4 := 3 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 70368744177663 := 1 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 3 := 1 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 1 := 2&1
(smt.stats    5    647  15884  10749  2573/2309/173     711/63    18  102   52.76)
(sat.ddfw       1      1   43.4783     70001       343          3            1        8)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas       :deletions     )
(smt.stats    6    748  17163  12637  2650/2375/173     818/64    18  102   52.95)
ramon: poll                 wall=1.000s usage=1.011s mem=55288KiB load=1.01 rootload=1.00
(smt.stats    7    859  18266  13908  2816/2480/173     958/73    18  102   53.05)
(smt.stats    8    981  20427  17288  2863/2612/173    1117/73    18  102   53.05)
(smt.stats    9   1115  23128  20340  2898/2645/176    1288/115    19  108   53.15)
(sat.ddfw       1      1   36.9344    110001       539          4            1       12)
(smt.stats   10   1216  23784  22012  2899/2651/176    1390/115    19  108   53.25)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 9&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 9&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177673 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 9&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177673 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 9&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177673 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 9&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177673 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 8&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177672 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2305702271725338626 := 0 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 8&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177672 := 1 << 3
(smt.stats   11   1327  24586  24951  2926/2675/187    1514/155    20  110   53.25)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  25245  28475  2930/2680/196    1643/161    21  112   53.35)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&2
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177665 := 0 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&2
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177665 := 0 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 4&2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 4&2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 4&2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&2
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 3 := 1 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&2
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 3 := 1 << 2
(smt.stats   13   1583  28730  31475  2984/2686/196    1788/167    21  112   53.55)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 10&8
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 10&8
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 16&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 16 := 1 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 16&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 16 := 1 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 16&8
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 1 := 1 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 82&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 82 := 10 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 82&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 82 := 10 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 160&8
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 9 := 10 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 0 := 10 << 4
(smt.stats   14   1730  31537  36476  3021/2762/235    1922/205    23  144   53.65)
(sat.ddfw       1      1   31.8262    160000       784          5            1       17)
(smt.stats   15   1831  34589  40563  3077/2815/238    2039/235    25  152   53.74)
(smt.stats   16   1942  36319  44684  3093/2820/238    2166/236    25  152   53.74)
ramon: poll                 wall=2.000s usage=2.014s mem=56152KiB load=1.00 rootload=1.01
(smt.stats   17   2064  40270  50866  3133/2841/238    2327/239    25  152   53.94)
(sat.ddfw       1      1   27.7782    220001      1078          6            1       23)
(smt.stats   18   2198  42857  54763  3156/2876/238    2511/240    25  152   54.04)
(smt.stats   19   2345  45063  59102  3181/2909/238    2671/240    25  152   54.04)
(smt.stats   20   2506  48597  65618  3252/2980/247    2826/313    26  161   54.13)
(smt.stats   21   2607  49689  69385  3255/2983/247    2935/313    26  161   54.13)
(smt.stats   22   2718  52768  73755  3275/2984/247    3047/318    27  171   54.13)
(sat.ddfw       1      1   24.6219    290001      1421          7            1       30)
(smt.stats   23   2840  55214  83874  3284/3012/247    3175/318    27  171   54.13)
ramon: poll                 wall=3.002s usage=3.016s mem=56408KiB load=1.00 rootload=1.00
(smt.stats   24   2974  56737  91286  3310/3034/247    3323/318    27  171   54.23)
(smt.stats   25   3121  59358 100195  3362/3074/251    3484/339    28  174   54.23)
(smt.stats   26   3282  63830 116941  3373/3088/252    3645/340    29  176   54.64)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4398046511176&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4398046511176&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4398046511176&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4398046511176&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 8796093022208&4398046511104
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 79164837199872 := 22 << 43
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 8796093022208&4398046511104
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 79164837199872 := 22 << 43
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 70368744177662&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 428&4398046511104
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744178092 := 22 << 43
(sat.ddfw       1      1   22.0811    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=4.010s mem=56920KiB load=1.00 rootload=0.99
(sat.ddfw       1      1        20    460001      2254          9            1       47)
ramon: poll                 wall=5.000s usage=5.011s mem=56816KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   18.2882    560001      2745         10            1       57)
ramon: poll                 wall=6.000s usage=6.011s mem=56816KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   16.8324    670001      3284         11            1       68)
ramon: poll                 wall=7.002s usage=7.014s mem=57072KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   15.5682    790001      3872         12            1       80)
ramon: poll                 wall=8.002s usage=8.015s mem=57072KiB load=1.00 rootload=1.00
(smt.stats   27   3459  67523 123478  3472/3101/254    3823/348    30  181   54.74)
(smt.stats   28   3560  70623 129393  3557/3232/272    3941/350    30  181   54.84)
ramon: poll                 wall=9.000s usage=9.011s mem=57072KiB load=1.00 rootload=1.00
(smt.stats   29   3671  74522 136590  3567/3279/272    4056/344    31  209   54.84)
(sat.ddfw       1      1   14.4992    920001      4509         13            1       93)
(smt.stats   30   3793  77118 143466  3576/3284/273    4189/357    32  212   54.84)
(smt.stats   31   3927  80734 151681  3585/3292/273    4348/357    32  212   54.84)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074  83903 158042  3585/3296/273    4497/357    32  212   54.84)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 268&1
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 1 := 268&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 268&1
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 1 := 268&1
(smt.stats   33   4235  85815 164374  3595/3297/273    4694/359    32  212   54.84)
(smt.stats   34   4412  88783 174273  3604/3314/274    4886/372    33  218   54.93)
(smt.stats   35   4606  94126 181494  3614/3321/274    5100/372    33  218   55.13)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666768&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 65970697666752&4
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 3 := 25838523252760 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 65970697666752&4
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 2 := 25838523252760 << 3
(smt.stats   36   4707  96182 187472  3660/3364/291    5214/382    34  218   55.23)
ramon: poll                 wall=10.002s usage=10.125s mem=57564KiB load=1.11 rootload=1.11
(smt.stats   37   4818  98422 192690  3717/3397/291    5343/383    34  218   55.42)
(smt.stats   38   4940 100023 199216  3726/3421/291    5480/383    34  218   55.42)
(smt.delete-inactive-clauses  :num-deleted-clauses 242)
(smt.stats   39   5074 102210 204819  3740/3437/291    5375/391    35  222   55.42)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 32 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 32 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 64 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 128 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8 := 8797166765082&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 64 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 128 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 256 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 512 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2048 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4096 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8192 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2048 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4096 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4096 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8192 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 32768 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 65536 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 131072 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 64 := 8797166765066&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 64 := 8797166765122&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 131072 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 262144 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 262144 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765722&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1048576 := 8797166765722&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765722&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16777216 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 134217728 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 268435456 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 536870912 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1073741824 := 8797166765698&1073741824
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 149534655121026 := 66520522686464 << 31
(sat.ddfw       1      1   13.5554   1060001      5196         14            1      108)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765186&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
(smt.stats   40   5221 105260 211450  4016/3719/479    5717/463    36  261   56.08)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8796101935234&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1048576 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101937282&1073741824
(smt.stats   41   5382 108206 219077  4317/3761/479    6253/475    36  261   56.37)
ramon: poll                 wall=11.000s usage=11.123s mem=58948KiB load=1.00 rootload=1.00
(smt.stats   42   5559 111391 225912  4798/4471/507    6912/561    37  266   56.56)
(smt.stats   43   5753 121006 242254  4897/4521/507    7218/561    37  266   56.76)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8192 := 8194&32768
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   44   5966 127107 261830  5123/4826/516    8094/1012    39  277   56.85)
(sat.ddfw       1      1   12.7291   1210001      5931         15            1      123)
(smt.stats   45   6067 130895 276449  5132/4835/517    8468/1012    39  277   56.96)
ramon: poll                 wall=12.000s usage=12.122s mem=59364KiB load=1.00 rootload=1.00
(smt.stats   46   6178 135034 298470  5140/4841/517    8670/1056    40  291   57.26)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388547502080&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388413284352&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388413284352&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388547502080&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388547502080&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388950155264&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388950155264&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388950155264&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388815937536&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388815937536&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388815937536&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388815937536&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 26389352808448&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 26389352808448&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 26389226979328&17592186044416
(smt.stats   47   6300 138375 310803  5281/4948/548    9272/1284    41  298   57.69)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 512 := 35184372088834&137438953472
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 32 := 35184372088834&137438953472
(smt.stats   48   6434 143285 332564  5304/5007/558    9888/1741    42  313   57.79)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 35184372088834&17592186044416
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 175921860444162 := 65970697666560 << 45
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 35184372088834&17592186044416
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 246290604621826 := 65970697666560 << 45
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 35184372088834&17592186044416
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 246290604621826 := 65970697666560 << 45
(smt.stats   49   6581 149079 345555  5397/5095/574   10188/1746    42  313   57.88)
ramon: poll                 wall=13.000s usage=13.118s mem=60028KiB load=1.00 rootload=1.00
(smt.stats   50   6742 155194 372014  5447/5151/581   10804/2133    43  334   57.98)
(sat.ddfw       1      1   11.9537   1370001      6715         16            1      139)
(smt.stats   51   6919 163497 422995  5460/5156/583   11023/2153    44  341   57.98)
ramon: poll                 wall=14.000s usage=14.040s mem=60200KiB load=0.92 rootload=0.92
(smt.stats   52   7113 171310 465462  5488/5175/588   11365/2154    44  341   58.07)
(smt.stats   53   7326 180427 514251  5531/5196/588   11627/2220    45  358   58.07)
ramon: poll                 wall=15.000s usage=15.028s mem=60564KiB load=0.99 rootload=0.98
(sat.ddfw       1      1   11.2957   1540001      7549         17            1      156)
(smt.stats   54   7560 187271 548772  5549/5253/590   12393/2252    46  365   58.26)
(smt.stats   55   7661 191249 566503  5557/5261/590   12581/2252    46  365   58.36)
(smt.stats   56   7772 196569 595275  5568/5268/591   12921/2552    47  372   58.36)
(smt.stats   57   7894 200331 610341  5584/5288/591   13082/2663    48  374   58.36)
(smt.stats   58   8028 202523 617485  5594/5293/592   13364/2663    48  374   58.48)
ramon: poll                 wall=16.000s usage=16.027s mem=61072KiB load=1.00 rootload=1.00
(smt.stats   59   8175 206428 649340  5629/5313/592   13612/2664    48  374   58.58)
(smt.stats   60   8337 210186 667109  5703/5396/593   13798/2813    49  382   59.05)
(smt.stats   61   8514 214367 698985  5720/5408/596   14355/2824    50  410   59.14)
(sat.ddfw       1      1   10.7079   1720001      8431         18            1      174)
ramon: poll                 wall=17.000s usage=17.025s mem=61148KiB load=1.00 rootload=1.00
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 83886080&64
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2306265221762646016 := 65970697666561 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 83886080&64
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2306265221762646016 := 65970697666561 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 83886080&64
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2306265221762646016 := 65970697666560 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 83886080&64
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2306265221762646016 := 65970697666560 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&64
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 35184355311626 := 65970697666560 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&64
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 35184355311626 := 65970697666560 << 7
(smt.stats   62   8709 223698 743341  5865/5557/618   14832/3270    51  432   59.24)
ramon: poll                 wall=18.000s usage=18.024s mem=61656KiB load=1.00 rootload=1.00
(smt.stats   63   8922 232094 760294  5937/5560/618   15087/3272    51  432   59.34)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   64   9156 238121 799464  6044/5685/619   15527/3366    52  447   59.43)
(sat.ddfw       1      1   10.1838   1910001      9362         19            1      193)
ramon: poll                 wall=19.000s usage=19.023s mem=61904KiB load=1.00 rootload=1.00
(smt.stats   65   9413 246579 847874  6080/5729/619   15929/3503    53  463   59.53)
(smt.stats   66   9514 248865 862864  6092/5771/620   16157/3556    54  473   59.62)
(smt.stats   67   9625 253032 881273  6099/5778/621   16427/3556    54  473   59.62)
(smt.stats   68   9747 258137 914673  6104/5783/621   16772/3652    55  481   59.62)
(smt.stats   69   9881 261323 938323  6117/5796/621   17062/3652    55  481   59.82)
ramon: poll                 wall=20.000s usage=20.033s mem=62156KiB load=1.01 rootload=1.01
ramon: end                  Fri Nov  1 21:58:10 2024
ramon: root.execname        z3
ramon: root.utime           20.120s
ramon: root.stime           0.000s
ramon: group.total          20.130s
ramon: group.utime          20.122s
ramon: group.stime          0.008s
ramon: group.mempeak        62416KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.100s
ramon: loadavg              1.00
