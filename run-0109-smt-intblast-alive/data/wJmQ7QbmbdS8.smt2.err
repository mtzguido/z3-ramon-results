ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 16:05:20 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         40448 MiB
ramon: sys.mem.avail        61705 MiB
ramon: sys.nprocs           1257
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/wJmQ7QbmbdS8.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3112099
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   4359    990  1219/1101/93      89/8     4   17   19.05)
(smt.stats    1    202   6126   3349  1872/1661/95     188/8     6   19   19.25)
(smt.stats    2    313   8213   7312  2020/1808/96     297/10     7   20   19.35)
(smt.stats    3    414  10726  12079  2266/2028/101     392/21    10   26   19.35)
(smt.stats    4    525  11649  13778  2381/2140/101     488/22    10   26   19.45)
(smt.stats    5    647  13509  17107  2395/2157/102     607/26    12   29   19.54)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  15654  19479  2431/2185/102     712/26    12   29   19.65)
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&433
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&463
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&480
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&448
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&512
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 512 := 592 << 9
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&485
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&448
(smt.stats    7    859  18256  21705  2470/2205/129     820/29    14   35   19.75)
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&512
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 512 := 592 << 9
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&512
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 512 := 645 << 9
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 432 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 416 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 384 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 256 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 432 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 431 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 432 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 416 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 384 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 15 := 432&527
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 256 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 4 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 8 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 8 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 16 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 4 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 64 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 128 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 67 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 64 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 64 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 8 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 8 := 432&512
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&512
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 9007199254741504 := 62 << 9
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&512
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 945 := 598134325510145 << 9
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&7680
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #621 52) 1 (if #623 3 #770))) 432 := 7680&432
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&9007199254724608
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 448 := 35184372088800 << 9
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 432&17626612997632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&7680
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #621 52) 1 (if #623 3 #770))) 1 := 7680&432
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&7680
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #621 52) 1 (if #623 3 #770))) 2 := 7680&432
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&7680
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #621 52) 1 (if #623 3 #770))) 4 := 7680&432
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&7680
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #621 52) 1 (if #623 3 #770))) 432 := 7680&432
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&7680
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #621 52) 1 (if #623 3 #770))) 416 := 7680&432
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 432&7680
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #621 52) 1 (if #623 3 #770))) 328 := 7680&432
(smt.stats    8    981  19812  24308  2570/2314/246     960/53    15   54   20.37)
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849745920
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849745920
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849746432
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849748480
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 3800659849745823&3800659849748480
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849748480
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849748480
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849773056
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849773056
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659853836288
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849773056
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 3800659849745823&3800659849773056
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659849773056
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659853836288
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659912556544
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659853836288
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800659912556544
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 3800659849745823&3800660046774272
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3800659849745823&3800660046774272
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 3800659849745823&3800659957317632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 3800659849745823&3800659957317632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 3800659849745823&3800659957317632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 3800659849745823&3800659957317632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 3800659849745823&3800659957317632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 3 := 3800659849745823&3800659957317633
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 3 := 3800659849745823&3800659957317633
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 3 := 3800659849745823&3800659957317632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 3 := 3800659849745823&3800659957317632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 3 := 3800659849745823&3800659957317633
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 3 := 3800659849745823&3800659957317632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 3 := 3800659849745823&3800659957317633
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 3 := 3800659849745823&3800659957317632
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 3 := 3800659849745823&3800659957317633
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 11 := 3800659849745823&3800659957317634
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 11 := 3800659849745823&3800659957317635
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659853836288
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659853836289
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659853836297
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659853836297
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659853844544
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659853844481
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659853844489
(smt.stats    9   1115  22417  28227  2698/2440/348    1100/117    17  140   20.85)
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659854041097
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659854041101
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659854098953
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659912557065
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659912557129
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659912564745
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800659912557065
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800660046774281
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800660046774793
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800668099837961
(smt.stats   10   1216  23815  30291  2947/2466/348    1351/124    17  140   21.14)
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800668099837961
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800668099837961
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 9 := 3800659849745823&3800668099837961
(smt.stats   11   1327  29274  39518  2980/2728/386    1524/187    19  158   21.24)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  33763  49215  2997/2745/398    1851/204    20  159   21.35)
(smt.stats   13   1583  38939  56117  3014/2765/399    2165/325    21  174   21.44)
(smt.stats   14   1730  51890  75601  3014/2765/399    2313/416    22  174   21.44)
(smt.stats   15   1831  57864  86755  3019/2767/408    2528/423    24  181   21.54)
(smt.stats   16   1942  60012  93184  3194/2921/416    2638/430    26  194   21.86)
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 1&68
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 9007199254741060 := 1008 << 1
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 1&68
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 9007199254741060 := 1008 << 1
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 1&68
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 9007199254741060 := 1008 << 1
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 1&66
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 9007199254741058 := 1008 << 1
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 1&66
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 9007199254741058 := 1008 << 1
(smt.stats   17   2064  64125 100559  3259/2969/426    2874/471    27  244   21.96)
(smt.stats   18   2198  68483 109150  3269/2984/427    3158/474    28  248   22.55)
ramon: poll                 wall=1.000s usage=0.897s mem=23940KiB load=0.90 rootload=0.89
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 1&2
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 32 := 1 << 1
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 1&2
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 32 := 1 << 1
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 1&2
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #621 52) 1 (if #623 3 #770))) 1 := 2&1
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 1&2
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #621 52) 1 (if #623 3 #770))) 1 := 2&1
(smt.stats   19   2345  73958 122806  3448/3130/446    3363/499    29  259   22.93)
(smt.stats   20   2506  82243 140817  3469/3145/446    3596/499    29  259   22.93)
(smt.stats   21   2607  87483 150208  3500/3168/447    3788/548    30  259   23.12)
(smt.stats   22   2718  90558 157924  3741/3415/450    4062/552    30  259   23.21)
(smt.stats   23   2840  95120 170514  3886/3496/451    4520/561    31  267   23.31)
(smt.stats   24   2974  98469 180434  3915/3591/456    4780/620    33  295   23.31)
(smt.stats   25   3121 106727 196728  3931/3602/457    5422/624    33  295   23.41)
ramon: poll                 wall=2.000s usage=1.897s mem=24880KiB load=1.00 rootload=1.00
(smt.stats   26   3282 114057 215105  4084/3682/458    5909/681    34  318   23.60)
(smt.stats   27   3459 123459 245265  4104/3778/458    6443/778    35  318   23.69)
(smt.stats   28   3560 128698 260588  4114/3788/459    6640/962    36  321   23.79)
(smt.stats   29   3671 132388 271256  4273/3867/460    7209/979    37  321   24.17)
ramon: poll                 wall=3.000s usage=2.897s mem=25748KiB load=1.00 rootload=1.00
(smt.stats   30   3793 136747 280847  4467/4105/461    7581/982    37  321   24.27)
(smt.stats   31   3927 140280 293434  4706/4154/461    8109/985    37  321   24.46)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   32   4074 147395 310636  4726/4397/462    8550/1083    38  339   24.55)
ramon: poll                 wall=4.000s usage=3.897s mem=26184KiB load=1.00 rootload=1.00
(smt.stats   33   4235 154280 326794  4880/4416/464    9016/1204    39  339   24.74)
ramon: poll                 wall=5.000s usage=4.897s mem=26660KiB load=1.00 rootload=1.00
(smt.stats   34   4412 158934 334740  5148/4822/466    9484/1257    40  340   25.09)
(smt.stats   35   4606 167096 355777  5182/4856/468   10123/1257    40  340   25.19)
(smt.stats   36   4707 172790 379185  5193/4867/470   10512/1424    41  351   25.19)
ramon: poll                 wall=6.000s usage=5.897s mem=26864KiB load=1.00 rootload=1.00
(smt.stats   37   4818 175320 386879  5281/4869/471   10707/1503    42  361   25.28)
(smt.stats   38   4940 181237 418026  5291/4965/474   11172/1543    43  382   25.28)
(smt.delete-inactive-clauses  :num-deleted-clauses 263)
(smt.stats   39   5074 186640 436146  5299/4973/483   11147/1543    43  382   25.28)
(smt.stats   40   5221 192821 461814  5318/4993/484   11518/1609    44  433   25.38)
(smt.stats   41   5382 200408 490317  5330/5005/484   11889/1609    44  433   25.38)
(smt.stats   42   5559 206932 505890  5358/5012/485   12451/1728    45  449   25.51)
(smt.stats   43   5753 219011 545482  5554/5036/485   13287/1730    45  449   25.60)
ramon: poll                 wall=7.000s usage=6.896s mem=27060KiB load=1.00 rootload=1.00
(smt.stats   44   5966 228452 575393  5810/5252/485   14188/1733    45  449   25.70)
(smt.stats   45   6067 234233 591376  5820/5495/486   14730/1911    46  452   25.79)
(smt.stats   46   6178 242976 614512  5827/5502/486   14884/1911    46  452   25.79)
(smt.stats   47   6300 251678 639132  5862/5504/486   15343/1913    46  452   25.89)
ramon: poll                 wall=8.000s usage=7.896s mem=27388KiB load=1.00 rootload=1.00
(smt.stats   48   6434 259868 651920  5894/5554/486   15862/1913    46  452   25.89)
(smt.stats   49   6581 265934 663435  5943/5580/486   16233/1917    46  452   26.00)
ramon: poll                 wall=9.000s usage=8.896s mem=27736KiB load=1.00 rootload=1.00
(smt.stats   50   6742 269884 676993  6239/5639/486   16576/1923    46  452   26.19)
(smt.stats   51   6919 276727 700026  6400/5928/486   17203/1930    46  452   26.29)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   52   7113 289499 729053  6406/6081/486   18054/1930    46  452   26.29)
ramon: poll                 wall=10.000s usage=9.896s mem=28168KiB load=1.00 rootload=1.00
(smt.stats   53   7326 298467 761329  6626/6084/486   19060/1938    46  452   26.60)
(smt.stats   54   7560 307226 787394  6826/6343/487   19634/2777    47  463   26.70)
(smt.stats   55   7661 312379 821368  6829/6504/487   19777/2777    47  463   26.70)
(smt.stats   56   7772 319713 859358  6882/6556/488   20011/2826    48  463   26.70)
ramon: poll                 wall=11.000s usage=10.896s mem=28252KiB load=1.00 rootload=1.00
(smt.stats   57   7894 323882 883839  7011/6561/488   20735/2835    48  463   26.79)
(smt.stats   58   8028 327286 903687  7049/6708/488   21073/2835    48  463   26.89)
(smt.stats   59   8175 334132 943991  7062/6737/488   21375/2835    48  463   26.89)
(smt.stats   60   8336 339102 957836  7087/6738/488   21680/2837    48  463   26.98)
(smt.stats   61   8513 343559 981104  7115/6777/489   22635/3017    49  487   27.08)
ramon: poll                 wall=12.000s usage=11.896s mem=28760KiB load=1.00 rootload=1.00
(smt.stats   62   8707 346617 993730  7238/6819/490   22892/3017    49  487   27.27)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   63   8920 349004 1011336  8506/7510/490   23453/3024    49  487   27.60)
(smt.stats   64   9154 361424 1037365  8518/8193/490   24145/3145    50  487   27.60)
(smt.stats   65   9411 371813 1083548  8529/8204/490   24880/3145    50  487   27.71)
(smt.stats   66   9512 373678 1101268  8537/8210/490   25518/3145    50  487   27.81)
ramon: poll                 wall=13.000s usage=12.896s mem=29352KiB load=1.00 rootload=1.00
(smt.stats   67   9623 380579 1136884  8549/8218/490   25845/3145    50  487   27.81)
(smt.stats   68   9745 387092 1163599  8582/8229/490   26422/3148    50  487   27.90)
(smt.stats   69   9880 394161 1201972  8617/8262/490   27289/3149    50  487   27.90)
(smt.delete-inactive-clauses  :num-deleted-clauses 1302)
(smt.stats   70  10027 397655 1222592  8633/8302/491   26659/4040    51  503   28.07)
ramon: poll                 wall=14.000s usage=13.895s mem=29608KiB load=1.00 rootload=1.00
(smt.stats   71  10188 402183 1235451  8721/8320/491   26993/4040    51  503   28.16)
(smt.stats   72  10365 407015 1258546  8869/8400/491   27377/4041    51  503   28.16)
ramon: poll                 wall=15.000s usage=14.895s mem=29736KiB load=1.00 rootload=1.00
(smt.stats   73  10559 412700 1296730  8927/8600/495   28078/4255    52  505   28.16)
(smt.stats   74  10772 425285 1355102  8975/8610/495   28764/4255    52  505   28.37)
(smt.stats   75  11006 432842 1416555  9005/8672/495   29344/4458    53  522   28.37)
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 2 := 3&8356387325266722
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 1584616256904940322 := 8356387325266725 << 2
ramon: poll                 wall=16.000s usage=15.895s mem=29992KiB load=1.00 rootload=1.00
(smt.stats   76  11263 436665 1442405  9111/8697/495   30022/4460    53  522   28.46)
(smt.stats   77  11545 440493 1453044  9157/8804/500   30471/4582    54  523   28.46)
(smt.stats   78  11646 442331 1463171  9226/8838/501   30631/4583    54  523   28.46)
(smt.stats   79  11757 444837 1485784  9359/8911/501   31098/4584    54  523   28.56)
ramon: poll                 wall=17.000s usage=16.895s mem=30144KiB load=1.00 rootload=1.00
(smt.stats   80  11879 448286 1515059  9585/9059/501   31430/4584    54  523   28.66)
(smt.stats   81  12013 449667 1526109  9644/9295/501   31714/4800    55  525   28.66)
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3&7195410250596352
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 2087858438095765504 := 8936692802649532 << 2
band: (band[53] (if (or #786 #787 #788 #789 #790 #791 #792 #793 #794 #795 #796 #797) 0 (if #798 1 #900)) (shl[64] (bv2int %0) (mod #945 64))) 0 := 3&7195410250596352
shl: (shl[64] (bv2int %0) (mod (+ #110 #944) 64)) 2087858438095765504 := 8936692802649532 << 2
(smt.stats   82  12160 453214 1549643  9719/9318/501   32056/4806    55  525   28.77)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   83  12321 462609 1618401  9756/9423/502   32422/4806    55  525   28.77)
(smt.stats   84  12498 471082 1661651  9764/9435/503   33191/5016    56  526   28.87)
ramon: poll                 wall=18.000s usage=17.895s mem=30480KiB load=1.00 rootload=1.00
(smt.stats   85  12692 480641 1677850  9867/9436/503   33740/5020    56  526   29.06)
ramon: poll                 wall=19.000s usage=18.895s mem=30876KiB load=1.00 rootload=1.00
(smt.stats   86  12905 492764 1737408  9943/9608/504   34391/5374    57  557   29.15)
(smt.stats   87  13139 508147 1778678  9976/9634/504   35005/5376    57  557   29.25)
ramon: poll                 wall=20.000s usage=19.895s mem=30884KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 16:05:40 2024
ramon: root.execname        z3
ramon: root.utime           19.960s
ramon: root.stime           0.000s
ramon: group.total          19.970s
ramon: group.utime          19.966s
ramon: group.stime          0.004s
ramon: group.mempeak        31144KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.076s
ramon: loadavg              0.99
