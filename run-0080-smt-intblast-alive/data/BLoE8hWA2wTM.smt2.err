ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 17:48:49 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28574 MiB
ramon: sys.mem.avail        61764 MiB
ramon: sys.nprocs           1274
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/BLoE8hWA2wTM.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             4109836
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   4690    394  1143/984/94     104/24     2   14   19.17)
(smt.stats    1    202   6186   2745  1953/1768/99     188/25     6   22   19.27)
(smt.stats    2    313  11793   4711  2119/1917/99     300/25     6   22   19.55)
(smt.stats    3    414  14266   6738  2280/2062/105     400/31     7   24   19.55)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 8 := 8&8
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 8 := 84 << 4
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1 := 1&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1&8
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 1 := 84 << 4
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1 := 1&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1&8
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 1 := 84 << 4
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1 := 1&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1&8
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 1 := 84 << 4
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 0&8
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 1099511627776 := 84 << 4
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 8 := 85&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 7 := 85&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 6 := 85&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 4 := 85&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 85&8
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 85 := 84 << 4
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
shl: (shl[40] (bv2int %0) (mod (bv2int %0) 40)) 37 := 84 << 4
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 2 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
shl: (shl[40] (bv2int %0) (mod (bv2int %0) 40)) 1345 := 84 << 4
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
shl: (shl[40] (bv2int %0) (mod (bv2int %0) 40)) 1343 := 84 << 4
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 1 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 2 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 4 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 8 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 1 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 2 := 1344&8
(smt.stats    4    525  15136   8797  2374/2132/161     485/63    10   58   19.88)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 8 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 8 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 1 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 2 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1344&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 4 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 2 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 2 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 4 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 4 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 8 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 8 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 8 := 1344&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 8 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 704&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 8 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 704&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 8 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 704&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 1 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 704&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 1 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 704&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 4 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 704&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 4 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 704&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 2 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 704&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 2 := 704&8
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 64&8
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 2 := 64&8
(smt.stats    5    647  17027  11178  2432/2200/217     618/74    12   76   19.97)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 20 := 500&134217728
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  17629  11850  2563/2232/217     776/80    12   76   20.45)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 544 := 624&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 576 := 624&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 640 := 640&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 576 := 688&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 576 := 624&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 560 := 640&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 544 := 640&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 544 := 672&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 544 := 640&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 544 := 672&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 272 := 640&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 272 := 640&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 272 := 640&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 272 := 656&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 256 := 640&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 256 := 640&134217728
(smt.stats    7    859  18999  14824  2746/2356/223     952/88    13   93   20.64)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 256 := 624&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 512 := 624&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 512 := 624&134217728
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 512 := 624&268435456
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 512 := 624&268435456
(smt.stats    8    981  20748  18658  2835/2577/285    1406/91    14  104   20.94)
(smt.stats    9   1115  23409  26486  2866/2622/292    1694/241    16  121   21.17)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1313&1
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 904&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 1099511628680 := 121 << 1
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 904&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 1099511628680 := 121 << 1
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 904&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 904 := 121 << 1
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 904&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 904 := 121 << 1
(smt.stats   10   1216  26371  32842  3021/2723/299    2012/253    17  122   21.26)
(smt.stats   11   1327  31107  44568  3097/2812/305    2240/254    18  127   21.37)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  33666  52076  3121/2838/321    2567/306    20  138   21.57)
(smt.stats   13   1583  35991  55487  3217/2853/321    2996/308    20  138   21.97)
(smt.stats   14   1730  39037  66065  3363/2944/321    3367/344    21  180   22.06)
(smt.stats   15   1831  41411  73038  3407/3101/321    3819/348    21  180   22.16)
ramon: poll                 wall=1.000s usage=0.958s mem=23444KiB load=0.96 rootload=0.95
(smt.stats   16   1942  43631  80040  3423/3138/322    4116/409    22  183   22.25)
(smt.stats   17   2064  46253  86652  3471/3157/331    4370/443    23  207   22.35)
(smt.stats   18   2198  50433  95727  3641/3355/334    5005/476    24  238   22.44)
(smt.stats   19   2345  55435 102075  3724/3357/334    5306/479    24  238   22.54)
ramon: poll                 wall=2.000s usage=1.958s mem=23904KiB load=1.00 rootload=1.00
(smt.stats   20   2506  57765 114889  3783/3495/334    6246/508    25  249   22.63)
(smt.stats   21   2607  59221 122303  3809/3522/336    6449/658    26  250   22.73)
(smt.stats   22   2718  61571 131603  3841/3552/338    6684/686    27  252   22.73)
(smt.stats   23   2840  65757 140263  3952/3582/339    6961/693    27  252   22.87)
(smt.stats   24   2974  68805 153055  4011/3722/340    7474/711    28  266   22.87)
(smt.stats   25   3121  71767 160971  4140/3739/340    8045/779    29  267   23.06)
ramon: poll                 wall=3.000s usage=2.958s mem=24688KiB load=1.00 rootload=0.99
(smt.stats   26   3282  76347 187192  4241/3874/340    8784/781    29  267   23.16)
(smt.stats   27   3459  79397 205803  4255/3969/341    9820/888    30  278   23.26)
(smt.stats   28   3560  81443 212032  4286/3973/341   10260/889    30  278   23.26)
(smt.stats   29   3671  83321 223062  4431/4040/341   10532/890    30  278   23.37)
(smt.stats   30   3793  85488 235666  4627/4187/341   10986/890    30  278   23.46)
(smt.stats   31   3927  87816 251566  4819/4382/341   11628/891    30  278   23.65)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas          :deletions     )
(smt.stats   32   4074  91310 263576  4900/4557/341   12283/893    30  278   23.75)
ramon: poll                 wall=4.000s usage=3.957s mem=25156KiB load=1.00 rootload=1.00
(smt.stats   33   4235  96851 277774  5119/4639/341   12890/898    30  278   23.97)
(smt.stats   34   4412  99400 287984  5378/5092/343   13469/1342    31  285   24.16)
(smt.stats   35   4606 102984 306647  5513/5110/343   14721/1347    31  285   24.35)
(smt.stats   36   4707 105731 319980  5595/5264/343   15359/1348    31  285   24.45)
ramon: poll                 wall=5.000s usage=4.957s mem=25772KiB load=1.00 rootload=1.00
(smt.stats   37   4818 108906 333454  5755/5436/345   15922/1427    32  307   24.54)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   38   4940 110158 345028  6003/5511/345   16338/1432    32  307   24.64)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   39   5074 112399 356617  6051/5765/351   17197/1432    32  307   24.74)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1668&4294967296
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 3298534884996 := 113 << 33
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1668&4294967296
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 1668 := 113 << 33
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 1668&4294967296
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 1668 := 113 << 33
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 970662608896&4294967296
shl: (shl[40] (bv2int %0) (mod (bv2int %0) 40)) 17 := 113 << 33
(smt.stats   40   5221 116360 384822  6112/5771/351   18052/1433    32  307   24.83)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 970662608896&4294967296
shl: (shl[40] (bv2int %0) (mod (bv2int %0) 40)) 17 := 113 << 33
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 96 := 970662608896&4294967296
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 96 := 970662608896&4294967296
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 64 := 970662608896&4294967296
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 128 := 970662608896&4294967296
(smt.stats   41   5382 119801 396475  6366/5843/361   18441/1595    33  340   25.17)
(smt.stats   42   5559 123093 417685  6402/6106/367   19948/1595    33  340   25.26)
ramon: poll                 wall=6.000s usage=5.957s mem=26796KiB load=1.00 rootload=1.00
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 114 := 970662609387&2097152
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 114 := 970662609387&2097152
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 114 := 970662609387&2097152
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 114 := 970662609387&2097152
(smt.stats   43   5753 127573 443435  6509/6122/368   21046/1864    34  348   25.45)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 80 := 970662611296&2097152
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 80 := 970662611296&2097152
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 80 := 970662611296&2097152
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 80 := 970662611312&2097152
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 96 := 970662611824&2097152
(smt.stats   44   5966 131217 465131  6631/6274/373   21520/1869    34  348   25.55)
(smt.stats   45   6067 132638 474783  6681/6354/373   22170/1870    34  348   25.65)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 17&2
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 3298534883345 := 2 << 2
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 17&2
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 17 := 2 << 2
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 17&2
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 3298534883345 := 42 << 2
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 17&2
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 3298534883345 := 82 << 2
(smt.stats   46   6178 134598 486156  6854/6553/380   22429/2054    35  349   25.75)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 328&2
shl: (shl[40] (bv2int %0) (mod (bv2int %0) 40)) 1065420315435 := 82 << 2
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 328&2
shl: (shl[40] (bv2int %0) (mod (bv2int %0) 40)) 1065420315435 := 82 << 2
(smt.stats   47   6300 136903 510053  6906/6572/380   22857/2055    35  349   25.84)
(smt.stats   48   6434 139435 546421  6921/6618/387   23257/2137    36  391   25.84)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 64 := 89&1024
(smt.stats   49   6581 141852 557311  6960/6628/388   24039/2139    36  391   25.94)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 25&1024
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 2199023255577 := 91 << 11
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 25&1024
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 2199023255577 := 51 << 11
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 25&1024
shl: (shl[64] (bv2int %0) (mod (+ #101 #311) 64)) 2199023255577 := 11 << 11
(smt.stats   50   6742 143928 570652  7147/6842/396   24390/2142    36  391   26.13)
ramon: poll                 wall=7.000s usage=6.957s mem=27596KiB load=1.00 rootload=1.00
(smt.stats   51   6919 147916 589570  7197/6854/397   25150/2145    36  391   26.22)
(smt.stats   52   7113 151872 605015  7233/6920/400   25920/2301    37  487   26.32)
(smt.stats   53   7326 159831 621044  7309/6943/400   26481/2305    37  487   26.51)
(smt.stats   54   7560 165649 642882  7432/7118/401   27568/2306    37  487   26.85)
ramon: poll                 wall=8.000s usage=7.956s mem=28376KiB load=1.00 rootload=1.00
(smt.stats   55   7661 170102 669852  7463/7137/401   27893/2473    38  492   26.85)
(smt.stats   56   7772 173914 691215  7483/7164/401   28160/2473    38  492   26.95)
(smt.stats   57   7894 179015 714080  7635/7189/401   28602/2477    38  492   27.05)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   58   8028 181920 729015  7736/7378/401   29341/2477    38  492   27.15)
(smt.stats   59   8175 185185 745123  7833/7469/402   30094/2618    39  507   27.15)
(smt.stats   60   8336 190466 778259  7911/7574/402   31187/2618    39  507   27.27)
(smt.stats   61   8513 193889 801749  8075/7644/402   32189/2622    39  507   27.47)
ramon: poll                 wall=9.000s usage=8.956s mem=28996KiB load=1.00 rootload=1.00
(smt.stats   62   8707 197879 825811  8359/7798/402   32874/2625    39  507   27.57)
(smt.stats   63   8920 203831 858258  8689/8109/403   33877/2846    40  510   27.76)
(smt.stats   64   9154 210527 912388  8707/8402/403   35989/2846    40  510   27.95)
(smt.stats   65   9411 218505 984496  8724/8417/403   36999/2846    40  510   28.05)
(smt.stats   66   9512 220102 996328  8728/8419/403   37347/2846    40  510   28.15)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1024 := 186368&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1024 := 186368&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1024 := 186368&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1024 := 186368&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 1024 := 104448&1024
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   67   9623 223787 1024094  8770/8424/403   37671/2847    40  510   28.25)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
shl: (shl[40] (bv2int %0) (mod (bv2int %0) 40)) 1608 := 51 << 11
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
shl: (shl[40] (bv2int %0) (mod (bv2int %0) 40)) 1608 := 51 << 11
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 32 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 64 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 80 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 64 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 64 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 128 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 128 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 128 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 256 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 512 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 1024 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 1024 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 768 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 512 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 512 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 1024 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 1024 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 256 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 256 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 128 := 104448&1024
(smt.stats   68   9745 227923 1041524  8897/8556/474   37925/3404    41  512   28.52)
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 16 := 104448&1024
band: (band[40] (shl[64] (bv2int %0) (mod #312 64)) (if (= #668 63) 0 (if #670 1 #794))) 0 := 104448&1024
band: (band[40] (shl[40] (bv2int %0) (mod #101 40)) (if (= #571 39) 1 (if #573 2 #649))) 16 := 104448&1024
(smt.stats   69   9879 232550 1066051  8994/8607/474   38469/3404    41  512   28.61)
ramon: poll                 wall=10.001s usage=9.957s mem=30284KiB load=1.00 rootload=0.99
(smt.delete-inactive-clauses  :num-deleted-clauses 3)
(smt.stats   70  10026 236520 1083311  9049/8682/484   40130/3406    41  512   28.82)
(smt.stats   71  10187 242908 1113269  9152/8722/484   41075/3407    41  512   29.15)
(smt.stats   72  10364 250365 1151040  9271/8824/484   42279/3628    42  526   29.24)
(smt.stats   73  10558 257474 1191243  9478/8976/484   44508/3636    42  526   29.53)
ramon: poll                 wall=11.000s usage=10.956s mem=31008KiB load=1.00 rootload=1.00
(smt.stats   74  10771 266782 1244631  9616/9175/484   46317/3642    42  526   29.72)
(smt.stats   75  11005 273291 1302033  9637/9308/484   47294/3642    42  526   29.82)
(smt.stats   76  11262 284050 1380061  9669/9340/484   48049/3642    42  526   29.92)
(smt.stats   77  11544 291328 1425663  9742/9410/486   49044/4013    43  529   30.11)
ramon: poll                 wall=12.000s usage=11.956s mem=31708KiB load=1.00 rootload=1.00
(smt.stats   78  11645 294646 1444692  9865/9507/487   49482/4019    43  529   30.21)
(smt.stats   79  11756 299576 1460123  9932/9547/487   49687/4024    43  529   30.30)
(smt.stats   80  11878 303001 1475909 10013/9631/487   50588/4029    43  529   30.40)
(smt.stats   81  12012 306839 1502136 10052/9716/488   51481/4029    43  529   30.59)
(smt.stats   82  12159 316650 1553832 10125/9778/489   51883/4325    44  559   30.59)
ramon: poll                 wall=13.000s usage=12.955s mem=32204KiB load=1.00 rootload=1.00
(smt.stats   83  12320 325051 1612550 10293/9911/490   52781/4327    44  559   30.78)
(smt.stats   84  12497 330124 1652914 10518/9997/490   53354/4328    44  559   30.88)
ramon: poll                 wall=14.000s usage=13.955s mem=32812KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   85  12691 338721 1696241 10565/10197/490   55076/4410    45  561   31.16)
ramon: poll                 wall=15.000s usage=14.955s mem=33156KiB load=1.00 rootload=1.00
(smt.stats   86  12904 348619 1737419 10800/10250/490   56892/4418    45  561   31.54)
ramon: poll                 wall=16.000s usage=15.955s mem=33840KiB load=1.00 rootload=1.00
(smt.stats   87  13138 354561 1760315 11034/10530/491   58829/4425    45  561   31.93)
(smt.stats   88  13395 366232 1841420 11156/10799/493   60597/4789    46  568   32.12)
ramon: poll                 wall=17.000s usage=16.955s mem=34128KiB load=1.00 rootload=1.00
(smt.stats   89  13677 376269 1886127 11307/10842/493   62340/4790    46  568   32.57)
ramon: poll                 wall=18.000s usage=17.954s mem=34324KiB load=1.00 rootload=1.00
(smt.stats   90  13987 388342 1973491 11733/10983/493   64259/4791    46  568   32.76)
(smt.stats   91  14088 391494 1987384 11748/11402/493   65011/4793    46  568   32.96)
(smt.stats   92  14199 395131 2005926 11807/11464/493   65279/4794    46  568   33.34)
(smt.stats   93  14321 400890 2057502 11826/11489/495   65845/5264    47  580   33.34)
(smt.stats   94  14455 405036 2105027 11924/11539/495   66789/5267    47  580   33.55)
ramon: poll                 wall=19.000s usage=18.954s mem=35204KiB load=1.00 rootload=1.00
(smt.stats   95  14602 406354 2139593 11932/11580/496   67863/5267    47  580   33.74)
(smt.stats   96  14763 410295 2164503 12007/11590/496   68444/5269    47  580   33.84)
(smt.stats   97  14940 414236 2195113 12213/11701/497   69774/5270    47  580   34.14)
(smt.delete-inactive-clauses  :num-deleted-clauses 512)
(smt.stats   98  15134 420176 2223092 12318/11870/502   70498/5539    48  614   34.23)
ramon: poll                 wall=20.001s usage=19.955s mem=35816KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 17:49:09 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.020s
ramon: group.total          20.002s
ramon: group.utime          19.978s
ramon: group.stime          0.024s
ramon: group.mempeak        36072KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.048s
ramon: loadavg              1.00
