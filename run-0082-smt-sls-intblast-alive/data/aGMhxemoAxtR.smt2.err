ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:44:55 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27850 MiB
ramon: sys.mem.avail        62084 MiB
ramon: sys.nprocs           1382
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/aGMhxemoAxtR.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             855836
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   90.9091     10000        49          0            1        2)
(sat.ddfw       1      1   56.8239     20001        98          1            1        3)
(sat.ddfw       1      1   50.8906     40001       196          2            1        5)
(smt.stats    0    101   3607    373  1308/1128/106     104/21     4   16   52.24)
(sat.ddfw       1      1   46.0829     70001       343          3            1        8)
(smt.stats    1    202   4112    808  2226/1994/106     214/23     4   16   52.35)
ramon: poll                 wall=1.003s usage=1.296s mem=54692KiB load=1.29 rootload=1.29
(sat.ddfw       1      1   40.6504    110001       539          4            1       12)
(smt.stats    2    314   5569   2587  2617/2360/109     323/29     6   20   52.44)
(smt.stats    3    415   7194   4166  2651/2413/111     422/29     8   23   52.56)
(smt.stats    4    526   9558   6006  2860/2622/123     526/58    12   29   52.65)
(sat.ddfw       1      1   30.4315    160000       784          5            1       17)
(smt.stats    5    648  14247   7695  2936/2690/125     646/74    14   31   52.76)
ramon: poll                 wall=2.000s usage=2.318s mem=55092KiB load=1.03 rootload=1.02
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas        :deletions    )
(smt.stats    6    749  17273   8893  3006/2695/125     750/74    14   31   52.85)
(sat.ddfw       1      1   24.5503    220001      1078          6            1       23)
ramon: poll                 wall=3.000s usage=3.315s mem=55248KiB load=1.00 rootload=1.00
(smt.stats    7    860  19725  10368  3131/2808/125     862/76    14   31   52.95)
(smt.stats    8    982  22452  13301  3268/3024/126     978/86    15   33   53.05)
(smt.stats    9   1116  23814  16552  3286/3032/129    1110/86    15   33   53.05)
(sat.ddfw       1      1   20.7715    290001      1421          7            1       30)
(smt.stats   10   1217  25221  19197  3304/3054/131    1200/87    16   39   53.05)
(smt.stats   11   1328  30982  24862  3373/3117/132    1312/95    18   40   53.15)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions    )
(smt.stats   12   1450  36780  29687  3383/3134/132    1439/95    18   40   53.31)
ramon: poll                 wall=4.000s usage=4.319s mem=55704KiB load=1.00 rootload=1.00
(smt.stats   13   1584  41328  34095  3392/3147/133    1578/121    19   40   53.42)
(smt.stats   14   1731  43501  39496  3459/3158/133    1723/122    19   40   53.52)
(sat.ddfw       1      1   18.0099    370001      1813          8            1       38)
(smt.stats   15   1832  44663  42616  3546/3223/133    1819/130    19   40   53.52)
(smt.stats   16   1943  45867  46577  3611/3364/133    1923/130    19   40   53.61)
ramon: poll                 wall=5.000s usage=5.316s mem=55864KiB load=1.00 rootload=1.00
(smt.stats   17   2065  46996  50236  3638/3383/134    2050/153    20   40   53.61)
(smt.stats   18   2199  50676  54167  3677/3413/134    2176/158    20   40   53.61)
(smt.stats   19   2346  52879  59187  3783/3467/134    2306/169    20   40   53.71)
(sat.ddfw       1      1    15.949    460001      2254          9            1       47)
ramon: poll                 wall=6.007s usage=6.325s mem=55908KiB load=1.00 rootload=1.00
ramon: poll                 wall=7.000s usage=7.384s mem=56108KiB load=1.07 rootload=1.07
(sat.ddfw       1      1   14.3287    560001      2745         10            1       57)
(smt.stats   20   2507  53277  59853  3868/3554/134    2467/174    20   40   54.00)
(smt.stats   21   2608  54274  62055  4316/4005/135    2566/192    21   40   54.00)
ramon: poll                 wall=8.000s usage=8.367s mem=56192KiB load=0.98 rootload=0.98
(sat.ddfw       1      1   13.0285    670001      3284         11            1       68)
(smt.stats   22   2719  54657  62915  4466/4154/135    2678/199    21   40   54.00)
(smt.stats   23   2841  56044  66565  4615/4351/135    2815/200    21   40   54.11)
ramon: poll                 wall=9.000s usage=9.358s mem=56280KiB load=0.99 rootload=0.99
(smt.stats   24   2975  57797  69474  4672/4424/143    3050/230    22   44   54.11)
(smt.stats   25   3122  59398  72676  4706/4441/145    3218/231    22   44   54.35)
(smt.stats   26   3283  65056  76406  4718/4465/145    3372/345    23   52   54.35)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 31 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 30 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 24 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 24 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 31 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 30 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 24 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 31 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 30 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 2 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 27 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 26 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 26 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 8 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 8 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 36028797018963966 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 8444249301318851 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 4 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 1 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 1 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 4 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 8 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 1 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 4 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 8 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 4 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 1 := 296064&31
(smt.stats   27   3460  68573  82974  4829/4580/267    3618/367    25   83   54.79)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 64 := 296388&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 64 := 296388&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 64 := 296388&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 96 := 296416&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 96 := 296416&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 96 := 296416&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 128 := 296448&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 128 := 296448&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 256 := 296448&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
(smt.stats   28   3561  70904  86375  4939/4678/300    3789/375    26   90   55.00)
(smt.stats   29   3672  75800  92438  4943/4682/301    3903/380    27   94   55.00)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 8444249301318881 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 8444249301318881 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 992 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 64 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 128 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 256 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 64 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 32 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 128 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 256 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 384 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 256 := 9484288&1023
(smt.stats   30   3794  79216  99586  5112/4792/353    4111/393    28  100   55.39)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 137 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 137 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 168 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 168 := 9484288&1023
(smt.stats   31   3928  81544 105657  5205/4916/362    4407/418    29  109   55.49)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4075  88199 114859  5224/4929/363    4603/486    30  120   55.49)
ramon: poll                 wall=10.000s usage=10.297s mem=57996KiB load=0.94 rootload=0.93
(sat.ddfw       1      1   11.9451    790001      3872         12            1       80)
(smt.stats   33   4236  97230 136120  5272/4983/365    4794/508    31  127   55.76)
ramon: poll                 wall=11.000s usage=11.258s mem=58020KiB load=0.96 rootload=0.96
(sat.ddfw       1      1   11.2156    920001      4509         13            1       93)
ramon: poll                 wall=12.003s usage=12.333s mem=58252KiB load=1.07 rootload=1.08
ramon: poll                 wall=13.003s usage=13.334s mem=58360KiB load=1.00 rootload=1.00
(smt.stats   34   4413 102411 142689  5483/5194/367    5094/526    32  128   56.05)
(sat.ddfw       1      1   10.3904   1060001      5196         14            1      108)
(smt.stats   35   4607 110517 159214  5543/5238/371    5585/576    33  136   56.15)
(smt.stats   36   4709 115557 171141  5629/5340/372    5775/609    34  137   56.15)
ramon: poll                 wall=14.000s usage=14.327s mem=58696KiB load=1.00 rootload=0.99
(smt.stats   37   4820 118518 174057  5634/5341/372    5915/609    34  137   56.26)
(smt.stats   38   4942 123500 192881  5646/5357/374    6185/622    35  143   56.44)
(smt.delete-inactive-clauses  :num-deleted-clauses 538)
(smt.stats   39   5076 130854 213170  5651/5362/375    5802/622    35  143   56.44)
(smt.stats   40   5223 141841 241952  5661/5365/375    5955/657    36  145   56.78)
(smt.stats   41   5384 149204 259258  5680/5391/377    6180/670    37  163   56.78)
ramon: poll                 wall=15.000s usage=15.327s mem=59020KiB load=1.00 rootload=1.00
(smt.stats   42   5561 155486 270670  5692/5402/377    6563/670    37  163   56.89)
(smt.stats   43   5755 164167 286031  5711/5410/377    6836/670    37  163   56.89)
(sat.ddfw       1      1   9.68804   1210001      5931         15            1      123)
(smt.stats   44   5968 170566 301773  5791/5499/379    7184/829    38  182   57.01)
(smt.stats   45   6069 173527 306916  5805/5504/381    7311/830    38  182   57.11)
(smt.stats   46   6180 176529 315635  5812/5520/381    7549/830    38  182   57.11)
ramon: poll                 wall=16.000s usage=16.348s mem=59552KiB load=1.02 rootload=1.02
ramon: poll                 wall=17.000s usage=17.391s mem=59300KiB load=1.04 rootload=1.04
(smt.stats   47   6302 181770 330707  5839/5531/381    7731/873    39  185   57.11)
(sat.ddfw       1      1   9.00799   1370001      6715         16            1      139)
ramon: poll                 wall=18.000s usage=18.365s mem=59572KiB load=0.97 rootload=0.98
(smt.stats   48   6436 186391 349144  5945/5548/381    8079/876    39  185   57.30)
ramon: poll                 wall=19.000s usage=19.307s mem=59836KiB load=0.94 rootload=0.94
(smt.stats   49   6583 194460 371632  5983/5674/381    8276/877    39  185   57.30)
(smt.stats   50   6744 201229 394555  6003/5700/381    8605/877    39  185   57.40)
ramon: poll                 wall=20.000s usage=20.247s mem=60172KiB load=0.94 rootload=0.94
ramon: end                  Fri Nov  1 22:45:15 2024
ramon: root.execname        z3
ramon: root.utime           20.280s
ramon: root.stime           0.010s
ramon: group.total          20.301s
ramon: group.utime          20.289s
ramon: group.stime          0.012s
ramon: group.mempeak        60808KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.069s
ramon: loadavg              1.01
