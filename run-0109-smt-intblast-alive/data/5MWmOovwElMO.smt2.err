ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:29:40 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         42822 MiB
ramon: sys.mem.avail        61715 MiB
ramon: sys.nprocs           1256
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/5MWmOovwElMO.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2794647
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   4312   1008  1146/1033/91      95/1     4   14   19.08)
(smt.stats    1    202   5732   3395  1960/1651/99     180/23     8   21   19.17)
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 140737488355328 := 36 << 28
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 140737488355328 := 36 << 28
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 140737488355328 := 36 << 28
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 140737488355328 := 36 << 28
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&140737488355327
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&140737488355327
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&140737488355326
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 140737488355328 := 36 << 28
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 140737488355328 := 130 << 28
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 268435455 := 268435455&9663676417
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 1 := 268435455&9663676417
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 9663676417 := 36 << 28
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 1 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 268435452 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 268435448 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 16 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 32 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 64 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 128 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 256 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 512 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 1024 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 2048 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 4096 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 8192 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 16384 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 32768 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 65536 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 131072 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 262144 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 524288 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 1048576 := 268435455&9663676416
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&9663676416
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 18 := 18 << 29
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&9663676416
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 18 := 18 << 29
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&9663676416
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 18 := 18 << 29
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 268435455&9663676416
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 18 := 18 << 29
(smt.stats    2    313   6672   4379  2072/1855/178     294/31    11   38   20.07)
(smt.stats    3    414   7297   5619  2347/1985/186     410/39    13   46   20.26)
(smt.stats    4    526   8106   8254  2508/2288/198     483/108    15   92   20.26)
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&24159191044
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 2017612657221173252 := 90 << 1
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&24159191041
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&24159191041
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&24159191041
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 1 := 1&24159191041
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 2017612657221173249 := 90 << 1
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 1 := 1&180
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 1 := 1&180
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&180
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 29 := 45 << 2
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&180
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 29 := 45 << 2
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&180
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 29 := 45 << 2
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&180
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 29 := 45 << 2
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 1 := 1&180
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&180
band: (band[47] (if (= #120 46) 0 (if #556 1 #685)) (shl[47] (bv2int %0) (+ 47 #688))) 1 := 1&180
(smt.stats    5    648   9839  11370  2570/2329/220     629/124    16  100   20.36)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    749  13357  14958  2628/2378/230     748/125    17  102   20.47)
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&32749125636
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 2017612665811107844 := 7518290042 << 1
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&113818731384
band: (band[47] (if (= #120 46) 0 (if #556 1 #685)) (shl[47] (bv2int %0) (+ 47 #688))) 1 := 1&113818731384
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&113818731384
band: (band[47] (if (= #120 46) 0 (if #556 1 #685)) (shl[47] (bv2int %0) (+ 47 #688))) 1 := 1&113818731384
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 1&113818731384
band: (band[47] (if (= #120 46) 0 (if #556 1 #685)) (shl[47] (bv2int %0) (+ 47 #688))) 1 := 1&113818731384
(smt.stats    7    860  15811  19041  2668/2423/232     900/146    19  106   20.47)
(smt.stats    8    983  18430  24505  2691/2456/238    1018/171    21  116   20.56)
(smt.stats    9   1117  23513  30720  2713/2473/240    1167/172    22  124   20.56)
(smt.stats   10   1218  28904  37200  2726/2482/240    1273/180    23  126   20.67)
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 35184372088831&4
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 35184372088831&4
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 35184372088831&8
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 35184372088831&16
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 35184372088831&16
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 35184372088831&8
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 8 := 35184372088831&12
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 18 := 35184372088831&22
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 18 := 35184372088831&22
(smt.stats   11   1329  31278  40093  2773/2531/276    1433/194    24  135   20.67)
(smt.stats   12   1451  35397  47489  2785/2542/281    1578/208    26  138   20.78)
(smt.stats   13   1585  38950  54654  2861/2590/281    1755/219    27  143   20.78)
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177664
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177664
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177664
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177696
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177664
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177696
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177664
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177696
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177760
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177760
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177792
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177824
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177888
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744178144
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177728
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177696
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744177760
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744178336
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744178400
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744178144
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744178144
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744179168
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744178656
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177632 := 70368744177663&70368744178656
ramon: poll                 wall=1.000s usage=0.908s mem=22088KiB load=0.91 rootload=0.90
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177656 := 70368744177663&70368744180704
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177656 := 70368744177663&70368744180712
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177656 := 70368744177663&70368744180728
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177656 := 70368744177663&70368744180728
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177656 := 70368744177663&70368744183800
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177656 := 70368744177663&70368744181752
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177656 := 70368744177663&70368744181752
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177656 := 70368744177663&70368744181752
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 70368744177656 := 70368744177663&70368744181752
(smt.stats   14   1732  42497  64667  3077/2705/317    2045/267    28  151   21.28)
(smt.stats   15   1833  43796  69243  3299/2915/332    2368/277    29  154   21.56)
(smt.stats   16   1944  44864  72744  3441/3168/334    2902/289    30  154   21.86)
(smt.stats   17   2066  48142  80014  3460/3187/334    3151/289    30  154   21.86)
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 164282499072 := 17592186044415&164282499072
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 164282499072 := 211106232533604 << 44
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 164282499072 := 17592186044415&164282499072
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 164282499072 := 211106232533604 << 44
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 164282499072 := 17592186044415&164282499072
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 164282499072 := 211106232533604 << 44
(smt.stats   18   2200  50990  87142  3587/3215/335    3520/406    31  160   22.34)
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 274877906944 := 17592186044415&274877906944
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 274877906944 := 211174952010702 << 44
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 236223201280 := 17592186044415&236223201280
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 236223201280 := 211174952010514 << 44
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 236225298432 := 17592186044415&236225298432
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 236225298432 := 211174952009762 << 44
(smt.stats   19   2347  51925  88670  3679/3378/340    3788/407    31  160   22.63)
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 236250464256 := 17592186044415&236250464256
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 46 #879 #881) 64)) 236250464256 := 211174952009762 << 44
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   20   2508  54512 100661  4416/4137/343    4982/568    33  172   22.73)
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 0&92
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 0 := 46 << 1
band: (band[47] (if (or #700 #701 #702 #703 #704 #705 #706 #707 #708 #709 #710 #711 #712 #713 #714 #715 ...) 0 (if #718 1 #808)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 0&92
shl: (shl[47] (bv2int %0) (+ 47 (* 140737488355327 #116))) 0 := 46 << 1
(smt.stats   21   2609  58508 109444  4454/4149/343    5107/572    33  172   22.83)
ramon: poll                 wall=2.000s usage=1.906s mem=24220KiB load=1.00 rootload=1.00
(smt.stats   22   2720  62278 124535  4472/4188/352    5517/844    34  181   22.93)
(smt.stats   23   2842  68467 138990  4579/4201/352    5841/936    35  198   23.03)
(smt.stats   24   2976  71777 149275  4639/4353/354    6150/1013    36  207   23.03)
(smt.stats   25   3123  76633 162041  4656/4370/357    6673/1081    37  239   23.28)
(smt.stats   26   3284  82861 189790  4664/4378/360    7983/1272    38  264   23.28)
(smt.stats   27   3461  87653 204341  4765/4478/361    9030/1383    39  268   23.47)
(smt.stats   28   3564  90854 213651  4779/4489/361    9317/1383    39  268   23.57)
(smt.stats   29   3675  95774 232752  4808/4506/362    9556/1415    40  269   23.57)
ramon: poll                 wall=3.000s usage=2.906s mem=25052KiB load=1.00 rootload=1.00
(smt.stats   30   3798  97805 240357  4999/4712/363    9712/1417    40  269   23.76)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   31   3932 100151 248991  5070/4718/363    9920/1417    40  269   23.76)
(smt.stats   32   4079 104373 262768  5093/4792/363   11061/1435    41  269   23.85)
(smt.stats   33   4240 109814 279782  5222/4814/364   11598/1442    41  269   23.95)
(smt.stats   34   4417 113256 296528  5531/4971/364   11987/1796    42  271   24.14)
(smt.stats   35   4611 119788 320482  5547/5260/364   12558/1796    42  271   24.24)
ramon: poll                 wall=4.000s usage=3.906s mem=25636KiB load=1.00 rootload=0.99
(smt.stats   36   4712 123914 338950  5575/5263/365   12988/1891    43  273   24.34)
(smt.stats   37   4824 126564 353841  5710/5423/367   13222/2056    44  278   24.33)
(smt.stats   38   4946 129524 371073  5776/5430/367   13609/2057    44  278   24.53)
(smt.delete-inactive-clauses  :num-deleted-clauses 4)
(smt.stats   39   5080 133510 387303  5825/5534/368   13891/2057    44  278   24.53)
(smt.stats   40   5227 138410 407957  5840/5544/368   14435/2181    45  294   24.53)
ramon: poll                 wall=5.007s usage=4.911s mem=26032KiB load=1.00 rootload=0.99
(smt.stats   41   5388 142108 414864  5953/5557/368   14717/2183    45  294   24.72)
(smt.stats   42   5565 147702 444794  6051/5757/368   15638/2183    45  294   24.72)
(smt.stats   43   5759 153234 469497  6355/5772/368   16634/2190    45  294   24.91)
ramon: poll                 wall=6.000s usage=5.904s mem=26576KiB load=1.00 rootload=1.00
(smt.stats   44   5972 158775 491212  6533/6072/368   18029/2192    45  294   25.19)
(smt.stats   45   6073 162257 500916  6634/6281/380   18405/3007    46  328   25.30)
ramon: poll                 wall=7.000s usage=6.904s mem=26808KiB load=1.00 rootload=1.00
(smt.stats   46   6184 165733 524676  6851/6459/380   18967/3010    46  328   25.39)
(smt.stats   47   6306 168711 533955  7026/6590/380   19372/3010    46  328   25.49)
ramon: poll                 wall=8.000s usage=7.904s mem=27024KiB load=1.00 rootload=1.00
(smt.stats   48   6440 171787 547718  7443/6942/381   19737/3238    47  339   25.68)
(smt.stats   49   6587 175356 567514  7533/7219/385   20664/3238    47  339   25.78)
(smt.stats   50   6748 178915 588412  7607/7284/387   21634/3684    48  369   25.87)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   51   6925 181611 602956  7759/7350/387   22732/3684    48  369   25.97)
ramon: poll                 wall=9.000s usage=8.903s mem=27652KiB load=1.00 rootload=1.00
(smt.stats   52   7119 187514 635132  7842/7491/387   23421/3684    48  369   26.26)
(smt.stats   53   7332 190036 653201  8263/7597/387   23951/4248    49  377   26.54)
(smt.stats   54   7566 192434 666716  8752/8106/387   24867/4251    49  377   26.71)
ramon: poll                 wall=10.000s usage=9.903s mem=28232KiB load=1.00 rootload=1.00
(smt.stats   55   7667 193605 679312  9169/8529/387   25254/4252    49  377   26.80)
(smt.stats   56   7778 194592 692328  9468/8904/387   25564/4252    49  377   26.90)
(smt.stats   57   7900 196174 714509  9723/9213/387   26212/4252    49  377   27.00)
(smt.stats   58   8034 201418 727002  9761/9468/387   26723/4255    49  377   27.09)
(smt.stats   59   8181 207464 767613  9784/9494/387   27428/4255    49  377   27.27)
ramon: poll                 wall=11.000s usage=10.903s mem=28748KiB load=1.00 rootload=1.00
(smt.stats   60   8342 214752 830887  9879/9517/387   27867/4257    49  377   27.36)
(smt.stats   61   8519 220052 881195  9893/9599/387   29559/4257    49  377   27.46)
(smt.stats   62   8713 226739 920566  9899/9613/387   30041/4257    49  377   27.55)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   63   8926 236156 1014043  9904/9618/387   30879/4257    49  377   27.55)
ramon: poll                 wall=12.000s usage=11.903s mem=29332KiB load=1.00 rootload=1.00
(smt.stats   64   9160 245498 1059399  9978/9627/387   32551/4261    49  377   27.74)
(smt.stats   65   9417 254184 1117278 10342/9708/387   34537/4274    49  377   27.93)
(smt.stats   66   9518 256489 1131388 10382/10096/387   35153/4274    49  377   28.14)
(smt.stats   67   9629 260674 1178989 10394/10108/387   35690/4274    49  377   28.14)
ramon: poll                 wall=13.000s usage=12.902s mem=29752KiB load=1.00 rootload=0.99
(smt.stats   68   9751 266026 1223794 10419/10119/387   36412/4274    49  377   28.14)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats     :conflicts  :propagations            :lemmas           :deletions     )
(smt.stats   69   9885 270498 1265756 10422/10136/387   36898/4274    49  377   28.24)
(smt.delete-inactive-clauses  :num-deleted-clauses 572)
(smt.stats   70  10032 274376 1322919 10465/10139/388   36942/5814    50  383   28.24)
(smt.stats   71  10193 278635 1379453 10561/10230/388   38054/5814    50  383   28.33)
(smt.stats   72  10370 283278 1421556 10586/10285/389   38900/6161    51  385   28.43)
ramon: poll                 wall=14.000s usage=13.902s mem=30004KiB load=1.00 rootload=1.00
(smt.stats   73  10564 287586 1463125 10682/10304/389   39508/6163    51  385   28.53)
(smt.stats   74  10777 301099 1714959 10685/10399/389   39948/6163    51  385   28.53)
ramon: poll                 wall=15.000s usage=14.902s mem=30268KiB load=1.00 rootload=1.00
(smt.stats   75  11011 306951 1774143 10822/10523/390   41155/6489    52  390   28.93)
(smt.stats   76  11268 313456 1829933 11133/10547/391   42193/6491    52  390   29.02)
ramon: poll                 wall=16.000s usage=15.902s mem=30700KiB load=1.00 rootload=1.00
(smt.stats   77  11550 320203 1871757 11470/10913/392   43628/6492    52  390   29.21)
(smt.stats   78  11651 325203 1890783 11475/11189/392   43905/6851    53  393   29.31)
(smt.stats   79  11762 329390 1910889 11480/11194/392   44615/6851    53  393   29.31)
(smt.stats   80  11884 334193 1940321 11506/11198/392   45217/6852    53  393   29.41)
(smt.stats   81  12018 337522 1968396 11531/11231/393   45812/6853    53  393   29.41)
(smt.stats   82  12165 340624 2019427 11539/11250/394   46242/7194    54  400   29.41)
ramon: poll                 wall=17.000s usage=16.902s mem=31092KiB load=1.00 rootload=1.00
(smt.stats   83  12326 346687 2068571 11559/11256/395   47390/7194    54  400   29.60)
(smt.stats   84  12503 350773 2106101 11686/11281/395   48871/7195    54  400   29.79)
(smt.stats   85  12697 357513 2154731 11756/11408/395   50501/7500    55  400   29.89)
ramon: poll                 wall=18.000s usage=17.901s mem=31684KiB load=1.00 rootload=1.00
(smt.stats   86  12910 362422 2186721 11946/11491/395   52037/7500    55  400   30.18)
(smt.stats   87  13144 366213 2206765 12071/11709/395   53361/7503    55  400   30.37)
ramon: poll                 wall=19.000s usage=18.901s mem=32036KiB load=1.00 rootload=1.00
(smt.stats   88  13401 372294 2217701 12214/11822/395   54162/7504    55  400   30.46)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   89  13683 377818 2239159 12410/12001/395   54930/7508    55  400   30.65)
ramon: poll                 wall=20.000s usage=19.901s mem=32296KiB load=1.00 rootload=1.00
(smt.stats   90  13993 385892 2303921 12503/12143/395   55951/7510    55  400   30.84)
ramon: end                  Tue Dec 24 14:30:00 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.020s
ramon: group.total          19.982s
ramon: group.utime          19.954s
ramon: group.stime          0.028s
ramon: group.mempeak        32552KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.081s
ramon: loadavg              1.00
