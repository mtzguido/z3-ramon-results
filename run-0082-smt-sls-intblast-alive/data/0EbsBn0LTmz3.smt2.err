ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:26:26 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29725 MiB
ramon: sys.mem.avail        62088 MiB
ramon: sys.nprocs           1394
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/0EbsBn0LTmz3.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             584187
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   72.9927     10000        49          0            1        2)
(smt.stats    0    101   2712    359  1430/1293/104      86/44     8   23   51.97)
(sat.ddfw       1      1   42.5574     20001        98          1            1        3)
(smt.stats    1    202   4402   1782  2142/1944/113     202/67    12   27   52.35)
(sat.ddfw       1      1   46.1894     40001       196          2            1        5)
(smt.stats    2    313   5560   3430  2292/2077/114     317/83    13   31   52.35)
(smt.stats    3    414   6653   4943  2514/2278/116     429/104    15   32   52.45)
(smt.stats    4    525   8107   6865  2635/2398/120     531/118    16   35   52.55)
(sat.ddfw       1      1   41.1523     70001       343          3            1        8)
(smt.stats    5    647   9517   9462  2666/2421/120     661/118    16   35   52.84)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  12415  12326  2676/2434/121     759/132    17   36   52.84)
ramon: poll                 wall=1.000s usage=0.883s mem=55100KiB load=0.88 rootload=0.87
(smt.stats    7    859  15493  17155  2686/2441/121     870/133    17   36   52.93)
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 1 := 1&1099511627776
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 1&1099511627776
shl: (shl[64] (bv2int %0) (mod (+ #101 #351) 64)) 1 := 1385 << 41
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 1&1099511627776
shl: (shl[64] (bv2int %0) (mod (+ #101 #351) 64)) 1 := 1385 << 41
(smt.stats    8    981  17629  19728  2704/2459/123     987/134    18   39   52.93)
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 46&70368744177664
shl: (shl[64] (bv2int %0) (mod (+ #101 #351) 64)) 1407374883553326 := 47 << 47
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 46&70368744177664
shl: (shl[64] (bv2int %0) (mod (+ #101 #351) 64)) 1407374883553326 := 47 << 47
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 46&70368744177664
shl: (shl[64] (bv2int %0) (mod (+ #101 #351) 64)) 1407374883553326 := 47 << 47
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 46 := 46&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 45 := 46&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 46&70368744177664
shl: (shl[64] (bv2int %0) (mod (+ #101 #351) 64)) 1407374883553326 := 47 << 47
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 0&70368744177664
shl: (shl[64] (bv2int %0) (mod (+ #101 #351) 64)) 0 := 47 << 47
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 70368744177664 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 70368744177662 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
shl: (shl[48] (bv2int %0) (mod (bv2int %0) 48)) 70368744177665 := 47 << 47
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 1 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 2 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 4 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 8 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 70368744177664 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 70368744177648 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 32 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 64 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 128 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 128 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 256 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 512 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 1024 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 2048 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 4096 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 8192 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 16384 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 32768 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 65536 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 131072 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 262144 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 262144 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 524288 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 1048576 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 2097152 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 4194304 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 8388608 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 16777216 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 33554432 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 67108864 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 134217728 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 268435456 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 536870912 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 1073741824 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 2147483648 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 4294967296 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 4294967296 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 8589934592 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 17179869184 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 34359738368 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 68719476736 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 137438953472 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 274877906944 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 549755813888 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 1099511627776 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 549755813888 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 1099511627776 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 2199023255552 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 4398046511104 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 8796093022208 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 17592186044416 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 35184372088832 := 140737488355328&70368744177664
(smt.stats    9   1115  20064  22212  3180/2495/135    1113/143    20   45   54.43)
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
shl: (shl[48] (bv2int %0) (mod (bv2int %0) 48)) 140737488355329 := 47 << 47
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
shl: (shl[48] (bv2int %0) (mod (bv2int %0) 48)) 140737488355329 := 47 << 47
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
shl: (shl[48] (bv2int %0) (mod (bv2int %0) 48)) 140737488355329 := 47 << 47
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 17592186044416 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 35184372088832 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 35184372088832 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 35184372088832 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 35184372088832 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 70368744177664 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 0 := 140737488355328&70368744177664
band: (band[48] (shl[48] (bv2int %0) (mod #101 48)) (if (= #595 47) 1 (if #597 2 #689))) 13194139533312 := 140737488355328&70368744177664
(sat.ddfw       1      1   35.6189    110001       539          4            1       12)
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 70368744177660 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046511112 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046511120 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046511136 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046511168 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046511232 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046511232 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046511360 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046511616 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046512128 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046513152 := 140737488355328&70368744177664
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 4398046515200 := 140737488355328&70368744177664
(smt.stats   10   1216  21068  24250  3136/2648/325    1276/147    20   45   54.43)
(smt.stats   11   1327  22138  25290  3241/2819/401    1520/177    21  101   54.82)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  24025  29132  3719/3465/421    1991/219    22  106   54.92)
(sat.ddfw       1      1   30.8445    160000       784          5            1       17)
(smt.stats   13   1583  29225  35542  3834/3585/427    2687/992    24  156   55.11)
ramon: poll                 wall=2.000s usage=1.885s mem=57328KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   27.1867    220001      1078          6            1       23)
(sat.ddfw       1      1   24.1296    290001      1421          7            1       30)
ramon: poll                 wall=3.000s usage=2.887s mem=57732KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   21.6861    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=3.887s mem=57556KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   19.6678    460001      2254          9            1       47)
ramon: poll                 wall=5.000s usage=4.883s mem=57820KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   17.9727    560001      2745         10            1       57)
(smt.stats   14   1730  30567  37652  4023/3590/427    2868/1000    24  156   55.50)
ramon: poll                 wall=6.000s usage=5.886s mem=57700KiB load=1.00 rootload=1.00
(smt.stats   15   1831  34499  51884  4242/3990/429    3024/1072    25  160   55.50)
(sat.ddfw       1      1   16.5488    670001      3284         11            1       68)
ramon: poll                 wall=7.000s usage=6.886s mem=57732KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   15.3218    790001      3872         12            1       80)
ramon: poll                 wall=8.000s usage=7.886s mem=57736KiB load=1.00 rootload=1.00
(smt.stats   16   1942  37729  60815  4335/4022/429    3169/1072    25  160   55.50)
(smt.stats   17   2064  41846  67520  4445/4118/436    3672/1125    26  162   55.62)
(smt.stats   18   2198  46991  80155  4821/4569/438    4053/1230    28  174   55.71)
ramon: poll                 wall=9.000s usage=9.067s mem=58472KiB load=1.18 rootload=1.18
(smt.stats   19   2345  53952  99614  5143/4579/438    4611/1236    28  174   55.99)
(sat.ddfw       1      1   14.2606    920001      4509         13            1       93)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   20   2506  59686 114804  5296/5016/439    5268/1456    29  175   56.09)
(smt.stats   21   2607  64476 122756  5383/5071/439    5394/1463    29  175   56.28)
ramon: poll                 wall=10.000s usage=10.103s mem=58524KiB load=1.04 rootload=1.04
(smt.stats   22   2718  68602 131163  5546/5161/439    5626/1466    29  175   56.37)
(sat.ddfw       1      1   13.3321   1060001      5196         14            1      108)
ramon: poll                 wall=11.000s usage=11.147s mem=58960KiB load=1.04 rootload=1.04
(smt.stats   23   2840  73204 138656  5742/5349/439    5799/1468    29  175   56.37)
(smt.stats   24   2974  77510 155238  5854/5602/440    6497/1839    30  176   56.47)
(smt.stats   25   3121  84797 176901  5890/5641/443    6863/2142    31  179   56.56)
ramon: poll                 wall=12.000s usage=12.185s mem=58980KiB load=1.04 rootload=1.04
(sat.ddfw       1      1    12.524   1210001      5931         15            1      123)
(smt.stats   26   3282  88984 184631  5960/5650/443    7117/2238    32  194   56.66)
(smt.stats   27   3459  93037 207736  6187/5932/450    7548/2386    33  202   56.90)
ramon: poll                 wall=13.000s usage=13.228s mem=59220KiB load=1.04 rootload=1.04
(smt.stats   28   3560  96508 214604  6319/5941/450    7985/2390    33  202   56.90)
(sat.ddfw       1      1   11.8081   1370001      6715         16            1      139)
(smt.stats   29   3671  99354 224886  6693/6119/450    8136/2588    34  243   57.00)
ramon: poll                 wall=14.000s usage=14.270s mem=59340KiB load=1.04 rootload=1.04
(smt.stats   30   3793 102698 238110  7003/6531/450    8476/2588    34  243   57.19)
ramon: poll                 wall=15.000s usage=15.312s mem=59788KiB load=1.04 rootload=1.05
(smt.stats   31   3927 107574 253710  7422/6911/450    8948/2588    34  243   57.19)
(sat.ddfw       1      1   11.1658   1540001      7549         17            1      156)
(smt.stats   32   4074 112468 269816  7489/7206/451    9423/2708    35  249   57.28)
(smt.stats   33   4235 118548 289771  7654/7382/454    9964/2785    36  262   57.28)
ramon: poll                 wall=16.000s usage=16.353s mem=59900KiB load=1.04 rootload=1.04
(smt.stats   34   4412 126841 312229  7797/7422/454   10750/2894    37  264   57.38)
(smt.stats   35   4606 132489 348461  7832/7584/456   11997/3352    38  274   57.76)
(smt.stats   36   4707 138566 389372  7838/7590/458   12231/3462    40  310   58.03)
(smt.stats   37   4818 142865 423067  7846/7592/459   12397/3605    41  314   58.03)
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 24576 := 32144&8796093022208
band: (band[48] (shl[64] (bv2int %0) (mod #352 64)) (if (= #708 63) 0 (if #710 1 #834))) 24576 := 32144&8796093022208
ramon: poll                 wall=17.002s usage=17.391s mem=60500KiB load=1.04 rootload=1.03
(smt.stats   38   4940 146548 437559  7972/7612/460   12882/3654    42  316   58.13)
(sat.ddfw       1      1   10.5914   1720001      8431         18            1      174)
(smt.delete-inactive-clauses  :num-deleted-clauses 406)
(smt.stats   39   5074 150525 463057  7988/7731/471   12736/3870    43  328   58.13)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   40   5221 157310 500167  8089/7756/472   13044/3873    43  328   58.22)
ramon: poll                 wall=18.000s usage=18.435s mem=60560KiB load=1.05 rootload=1.05
(smt.stats   41   5382 163994 546052  8203/7909/473   13463/3946    44  330   58.32)
(smt.stats   42   5559 168436 563808  8341/8056/475   13744/4048    45  331   58.32)
(sat.ddfw       1      1   10.1719   1910001      9362         19            1      193)
ramon: poll                 wall=19.000s usage=19.759s mem=60832KiB load=1.32 rootload=1.32
(smt.stats   43   5753 173456 574814  8664/8112/475   13984/4116    46  333   58.41)
ramon: poll                 wall=20.000s usage=20.942s mem=60880KiB load=1.18 rootload=1.19
ramon: end                  Fri Nov  1 21:26:46 2024
ramon: root.execname        z3
ramon: root.utime           20.980s
ramon: root.stime           0.010s
ramon: group.total          20.998s
ramon: group.utime          20.986s
ramon: group.stime          0.012s
ramon: group.mempeak        61136KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.060s
ramon: loadavg              1.05
