ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:15:35 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         25955 MiB
ramon: sys.mem.avail        61755 MiB
ramon: sys.nprocs           1403
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/NlL2FC7PSxL8.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             7931
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 21 := 1073741823&21
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 21 := 20 << 30
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&20
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 20 := 1073741823&20
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023255572 := 20 << 30
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 20 := 1073741823&20
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023255572 := 20 << 30
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023255552 := 20 << 30
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023255552 := 20 << 30
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023255552 := 20 << 30
(smt.stats    0    102   2969    893  1095/982/107      97/6     4   16   19.09)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 13 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 17 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 5 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 4 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 5 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 20 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 20 := 1073741823&21
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 21 := 1073741823&21
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 21 := 20 << 30
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&0
shl: (shl[41] (bv2int %0) (+ 41 (* 2199023255551 #116))) 77309411327 := 77309411328 << 31
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&0
shl: (shl[41] (bv2int %0) (+ 41 (* 2199023255551 #116))) 77309411327 := 77309411328 << 31
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&0
shl: (shl[41] (bv2int %0) (+ 41 (* 2199023255551 #116))) 77309411327 := 77309411328 << 31
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1073741823&0
shl: (shl[41] (bv2int %0) (+ 41 (* 2199023255551 #116))) 77309411329 := 77309411328 << 31
(smt.stats    1    203   3897   2333  1870/1687/157     183/11    10   31   19.38)
(smt.stats    2    314   6190   4801  1984/1788/159     287/11    11   32   19.48)
(smt.stats    3    415   7046   5581  2112/1907/166     415/27    13   41   19.77)
(smt.stats    4    526   8762   7963  2164/1955/171     477/47    15   50   19.77)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 16 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 16 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 16 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 112 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 112 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 112 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 112 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 496 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 112 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 112 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 48 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 112 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 752 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 570 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 568 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 560 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 624 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 752 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 752 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 752 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 752 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 752 := 1099511627775&1099511627762
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1008 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1008 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1008 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1008 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 504 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 240 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 496 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 240 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 496 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 496 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 496 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1008 := 1099511627775&1099511627760
(smt.stats    5    648  10278  10505  2385/2175/269     614/54    16   67   20.16)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1018 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1016 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 1008 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 2032 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 6130 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 6130 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 6130 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 6130 := 1099511627775&1099511627760
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 6130 := 1099511627775&1099511627762
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    749  10797  11909  2496/2177/269     799/65    16   67   20.26)
(smt.stats    7    860  11552  14311  2713/2367/294    1025/109    17   77   20.55)
(smt.stats    8    982  13003  17574  2976/2763/304    1745/310    19   95   20.75)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 44099 := 549755813887&1054414467072
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 44099 := 549755813887&1054414467073
(smt.stats    9   1116  17084  27122  3082/2786/304    2004/311    19   95   20.84)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 44099 := 549755813887&1054414471169
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 44099 := 549755813887&1054414471171
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 44099 := 549755813887&1054414479425
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 44099 := 549755813887&1054414479425
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 44099 := 549755813887&1054414479425
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 44099 := 549755813887&1054414479425
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 44099 := 549755813887&1054414479427
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 43075 := 549755813887&1054414479425
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 43075 := 549755813887&1054414479427
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 41027 := 549755813887&1054414479425
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 41027 := 549755813887&1054414479427
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 41027 := 549755813887&1054414479425
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 41027 := 549755813887&1054414479425
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 41027 := 549755813887&1054414479425
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 41027 := 549755813887&1054414479427
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 41027 := 549755813887&1054414479427
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 41027 := 549755813887&1054414479427
(smt.stats   10   1217  18292  29928  3297/3051/321    2412/547    21  100   20.94)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414483521
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414483523
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471745
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471755
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471755
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471745
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471745
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471755
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471745
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 62019 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 164419 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 164419 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 197187 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 82499 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 139843 := 549755813887&1054414471747
(smt.stats   11   1328  19644  37056  3609/3259/337    2733/593    22  103   21.15)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 197187 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 197187 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 197187 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 197187 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 197187 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 401987 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 401987 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 401987 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 393795 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 393795 := 549755813887&1054414471747
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 393795 := 549755813887&1054414471747
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1450  20682  40194  3860/3554/363    3207/605    23  108   21.42)
(smt.stats   13   1584  25042  54236  3880/3674/376    4139/1194    24  120   21.61)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 63&504658682048
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2703681937600 := 274877971638 << 6
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 63&504658682048
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2703681937600 := 274877971720 << 6
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 63&504658682048
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2703681937600 := 274877972458 << 6
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 63&504658682048
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2703681937600 := 274877972458 << 6
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 63&504658673856
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2703681929408 := 274877971638 << 6
(smt.stats   14   1731  30220  67454  4115/3754/378    4749/1398    25  123   21.81)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 63&504658673864
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 0 := 63&504658673856
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2703681929408 := 274877971638 << 6
(smt.stats   15   1832  33349  74359  4321/3908/383    5041/1460    26  130   21.90)
ramon: poll                 wall=1.005s usage=0.936s mem=23268KiB load=0.93 rootload=0.91
(smt.stats   16   1943  35532  79302  4439/4209/386    5534/1554    27  130   22.10)
(smt.stats   17   2065  40684  92883  4450/4221/389    6049/1683    28  151   22.19)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   18   2199  46489 123999  4523/4235/390    6765/1829    29  153   22.29)
(smt.stats   19   2346  49302 138000  4789/4304/391    7194/2060    30  156   22.38)
(smt.stats   20   2507  51089 144137  4979/4584/391    7535/2072    30  156   22.70)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 558816 := 268435455&1245272909378
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 558944 := 268435455&1245272909384
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 558944 := 268435455&1245272925768
(smt.stats   21   2608  52719 153417  5285/4991/398    7791/2156    31  159   22.70)
(smt.stats   22   2719  54213 161514  5502/5083/398    8045/2164    31  159   22.80)
(smt.stats   23   2841  56605 187783  5810/5363/398    8459/2202    32  161   23.12)
(smt.stats   24   2975  58806 202752  6030/5694/398    9032/2202    32  161   23.12)
(smt.stats   25   3122  65926 239382  6105/5876/401    9802/2604    34  194   23.21)
ramon: poll                 wall=2.000s usage=1.930s mem=24628KiB load=1.00 rootload=1.00
(smt.stats   26   3283  72188 272764  6200/5906/403   10654/3154    36  205   23.41)
(smt.stats   27   3460  75302 302388  6458/6001/403   10909/3157    36  205   23.41)
(smt.stats   28   3561  78362 322627  6545/6247/403   11348/3158    36  205   23.50)
(smt.stats   29   3672  80933 348654  6741/6441/404   11973/3290    37  212   23.60)
(smt.stats   30   3794  84688 372978  6918/6668/405   12822/3566    38  218   23.70)
(smt.stats   31   3928  87282 384260  7173/6712/405   13397/3570    38  218   23.89)
(smt.stats   32   4075  92481 414319  7294/6963/406   14495/3864    39  225   23.99)
ramon: poll                 wall=3.000s usage=2.930s mem=25380KiB load=1.00 rootload=1.00
(smt.stats   33   4236  98986 455771  7374/7103/407   15274/4216    40  237   24.08)
(smt.stats   34   4413 103233 471903  7603/7186/408   15929/4507    41  240   24.18)
(smt.stats   35   4607 110190 481902  7651/7422/408   16484/4507    41  240   24.18)
(smt.stats   36   4708 116000 519935  7664/7423/408   16704/4508    41  240   24.18)
(smt.stats   37   4819 118804 531295  8009/7453/408   16895/4514    41  240   24.28)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   38   4941 122131 560884  8121/7892/410   17467/4807    42  256   24.38)
(smt.delete-inactive-clauses  :num-deleted-clauses 68)
(smt.stats   39   5075 126947 590920  8126/7897/410   17656/4807    42  256   24.58)
(smt.stats   40   5222 133758 645505  8255/7897/410   18140/4896    43  260   24.58)
ramon: poll                 wall=4.000s usage=3.930s mem=25960KiB load=1.00 rootload=1.00
(smt.stats   41   5383 141494 753146  8402/8058/411   18627/5106    44  263   24.68)
(smt.stats   42   5560 147054 817499  8418/8184/412   19738/5219    45  268   24.82)
(smt.stats   43   5754 154520 909492  8424/8195/412   20547/5219    45  268   24.92)
(smt.stats   44   5967 161939 980520  8459/8230/413   21273/5647    46  280   25.02)
(smt.stats   45   6068 164553 999109  8468/8238/414   21684/5647    46  280   25.02)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   46   6179 173037 1050896  8470/8240/414   22293/5743    47  300   25.12)
ramon: poll                 wall=5.000s usage=4.929s mem=26548KiB load=1.00 rootload=1.00
(smt.stats   47   6301 178238 1096577  8566/8242/414   22886/5749    47  300   25.12)
(smt.stats   48   6435 181278 1128273  8709/8370/414   23622/5754    47  300   25.21)
(smt.stats   49   6582 186935 1179952  8732/8502/416   24380/6388    48  320   25.31)
(smt.stats   50   6743 189245 1190613  8753/8514/416   24590/6388    48  320   25.51)
(smt.stats   51   6920 194132 1237099  8999/8738/420   26007/6504    49  330   25.80)
(smt.stats   52   7114 204750 1308377  9022/8755/420   26817/6504    49  330   25.90)
(smt.stats   53   7327 213854 1394977  9059/8794/420   27651/7090    50  339   26.01)
ramon: poll                 wall=6.000s usage=5.929s mem=27432KiB load=1.00 rootload=1.00
(smt.stats   54   7561 219866 1472913  9113/8818/421   28806/7523    51  346   26.10)
(smt.stats   55   7662 224172 1511549  9119/8858/421   29272/7523    51  346   26.20)
(smt.stats   56   7773 227132 1565735  9159/8860/421   29471/7523    51  346   26.29)
(smt.stats   57   7895 230596 1578899  9296/8908/421   29655/7526    51  346   26.29)
(smt.stats   58   8029 232880 1589783  9431/9054/421   30148/7535    51  346   26.29)
ramon: poll                 wall=7.000s usage=6.929s mem=28112KiB load=1.00 rootload=1.00
(smt.stats   59   8176 236272 1642591  9787/9227/421   30684/7538    51  346   26.38)
(smt.stats   60   8337 239637 1687759 10083/9537/421   31079/7544    51  346   26.61)
(smt.stats   61   8514 245146 1741877 10120/9840/424   31865/8152    52  353   26.80)
(smt.stats   62   8708 251897 1801430 10283/9861/424   32426/8161    52  353   26.94)
ramon: poll                 wall=8.000s usage=7.929s mem=28440KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats     :conflicts  :propagations            :lemmas           :deletions     )
(smt.stats   63   8921 260334 1861923 10407/10054/424   33161/8326    53  378   27.04)
(smt.stats   64   9155 268781 1925499 10581/10168/424   33898/8334    53  378   27.13)
(smt.stats   65   9412 273755 1991426 11074/10331/425   34624/8584    54  380   27.32)
(smt.stats   66   9513 276355 2018050 11089/10820/425   34969/8587    54  380   27.32)
ramon: poll                 wall=9.000s usage=8.928s mem=28884KiB load=1.00 rootload=1.00
(smt.stats   67   9624 279955 2038776 11140/10833/425   35274/8591    54  380   27.42)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 25632 := 32767&66560
(smt.stats   68   9746 283834 2064885 11282/10916/425   35831/8597    54  380   27.42)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 28672 := 32767&28672
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023284224 := 257698041986 << 15
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 28672 := 32767&28672
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023284224 := 257698039854 << 15
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 28672 := 32767&28672
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023284224 := 257698039854 << 15
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 28672 := 32767&28672
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023284224 := 257698039854 << 15
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 28672 := 32767&28672
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023284224 := 257698039854 << 15
(smt.stats   69   9880 286135 2081199 11418/11134/431   36219/8848    55  384   27.61)
(smt.delete-inactive-clauses  :num-deleted-clauses 58)
(smt.stats   70  10027 290382 2118724 11529/11211/431   36988/8850    55  384   27.80)
(smt.stats   71  10188 294501 2132131 11559/11252/431   37587/8851    55  384   27.90)
(smt.stats   72  10365 299243 2145184 11600/11285/431   38010/8854    55  384   27.90)
ramon: poll                 wall=10.000s usage=9.928s mem=29520KiB load=1.00 rootload=1.00
(smt.stats   73  10559 306744 2192999 11668/11351/431   38826/8854    55  384   28.00)
(smt.stats   74  10772 314207 2247634 11821/11393/431   40560/8870    55  384   28.29)
ramon: poll                 wall=11.000s usage=10.927s mem=30064KiB load=1.00 rootload=1.00
(smt.stats   75  11006 324645 2286804 11918/11587/432   41836/9620    56  397   28.65)
(smt.stats   76  11263 332629 2334718 12039/11652/432   43151/9627    56  397   28.84)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 2624 := 16383&10816
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 2624 := 16383&10816
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 2624 := 16383&68160
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023323712 := 2800318681292 << 14
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 2624 := 16383&68160
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023323712 := 2800318681292 << 14
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 2624 := 16383&68160
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023323712 := 2800318681456 << 14
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 2624 := 16383&68160
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 40 #867 #869) 64)) 2199023323712 := 2800318681374 << 14
(smt.stats   77  11545 339741 2392440 12154/11857/443   43911/9840    57  403   28.94)
(smt.stats   78  11646 344042 2428408 12173/11867/443   44257/9842    57  403   29.03)
(smt.stats   79  11757 348582 2503192 12254/11907/443   45907/9844    57  403   29.23)
ramon: poll                 wall=12.000s usage=11.926s mem=30684KiB load=1.00 rootload=0.99
(smt.stats   80  11879 352154 2556955 12393/11980/443   46536/9846    57  403   29.32)
(smt.stats   81  12013 354376 2580779 12483/12143/443   47575/9850    57  403   29.42)
(smt.stats   82  12160 358423 2633298 12612/12218/443   48314/9853    57  403   29.61)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   83  12321 363301 2724251 12628/12337/443   48718/9853    57  403   29.61)
(smt.stats   84  12498 366984 2765826 12645/12347/443   49537/9854    57  403   29.61)
ramon: poll                 wall=13.001s usage=12.927s mem=31452KiB load=1.00 rootload=1.00
(smt.stats   85  12692 378808 2835254 12716/12382/444   50374/10513    58  404   29.80)
(smt.stats   86  12905 385910 2901132 13104/12441/444   50904/10519    58  404   29.80)
(smt.stats   87  13139 393103 2931479 13236/12841/445   52391/10738    59  405   30.09)
ramon: poll                 wall=14.000s usage=13.923s mem=31768KiB load=1.00 rootload=1.00
(smt.stats   88  13396 404137 3077150 13366/12963/445   53013/10738    59  405   30.09)
(smt.stats   89  13678 420208 3136538 13369/13078/446   53503/10945    60  406   30.09)
ramon: poll                 wall=15.000s usage=14.923s mem=32192KiB load=1.00 rootload=1.00
(smt.stats   90  13988 429704 3253793 13824/13193/447   54844/11045    61  406   30.38)
(smt.stats   91  14089 433897 3267750 13881/13545/447   55061/11050    61  406   30.38)
(smt.stats   92  14200 437327 3293821 14008/13601/447   55316/11051    61  406   30.48)
(smt.stats   93  14322 440606 3332549 14205/13730/447   55694/11053    61  406   30.48)
band: (band[41] (if (or #670 #671 #672 #673 #674 #675 #676 #677 #678 #679 #680 #681 #682 #683 #684 #685 ...) 0 (if #694 1 #772)) (shl[64] (* 2 #114) (mod #870 64))) 2 := 16777215&304942944258
(smt.stats   94  14456 443832 3367228 14396/13922/447   56337/11053    61  406   30.59)
ramon: poll                 wall=16.000s usage=15.923s mem=32448KiB load=1.00 rootload=1.00
(smt.stats   95  14603 451404 3411370 14424/14114/452   57798/11190    62  407   30.78)
(smt.stats   96  14764 457805 3447842 14626/14297/453   58688/11192    62  407   30.98)
(smt.stats   97  14941 463715 3487491 14764/14352/453   59954/11193    62  407   31.17)
(smt.delete-inactive-clauses  :num-deleted-clauses 2587)
(smt.stats   98  15135 470206 3519570 14797/14488/453   58058/11485    63  407   31.17)
ramon: poll                 wall=17.000s usage=16.922s mem=32960KiB load=1.00 rootload=1.00
(smt.stats   99  15348 482768 3808546 14853/14543/453   58776/11485    63  407   31.27)
(smt.stats :restarts :decisions    :clauses/bin/units              :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas            :deletions     )
(smt.stats  100  15582 491500 3914368 14945/14568/453   59921/11486    63  407   31.37)
ramon: poll                 wall=18.000s usage=17.922s mem=33216KiB load=1.00 rootload=1.00
(smt.stats  101  15839 500174 3976211 15394/14655/453   62203/11491    63  407   31.82)
ramon: poll                 wall=19.000s usage=18.922s mem=33728KiB load=1.00 rootload=1.00
(smt.stats  102  16121 511081 4069118 15524/15142/453   65225/11491    63  407   32.11)
(smt.stats  103  16431 526449 4204995 15802/15241/453   66697/11496    63  407   32.47)
ramon: poll                 wall=20.000s usage=19.920s mem=34416KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 18:15:55 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.020s
ramon: group.total          19.999s
ramon: group.utime          19.971s
ramon: group.stime          0.028s
ramon: group.mempeak        34672KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.075s
ramon: loadavg              1.00
