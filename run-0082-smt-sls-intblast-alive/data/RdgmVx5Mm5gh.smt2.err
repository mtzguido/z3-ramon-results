ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:29:49 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28292 MiB
ramon: sys.mem.avail        62086 MiB
ramon: sys.nprocs           1382
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/RdgmVx5Mm5gh.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             804564
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(smt.stats    0    101   3800   2319  1216/1093/91      96/7     3   13   52.04)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 1 := 1&100
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 1 := 1&100
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 1&100
shl: (shl[51] (bv2int %0) (+ 51 (* 2251799813685247 #116))) 49 := 50 << 1
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 1&100
shl: (shl[51] (bv2int %0) (+ 51 (* 2251799813685247 #116))) 1 := 50 << 1
(smt.stats    1    202   5190   4021  2070/1863/99     190/8     6   16   52.14)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 1 := 1&92
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 1&92
band: (band[51] (if (= #120 50) 1 (if #564 3 #706)) (shl[51] (bv2int %0) (+ 51 #709))) 1 := 1&92
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 1&92
band: (band[51] (if (= #120 50) 1 (if #564 3 #706)) (shl[51] (bv2int %0) (+ 51 #709))) 1 := 1&92
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 1&92
band: (band[51] (if (= #120 50) 1 (if #564 3 #706)) (shl[51] (bv2int %0) (+ 51 #709))) 1 := 1&92
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 1 := 1&92
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   91.7431     10000        49          0            1        2)
(smt.stats    2    313   6100   6426  2317/2089/124     300/23    10   22   52.36)
(smt.stats    3    414   9351   8753  2344/2112/124     403/23    10   22   52.47)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&70368744177661
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&11
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&11
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&11
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&16
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&32
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&32
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&64
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&64
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&24
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&64
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 70368744177662&128
(smt.stats    4    540  10142  11123  2441/2210/188     455/44    13   55   52.66)
(sat.ddfw       1      1    48.314     20001        98          1            1        3)
(smt.stats    5    662  10898  12573  2585/2210/189     611/45    13   55   52.98)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    763  11711  13966  2819/2403/189     796/47    14   56   53.18)
(sat.ddfw       1      1   48.3092     40001       196          2            1        5)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 1&70368744192898
band: (band[51] (if (= #120 50) 1 (if #564 3 #706)) (shl[51] (bv2int %0) (+ 51 #709))) 1 := 1&70368744192898
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 1&70368744192898
band: (band[51] (if (= #120 50) 1 (if #564 3 #706)) (shl[51] (bv2int %0) (+ 51 #709))) 1 := 1&70368744192898
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 1 := 1&70368744192898
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 1 := 1&70368744192898
(smt.stats    7    874  12859  16442  3025/2602/190     966/52    14   56   53.27)
(smt.stats    8    996  14030  21300  3034/2791/193    1451/68    15   57   53.37)
(smt.stats    9   1130  19482  31040  3052/2814/195    1608/235    16   61   53.37)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 2251799813685202&70368744186375
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 2251799813685202&70368744186375
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 2251799813685202&70368744186373
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 2251799813685202&70368744186373
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 2251799813685202&70368744186373
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 2251799813685202&70368744186373
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 2251799813685202&70368744186373
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 512 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 512 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 512 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 25088 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 25088 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 512 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 512 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 7680 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 512 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&70368744186368
(sat.ddfw       1      1   39.5778     70001       343          3            1        8)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 512 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&70368744186368
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 70368744178176 := 2251799813685202&70368744186368
(smt.stats   10   1231  22236  38423  3126/2859/218    1815/306    18   65   53.59)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 70368744178176 := 2251799813685202&70368744186368
(smt.stats   11   1342  22632  39229  3197/2937/248    1954/308    18   65   53.78)
ramon: poll                 wall=1.000s usage=0.965s mem=56080KiB load=0.97 rootload=0.95
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&70368744177536
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&70368744177408
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&70368744177408
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&70368744177152
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&25088
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&25088
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8704 := 2251799813685202&41472
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1464  24308  46744  3609/3369/285    2354/492    20   82   53.87)
(smt.stats   13   1598  28398  63741  3651/3411/286    2533/492    20   82   53.98)
(sat.ddfw       1      1   34.5125    110001       539          4            1       12)
(smt.stats   14   1745  33851  87636  3662/3423/289    2681/643    21  109   54.09)
(smt.stats   15   1846  37429 102545  3707/3458/290    2830/653    22  115   54.09)
(smt.stats   16   1957  39840 115355  3752/3476/292    2975/699    24  117   54.09)
(smt.stats   17   2079  41578 127470  3898/3505/292    3192/702    24  117   54.25)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 6 := 281474976710650&281474976749569
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 4 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 16 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 32 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 64 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 256 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 256 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 252 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 248 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 240 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 32 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 64 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 124 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 8 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 16 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 32 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 64 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 28 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 24 := 281474976710650&281474976748545
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 16 := 281474976710650&281474976748545
(sat.ddfw       1      1   29.9754    160000       784          5            1       17)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976745473
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976764033
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976764289
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976764033
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976764289
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976764289
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976764033
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 128 := 281474976710650&281474976764033
(smt.stats   18   2213  43748 138020  4180/3927/360    3483/778    26  130   54.60)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488392320 := 281474976710650&281474976765057
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488392320 := 281474976710650&281474976765057
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488425088 := 281474976710650&281474976765057
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488425088 := 281474976710650&281474976765057
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488425088 := 281474976710650&281474976765057
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488457856 := 281474976710650&281474976765057
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488457856 := 281474976710650&281474976765057
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488458880 := 281474976710650&281474976765057
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488458880 := 281474976710650&281474976765057
ramon: poll                 wall=2.000s usage=1.965s mem=57224KiB load=1.00 rootload=1.00
(smt.stats   19   2360  46244 148148  4398/3976/376    3896/822    27  138   54.89)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488998529 := 281474976710650&140737489010817
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737489010688 := 281474976710650&140737489010688
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 50 #885 #887) 64)) 29414135066918912 := 2533274790395850 << 47
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737489010688 := 281474976710650&140737489010688
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 50 #885 #887) 64)) 29414135066918912 := 2392537302696000 << 47
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737489010688 := 281474976710650&140737489010688
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 50 #885 #887) 64)) 29414135066918912 := 4503599627369466 << 47
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737489010688 := 281474976710650&140737489010688
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 50 #885 #887) 64)) 29414135066918912 := 4503599627369874 << 47
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737489010688 := 281474976710650&140737489010688
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 50 #885 #887) 64)) 29414135066918912 := 4503599627369874 << 47
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 281474976710650&0
shl: (shl[51] (bv2int %0) (+ 51 (* 2251799813685247 #116))) 958 := 1266637398212688 << 48
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 281474976710650&0
shl: (shl[51] (bv2int %0) (+ 51 (* 2251799813685247 #116))) 958 := 1266637398212688 << 48
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 281474976710650&0
shl: (shl[51] (bv2int %0) (+ 51 (* 2251799813685247 #116))) 956 := 1266637398212688 << 48
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 0 := 281474976710650&0
shl: (shl[51] (bv2int %0) (+ 51 (* 2251799813685247 #116))) 4 := 2251799811457104 << 48
(smt.stats   20   2521  48959 158894  4668/4210/376    4678/830    27  138   55.18)
(smt.stats   21   2622  50451 164351  4785/4484/391    4850/995    28  141   55.38)
(sat.ddfw       1      1   26.2357    220001      1078          6            1       23)
(smt.stats   22   2733  53309 178746  4817/4518/391    5028/1000    28  141   55.69)
(smt.stats   23   2855  56679 192143  5001/4679/391    5227/1102    29  141   55.69)
(smt.stats   24   2989  59654 208165  5027/4705/395    5798/1157    30  145   55.88)
(smt.stats   25   3136  66645 257045  5047/4721/396    6024/1316    31  150   56.11)
ramon: poll                 wall=3.000s usage=2.965s mem=58504KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   23.5057    290001      1421          7            1       30)
(smt.stats   26   3297  73567 295754  5062/4736/398    6384/1348    33  161   56.11)
(smt.stats   27   3474  81179 346933  5093/4765/400    6716/1436    35  177   56.21)
(smt.stats   28   3575  87752 362310  5095/4767/400    6860/1436    35  177   56.30)
(sat.ddfw       1      1   22.4656    370001      1813          8            1       38)
(smt.stats   29   3686  93595 378636  5097/4769/400    7155/1456    36  180   56.56)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   30   3808 100377 405481  5114/4786/401    7586/1617    37  182   56.56)
ramon: poll                 wall=4.000s usage=4.086s mem=58976KiB load=1.12 rootload=1.12
(smt.stats   31   3942 105156 430716  5125/4789/401    7925/1618    37  182   56.66)
(smt.stats   32   4089 111351 469465  5138/4806/401    8329/1618    37  182   56.75)
(sat.ddfw       1      1   20.0714    460001      2254          9            1       47)
(smt.stats   33   4250 117178 503235  5261/4879/403    8771/1807    38  182   56.85)
ramon: poll                 wall=5.005s usage=5.094s mem=59252KiB load=1.00 rootload=1.00
(smt.stats   34   4427 124584 545468  5365/5037/407    9418/1909    40  192   57.14)
(sat.ddfw       1      1   18.1917    560001      2745         10            1       57)
(smt.stats   35   4621 131567 583001  5402/5050/407   10560/1912    40  192   57.24)
(smt.stats   36   4722 135953 603931  5453/5092/407   10956/2131    41  193   57.34)
ramon: poll                 wall=6.000s usage=6.099s mem=59680KiB load=1.01 rootload=1.01
(smt.stats   37   4833 139294 619641  5561/5129/407   11351/2133    41  193   57.70)
(sat.ddfw       1      1   16.6566    670001      3284         11            1       68)
(smt.stats   38   4955 142594 636218  5630/5302/410   12118/2168    42  205   57.89)
(smt.delete-inactive-clauses  :num-deleted-clauses 411)
ramon: poll                 wall=7.000s usage=7.065s mem=60316KiB load=0.97 rootload=0.97
(smt.stats   39   5089 146609 651437  5740/5313/410   11998/2172    42  205   57.99)
(smt.stats   40   5236 151895 676433  5917/5428/410   12444/2373    43  218   58.08)
(sat.ddfw       1      1   15.3866    790001      3872         12            1       80)
ramon: poll                 wall=8.000s usage=8.066s mem=60372KiB load=1.00 rootload=1.00
(smt.stats   41   5397 159043 710576  6092/5712/412   13627/2427    45  233   58.18)
(smt.stats   42   5574 170440 775033  6117/5788/413   14192/2427    45  233   58.49)
(smt.stats   43   5768 176078 816021  6145/5817/414   15039/2577    46  244   58.49)
ramon: poll                 wall=9.000s usage=9.066s mem=60716KiB load=1.00 rootload=1.00
(smt.stats   44   5981 181946 848228  6169/5841/416   15752/2711    47  255   58.59)
(sat.ddfw       1      1   14.2983    920001      4509         13            1       93)
(smt.stats   45   6082 185160 859243  6171/5841/416   16042/2712    47  255   58.68)
(smt.stats   46   6193 190774 880593  6244/5859/416   16504/2718    47  255   58.68)
(smt.stats   47   6315 196649 907923  6303/5943/416   16802/2977    48  268   58.68)
ramon: poll                 wall=10.005s usage=10.069s mem=61096KiB load=1.00 rootload=0.99
(smt.stats   48   6449 201609 937952  6431/6004/416   17375/2984    48  268   58.78)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&65536
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&63488
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&63488
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&63488
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&63488
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&63488
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&63488
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&61440
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 50 #885 #887) 64)) 18403959877249593344 := 4503599627370076 << 48
(smt.stats   49   6596 205484 954440  6531/6120/416   17776/2991    48  268   58.87)
(sat.ddfw       1      1   13.3308   1060001      5196         14            1      108)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&61440
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 50 #885 #887) 64)) 18444492273895927808 := 4503599627370382 << 48
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 61440 := 562949953421300&61440
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 50 #885 #887) 64)) 18430981475013816320 := 4503599627370382 << 48
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   50   6757 208202 965910  6599/6217/436   18045/3072    49  272   59.36)
(smt.stats   51   6934 214088 988298  6625/6292/438   18340/3086    50  293   59.46)
ramon: poll                 wall=11.000s usage=11.143s mem=61520KiB load=1.08 rootload=1.08
(smt.stats   52   7128 221060 1029432  6679/6340/443   19203/3088    50  293   59.55)
(sat.ddfw       1      1    12.654   1210001      5931         15            1      123)
ramon: poll                 wall=12.000s usage=12.151s mem=61828KiB load=1.01 rootload=1.01
(smt.stats   53   7341 228139 1060581  6793/6383/444   19839/3228    51  327   59.75)
(smt.stats   54   7575 233920 1089254  6955/6552/445   20649/3269    52  329   59.84)
ramon: poll                 wall=13.000s usage=13.145s mem=62024KiB load=0.99 rootload=1.00
(smt.stats   55   7676 238001 1106259  7025/6629/445   21117/3275    52  329   59.94)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   56   7787 240595 1118334  7085/6748/446   21617/3357    53  332   60.03)
(sat.ddfw       1      1   11.8668   1370001      6715         16            1      139)
(smt.stats   57   7909 242658 1130232  7153/6771/446   22097/3358    53  332   60.03)
(smt.stats   58   8043 247788 1158211  7176/6837/449   22770/3358    53  332   60.13)
ramon: poll                 wall=14.000s usage=14.147s mem=62388KiB load=1.00 rootload=0.99
(smt.stats   59   8190 253309 1189620  7208/6847/449   23731/3532    54  341   60.23)
ramon: poll                 wall=15.000s usage=15.145s mem=62736KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   11.1702   1540001      7549         17            1      156)
(smt.stats   60   8351 258025 1198816  7357/6878/449   24065/3538    54  341   60.43)
ramon: poll                 wall=16.000s usage=16.148s mem=63064KiB load=1.00 rootload=1.00
(smt.stats   61   8528 263054 1226483  7583/7199/450   24682/3788    55  347   60.52)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 140737488355584 := 281474976710650&1688849860263936
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 281474976679936 := 281474976710650&1688849860263936
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 281474976679936 := 281474976710650&1688849860263936
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 281474976679936 := 281474976710650&1688849860263936
(smt.stats   62   8722 269307 1248057  7792/7287/451   25246/3791    55  347   60.62)
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 281474976702464 := 281474976710650&1688849860263936
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 281474976694272 := 281474976710650&1688849860263936
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 281474976677888 := 281474976710650&1688849860263936
band: (band[51] (if (or #721 #722 #723 #724 #725 #726 #727 #728 #729 #730 #731 #732 #733) 0 (if #734 1 #834)) (shl[64] (* 2 #114) (mod #888 64))) 281474976677888 := 281474976710650&1688849860263936
ramon: poll                 wall=17.000s usage=17.147s mem=63308KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   10.5547   1720001      8431         18            1      174)
(smt.stats   63   8935 274300 1269736  8067/7472/451   25738/3796    55  347   60.89)
ramon: poll                 wall=18.000s usage=18.148s mem=63692KiB load=1.00 rootload=1.01
(smt.stats   64   9169 289073 1311424  8141/7775/461   26852/3975    56  353   60.99)
ramon: poll                 wall=19.000s usage=19.146s mem=63764KiB load=1.00 rootload=0.99
(sat.ddfw       1      1     10.01   1910001      9362         19            1      193)
(smt.stats   65   9426 302654 1390246  8411/8072/463   27765/4361    57  382   61.31)
(smt.stats   66   9527 305806 1407102  8427/8088/463   28067/4361    57  382   61.41)
(smt.stats   67   9638 309962 1446614  8436/8093/463   28328/4361    57  382   61.41)
ramon: poll                 wall=20.000s usage=20.169s mem=64300KiB load=1.02 rootload=1.03
(smt.stats   68   9760 316657 1484876  8472/8103/464   28776/4530    58  418   62.23)
ramon: end                  Fri Nov  1 22:30:09 2024
ramon: root.execname        z3
ramon: root.utime           20.230s
ramon: root.stime           0.020s
ramon: group.total          20.265s
ramon: group.utime          20.237s
ramon: group.stime          0.028s
ramon: group.mempeak        64600KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.091s
ramon: loadavg              1.01
