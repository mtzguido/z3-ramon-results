ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:48:07 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         40856 MiB
ramon: sys.mem.avail        61709 MiB
ramon: sys.nprocs           1258
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/jZsTFDunIjOb.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3058308
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   6011    854  1243/1109/89     101/1     2   13   19.07)
(smt.stats    1    202   7937   3740  1969/1764/93     194/12     4   16   19.16)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 0 := 160 << 29
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 0 := 160 << 29
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 0 := 34359738430 << 29
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 0 := 171798691840 << 29
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 0 := 68719476700 << 29
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 0 := 34359738540 << 29
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #115))) 36028797018963967 := 85899345920 << 30
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #115))) 36028797018963967 := 85899345920 << 30
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #115))) 36028797018963966 := 85899345920 << 30
(smt.stats    2    313   9857   5344  2137/1915/102     301/14     7   22   19.68)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1073741823&0
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #115))) 85899345921 := 85899345920 << 30
(smt.stats    3    414  10587   6831  2276/2058/111     400/15     9   27   19.68)
(smt.stats    4    525  11476   7877  2541/2113/111     514/35     9   27   19.78)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 3 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 3 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 3 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 3 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 7 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 3 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 7 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 15 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 63 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 15 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 48 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 49 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 59 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 63 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 63 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 64 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 65 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 99 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 99 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 103 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 195 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 101 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 199 := 36028797018963967&36028797018963967
(smt.stats    5    647  14856  11494  2678/2405/201     661/54    11   35   20.08)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 79 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 95 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 95 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 95 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 127 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 383 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 511 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 511 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 511 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 767 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 767 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 511 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 767 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1023 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 4095 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 511 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 767 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1023 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 767 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1023 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 2047 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 8191 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 28671 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 32767 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 24575 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 32767 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 107519 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 108543 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 110591 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 114687 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 180223 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 175103 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 176127 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 180223 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 189439 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 190463 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 262143 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 229375 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 196607 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 327679 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 393215 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 262143 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 393215 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 524287 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 655359 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 786431 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 655359 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 786431 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1048575 := 36028797018963967&36028797018963967
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  15800  14658  2963/2671/412     822/68    13   85   20.86)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 786431 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1048575 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 648191 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 648191 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 651263 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 653311 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 655359 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 649215 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 655359 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1048575 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1048575 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1572863 := 36028797018963967&36028797018963967
(smt.stats    7    859  18669  18408  3174/2885/439    1014/95    14   91   21.05)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1310719 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1310719 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 5763071 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 5767167 := 36028797018963967&36028797018963967
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 5763071 := 36028797018963967&36028797018963967
(smt.stats    8    984  21061  22144  3343/3053/441    1650/292    15   91   21.55)
(smt.stats    9   1118  26889  35804  3366/3064/441    2068/294    15   91   21.84)
(smt.stats   10   1219  31403  45611  3482/3145/443    2433/408    17   93   22.07)
ramon: poll                 wall=1.000s usage=0.937s mem=23460KiB load=0.94 rootload=0.92
(smt.stats   11   1330  34792  58533  3710/3393/444    2762/532    19   94   22.16)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1452  37600  67336  3835/3543/453    3003/584    20  100   22.39)
(smt.stats   13   1586  43737  82978  3857/3566/467    3296/809    21  143   22.48)
(smt.stats   14   1733  51814  96848  3959/3603/468    3864/857    23  147   22.57)
(smt.stats   15   1834  56306 105433  4087/3675/468    4103/867    23  147   22.67)
(smt.stats   16   1945  58311 111482  4250/3962/475    4478/949    24  167   22.77)
(smt.stats   17   2067  61480 119587  4300/3974/484    4688/1030    25  197   23.08)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   18   2201  67530 130277  4457/4128/484    4962/1047    26  200   23.08)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 511&2097152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 36028797021061120 := 36028798092706192 << 8
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 511&2097152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 36028797021061120 := 36028798092706192 << 8
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 511&2097152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 36028797021061120 := 36028798092706192 << 8
ramon: poll                 wall=2.000s usage=1.937s mem=24516KiB load=1.00 rootload=1.00
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 511&2097152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 36028797021061120 := 36028798092706082 << 8
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 511&2097152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 36028797021061120 := 36028798092705972 << 8
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 511&2097152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 36028797021061120 := 36028798092705972 << 8
(smt.stats   19   2348  76512 148949  4552/4221/493    5229/1165    27  203   23.22)
(smt.stats   20   2509  79761 162327  4603/4250/493    5814/1165    27  203   23.41)
(smt.stats   21   2610  83781 166361  4607/4276/493    5918/1349    28  206   23.51)
(smt.stats   22   2721  91243 200372  4607/4276/493    6034/1349    28  206   23.51)
(smt.stats   23   2843  97450 224591  4632/4298/494    6279/1364    29  209   23.51)
(smt.stats   24   2977 103825 238192  4669/4306/494    6497/1376    29  209   23.51)
(smt.stats   25   3124 112412 260131  4687/4349/495    6660/1426    30  211   23.51)
(smt.stats   26   3285 122944 304070  4699/4369/499    6966/1467    31  289   23.63)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1&10240
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #115))) 5497558138880 := 18014398509487104 << 1
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1&10240
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #115))) 5497558138880 := 18014398509487104 << 1
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1&10240
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #115))) 5497558138880 := 18014398509487104 << 1
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1&10240
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #115))) 5497558138880 := 18014398509487104 << 1
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1&10240
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #115))) 5497558138880 := 18014398509487104 << 1
(smt.stats   27   3462 127492 320139  4817/4386/499    7583/1475    31  289   23.73)
(smt.stats   28   3563 130641 330339  4961/4591/506    7858/1686    32  290   23.92)
(smt.stats   29   3674 135803 342966  4972/4609/507    8042/1733    33  314   23.92)
ramon: poll                 wall=3.000s usage=2.937s mem=25536KiB load=1.00 rootload=1.00
(smt.stats   30   3796 139121 359004  4994/4631/512    8551/1733    33  314   24.24)
(smt.stats   31   3930 144574 380315  5048/4636/513    8769/1781    34  367   24.24)
(smt.stats   32   4077 150687 399492  5091/4708/513    9120/1817    35  373   24.34)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 15&26112
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 15&26112
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 26112 := 102 << 3
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 15&26112
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 26112 := 102 << 3
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 15&26112
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 26112 := 102 << 3
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 15&26113
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 26113 := 102 << 3
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 1 := 15&26113
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 26113 := 102 << 3
(smt.stats   33   4238 155681 412987  5170/4745/513    9422/1818    35  373   24.53)
(smt.stats   34   4415 160735 425627  5383/4820/518    9756/1890    36  374   24.63)
ramon: poll                 wall=4.000s usage=3.936s mem=26616KiB load=1.00 rootload=1.00
(smt.stats   35   4609 165725 439711  5526/5034/518   10156/1893    36  374   24.81)
(smt.stats   36   4710 166832 444387  5798/5188/518   10350/1967    37  374   25.17)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 0 := 1&1271375462400
band: (band[55] (if (= #119 54) 1 (if #570 3 #724)) (shl[55] (bv2int %0) (+ 55 #727))) 1 := 1&1271375462400
(smt.stats   37   4821 168223 453815  6037/5451/518   10586/1972    37  374   25.26)
ramon: poll                 wall=5.000s usage=4.936s mem=26940KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   38   4943 171532 462580  6154/5785/531   11195/1973    37  374   25.26)
(smt.delete-inactive-clauses  :num-deleted-clauses 35)
(smt.stats   39   5077 180581 486208  6170/5801/532   12191/2465    38  386   25.47)
(smt.stats   40   5224 191603 526753  6257/5808/533   12743/2519    39  391   25.56)
(smt.stats   41   5385 199013 558739  6550/6114/534   13439/2560    40  407   25.75)
ramon: poll                 wall=6.000s usage=5.935s mem=27320KiB load=1.00 rootload=1.00
(smt.stats   42   5562 206196 593273  6602/6233/537   14678/2560    40  407   25.85)
(smt.stats   43   5756 222020 631712  6622/6253/537   15088/2804    41  425   25.98)
(smt.stats   44   5969 230451 670701  6770/6268/538   16398/3181    42  439   26.17)
(smt.stats   45   6070 232910 685076  6842/6443/539   17050/3186    42  439   26.17)
ramon: poll                 wall=7.000s usage=6.935s mem=27980KiB load=1.00 rootload=1.00
(smt.stats   46   6181 235931 696919  7008/6628/541   17335/3590    43  477   26.36)
(smt.stats   47   6303 239593 716920  7112/6641/541   17634/3590    43  477   26.45)
(smt.stats   48   6437 243542 736192  7201/6832/542   18010/3698    44  483   26.55)
(smt.stats   49   6584 252927 763804  7214/6845/545   19920/3698    44  483   26.74)
(smt.stats   50   6745 258299 817899  7238/6856/545   21030/4113    45  533   26.84)
(smt.stats   51   6922 263266 843596  7304/6922/545   21417/4113    45  533   26.94)
(smt.stats   52   7116 269502 888191  7342/6941/545   22319/4114    45  533   27.03)
ramon: poll                 wall=8.000s usage=7.934s mem=28516KiB load=1.00 rootload=1.00
(smt.stats   53   7329 280336 952864  7373/6991/547   22960/4767    46  547   27.31)
(smt.stats   54   7563 289644 989267  7457/6998/547   23892/4772    46  547   27.41)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   55   7664 297297 1032948  7463/7080/547   24020/4772    46  547   27.53)
(smt.stats   56   7775 304317 1075478  7464/7081/547   24137/4772    46  547   27.53)
ramon: poll                 wall=9.000s usage=8.934s mem=29092KiB load=1.00 rootload=1.00
(smt.stats   57   7897 309705 1092070  7472/7086/547   24357/4772    46  547   27.53)
(smt.stats   58   8031 316311 1105020  7486/7103/548   24749/4932    47  563   27.53)
(smt.stats   59   8178 326453 1136662  7516/7103/548   25113/4937    47  563   27.67)
(smt.stats   60   8339 338504 1160339  7532/7148/549   25503/4996    48  582   27.76)
(smt.stats   61   8516 346769 1196702  7558/7156/549   26545/4998    48  582   28.01)
ramon: poll                 wall=10.002s usage=9.936s mem=29712KiB load=1.00 rootload=1.01
(smt.stats   62   8710 358590 1248932  7581/7193/549   27375/4998    48  582   28.22)
(smt.stats   63   8923 366083 1281399  7691/7206/549   28052/5002    48  582   28.52)
(smt.stats   64   9159 378426 1377989  7808/7425/549   29087/5002    48  582   28.61)
ramon: poll                 wall=11.000s usage=10.933s mem=30052KiB load=1.00 rootload=0.99
(smt.stats   65   9416 409017 1517560  7815/7432/553   29695/5592    49  640   28.61)
(smt.stats   66   9517 412605 1532573  7826/7443/555   30118/5790    50  648   28.61)
(smt.stats   67   9628 417651 1560284  7856/7463/555   30538/5792    50  648   29.01)
(smt.stats   68   9750 422212 1575661  7921/7474/555   30804/5793    50  648   29.20)
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 34359738367 := 34359738367&34359738367
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 34359738367 := 36029003177394190 << 34
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 34359738367 := 34359738367&34359738367
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 34359738367 := 36029003177394190 << 34
band: (band[55] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747) 0 (if #748 1 #856)) (shl[64] (* 2 #113) (mod #894 64))) 34359738367 := 34359738367&34359738367
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #891 #893) 64)) 34359738367 := 36029003177394190 << 34
(smt.stats   69   9884 425006 1596257  8052/7558/556   31002/5797    50  648   29.20)
ramon: poll                 wall=12.000s usage=11.931s mem=30736KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10031 430775 1628095  8093/7709/564   31980/6126    51  651   29.29)
(smt.stats   71  10192 444051 1688035  8160/7713/564   32308/6131    51  651   29.29)
(smt.stats   72  10369 458485 1749888  8302/7789/564   32861/6328    52  700   29.41)
ramon: poll                 wall=13.000s usage=12.931s mem=31084KiB load=1.00 rootload=1.00
(smt.stats   73  10563 467334 1802297  8393/7927/564   33545/6334    52  700   29.51)
(smt.stats   74  10776 475327 1838212  8633/8025/564   34277/6337    52  700   29.81)
ramon: poll                 wall=14.002s usage=13.932s mem=31544KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   75  11010 480849 1889276  8870/8317/564   35484/6341    52  700   29.91)
(smt.stats   76  11267 492240 1909560  8871/8487/564   35743/6341    52  700   30.05)
(smt.stats   77  11549 506997 2002718  8965/8493/564   36595/6341    52  700   30.14)
ramon: poll                 wall=15.000s usage=14.929s mem=31804KiB load=1.00 rootload=0.99
(smt.stats   78  11650 513999 2033196  9055/8587/564   37023/6344    52  700   30.26)
(smt.stats   79  11762 521886 2067185  9204/8678/564   37593/6345    52  700   30.45)
ramon: poll                 wall=16.000s usage=15.929s mem=32084KiB load=1.00 rootload=1.00
(smt.stats   80  11884 528613 2096960  9356/8826/564   38271/6349    52  700   30.45)
(smt.stats   81  12018 534841 2117114  9433/9022/565   38805/6900    53  702   30.45)
ramon: poll                 wall=17.000s usage=16.929s mem=32260KiB load=1.00 rootload=1.00
(smt.stats   82  12165 545985 2180752  9556/9100/566   39406/6901    53  702   30.55)
(smt.stats   83  12326 556142 2235654  9731/9185/566   40159/7019    54  702   30.65)
ramon: poll                 wall=18.000s usage=17.928s mem=32492KiB load=1.00 rootload=1.00
(smt.stats   84  12503 563748 2279247  9855/9385/566   41298/7021    54  702   30.96)
(smt.stats   85  12697 572697 2321674 10049/9494/566   42176/7023    54  702   31.15)
(smt.stats   86  12910 585198 2361751 10125/9701/566   42889/7025    54  702   31.24)
ramon: poll                 wall=19.000s usage=18.928s mem=32876KiB load=1.00 rootload=1.00
(smt.stats   87  13144 598210 2422328 10168/9745/566   44388/7030    54  702   31.44)
ramon: poll                 wall=20.000s usage=19.927s mem=33424KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 15:48:27 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.010s
ramon: group.total          19.996s
ramon: group.utime          19.976s
ramon: group.stime          0.020s
ramon: group.mempeak        33680KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.069s
ramon: loadavg              1.00
