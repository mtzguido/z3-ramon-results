ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 19:42:07 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29881 MiB
ramon: sys.mem.avail        62092 MiB
ramon: sys.nprocs           1396
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/8IQeU7Sa1u1t.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             275184
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   206/206     0/0  64       0    18.53   0.00)
(sat.stats    101   1038    0   206/206   101/45  64       0    18.72   0.01)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 781 :time 0.00)
(sat.stats    101   1038    0   206/206   101/45  64       0    18.72   0.01)
(sat.stats    101   1038    0   206/206   101/45  64       0    18.72   0.01)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 0 :time 0.00)
 (sat-probing :cost 418218.82 :time 0.00)
(sat.stats    101   1038    0   206/206   101/45  64       0    18.82   0.01)
(sat.stats    279   3270    1   208/208   279/157  64       0    18.94   0.02)
(sat.stats :conflicts    :restarts     :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    283   3380    2   208/208   283/157  64       0    18.94   0.02)
(sat.stats    286   3464    3   208/208   286/157  64       0    18.94   0.02)
(sat.stats    292   3635    4   208/208   292/157  64       0    18.94   0.02)
(sat.stats    296   3712    5   208/208   296/159  64       0    18.94   0.02)
(sat.stats    299   3740    6   208/208   299/162  64       0    18.94   0.02)
(sat.stats    302   3757    7   208/208   302/164  64       0    18.94   0.02)
(sat.stats    305   3846    8   208/208   305/164  64       0    18.94   0.02)
(sat.stats    308   3891    9   208/208   308/167  64       0    19.04   0.02)
(sat.stats    344   4156   10   208/208   344/197  64       0    19.04   0.02)
(sat.stats    347   4198   11   208/208   347/199  64       0    19.04   0.02)
(sat.stats    350   4227   12   208/208   350/199  64       0    19.04   0.02)
(sat.stats    353   4314   13   208/208   353/199  64       0    19.04   0.02)
(sat.stats    356   4391   14   208/208   356/199  64       0    19.04   0.02)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 3590 :time 0.00)
(sat.stats    475   5846   28   222/222   473/245  72       0    19.52   0.15)
lshr: (lshr[37] (bv2int %0) (+ 37 (* 137438953471 #55))) 0 := 2287893 >>l 2
 (sat-cleaner :elim-literals 6 :elim-clauses 1 :cost 4345 :time 0.00)
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 304 := 304&103079215104
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 304&103079215104
lshr: (lshr[64] (mod (div #77 2) 68719476736) (mod (+ 36 #658 #660) 64)) 137438991533 := 609 >>l 1
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 4793 :time 0.00)
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 162 := 267&103079215104
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 165 := 267&103079215104
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 76 := 267&103079215104
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 192 := 267&103079215104
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 40 := 267&103079215104
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 32 := 267&103079215104
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 128 := 267&103079215104
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 256 := 267&103079215104
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 267&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 224 := 103079215104&267
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 267&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 159 := 103079215104&267
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 267&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 24 := 103079215104&267
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 267&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 2 := 103079215104&267
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 267&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 4 := 103079215104&267
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 267&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 16 := 103079215104&267
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 267&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 128 := 103079215104&267
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 267&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 64 := 103079215104&267
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 267&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 256 := 103079215104&267
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 748&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 512 := 103079215104&748
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 1044&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 1024 := 103079215104&1044
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 4633&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 4096 := 103079215104&4633
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 4633&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 2048 := 103079215104&4633
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 17435&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 16384 := 103079215104&17435
band: (band[37] (lshr[37] (bv2int %0) (+ 37 #442)) (if (= #63 36) 7545253719796615217152 (if #446 3772626859898307608576 #516))) 0 := 17435&103079215104
band: (band[37] (if (= #527 63) 1012706811454650316536368070656 (if #529 506353405727325158268184035328 #653)) (lshr[64] (mod #424 68719476736) (mod #661 64))) 8192 := 103079215104&17435
(sat.stats :conflicts   :restarts       :learned/bin         :gc          :time)
(sat.stats      :decisions   :clauses/bin          :units        :memory       )
(sat.stats   1200  31587   37 14844/14841  1805/906  99       0    25.30   0.65)
(sat.stats   1203  31593   38 14938/14935  1809/907  99       0    25.30   0.65)
ramon: poll                 wall=1.003s usage=0.943s mem=32084KiB load=0.94 rootload=0.93
(sat.stats   1599  34380  170 33183/33180  3380/2082  99       0    31.66   0.97)
ramon: poll                 wall=2.000s usage=1.939s mem=49344KiB load=1.00 rootload=0.99
ramon: poll                 wall=3.000s usage=2.939s mem=54244KiB load=1.00 rootload=1.00
ramon: poll                 wall=4.000s usage=3.939s mem=58596KiB load=1.00 rootload=1.00
ramon: poll                 wall=5.000s usage=4.939s mem=62180KiB load=1.00 rootload=1.00
ramon: poll                 wall=6.000s usage=5.939s mem=81620KiB load=1.00 rootload=1.00
ramon: poll                 wall=7.000s usage=6.938s mem=84948KiB load=1.00 rootload=0.99
ramon: poll                 wall=8.000s usage=7.938s mem=88276KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.938s mem=90068KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.938s mem=92628KiB load=1.00 rootload=1.00
ramon: poll                 wall=11.000s usage=10.938s mem=94420KiB load=1.00 rootload=1.00
ramon: poll                 wall=12.000s usage=11.938s mem=95956KiB load=1.00 rootload=0.99
ramon: poll                 wall=13.000s usage=12.938s mem=97492KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.938s mem=99028KiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.938s mem=98MiB load=1.00 rootload=0.99
ramon: poll                 wall=16.000s usage=15.938s mem=99MiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.938s mem=101MiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.938s mem=104MiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.938s mem=105MiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.938s mem=107MiB load=1.00 rootload=0.99
ramon: end                  Fri Nov  1 19:42:27 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.050s
ramon: group.total          20.005s
ramon: group.utime          19.953s
ramon: group.stime          0.052s
ramon: group.mempeak        107MiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.067s
ramon: loadavg              1.00
