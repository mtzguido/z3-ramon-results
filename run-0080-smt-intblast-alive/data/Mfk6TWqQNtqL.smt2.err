ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:13:22 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         25970 MiB
ramon: sys.mem.avail        61755 MiB
ramon: sys.nprocs           1401
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/Mfk6TWqQNtqL.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             370
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   2209    295  1292/1160/100      93/15     6   22   19.28)
(smt.stats    1    202   4637    886  1728/1551/102     224/26     7   24   19.37)
(smt.stats    2    313   7307   4813  2138/1811/103     336/61     9   27   19.47)
(smt.stats    3    414   8973   7967  2190/1992/105     437/68    10   30   19.56)
(smt.stats    4    525  10134   9766  2456/2172/110     560/123    12   33   19.76)
(smt.stats    5    647  11737  13398  2775/2524/113     658/132    15   46   19.85)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  14494  14977  2814/2568/114     765/140    16   46   19.85)
(smt.stats    7    859  17994  18980  2816/2569/122     875/142    18   50   19.85)
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3811&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3811&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3807&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3811&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3807&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3&3812
shl: (shl[64] (bv2int %0) (mod (+ #101 #397) 64)) 144115188075855875 := 7810496 << 14
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3811&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3800&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3776&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3712&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 3707&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 219&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 256&3812
shl: (shl[64] (bv2int %0) (mod (+ #101 #397) 64)) 256 := 7810496 << 14
(smt.stats    8    981  19880  21611  2862/2615/158     999/156    20   64   19.95)
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
shl: (shl[57] (bv2int %0) (mod (bv2int %0) 57)) 4023 := 7810496 << 14
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
shl: (shl[57] (bv2int %0) (mod (bv2int %0) 57)) 7810262 := 7810496 << 14
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 1 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 1 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 2 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 3812 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 3808 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 3 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 3 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 4 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 8 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 16 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 64 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 128 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 256 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 512 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 1024 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 3144 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 3144 := 127967166464&3812
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 127967166464&3812
band: (band[57] (shl[57] (bv2int %0) (mod #101 57)) (if (or #625 #626) 0 (if #627 1 #783))) 3144 := 127967166464&3812
(smt.stats    9   1115  20755  23745  3145/2879/236    1355/161    20   64   20.53)
(smt.stats   10   1216  22412  25460  3212/2909/236    1472/223    21   82   20.63)
(smt.stats   11   1327  24019  32007  3426/3026/236    1732/227    21   82   20.82)
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 3904468 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 3904467 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 3904466 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 3904464 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 3904456 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 32 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 64 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 128 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 256 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 512 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 1024 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 2048 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 4096 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 8192 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 16384 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 32768 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 640 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 640 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 640 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 640 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 640 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 768 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 1024 := 127967330304&3904468
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 2048 := 127967330304&3904468
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1450  26010  40296  3751/3491/320    2330/497    23  102   21.21)
(smt.stats   13   1584  29890  51455  3859/3598/327    2577/571    25  157   21.31)
ramon: poll                 wall=1.001s usage=0.999s mem=22728KiB load=1.00 rootload=0.99
(smt.stats   14   1731  34442  66752  3958/3640/328    2915/586    26  159   21.31)
(smt.stats   15   1832  36544  72259  4065/3802/329    3043/743    27  160   21.40)
(smt.stats   16   1943  39929  86590  4096/3835/330    3277/814    29  166   21.40)
(smt.stats   17   2065  44079 102291  4117/3849/335    3414/856    31  183   21.54)
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 243&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #397) 64)) 864691128455135475 := 115 << 1
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 251&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #397) 64)) 864691128455135483 := 115 << 1
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 251&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #397) 64)) 864691128455135483 := 115 << 1
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 230&0
shl: (shl[57] (bv2int %0) (mod (bv2int %0) 57)) 115 := 115 << 1
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 230&0
shl: (shl[57] (bv2int %0) (mod (bv2int %0) 57)) 115 := 115 << 1
(smt.stats   18   2199  46968 108269  4230/3907/337    3623/887    32  190   21.64)
(smt.stats   19   2346  51609 123759  4313/4017/347    3883/887    32  190   21.84)
(smt.stats   20   2507  54729 133850  4368/4069/353    4077/944    34  210   21.93)
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 793&3
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 1 := 793&3
shl: (shl[64] (bv2int %0) (mod (+ #101 #397) 64)) 1008806316530991897 := 4 << 4
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 794&3
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 794&3
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 794&3
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 794&3
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 0 := 794&3
(smt.stats   21   2608  55925 135978  4505/4118/354    4243/944    34  210   22.37)
(smt.stats   22   2719  57293 139077  4693/4251/375    4472/949    35  218   22.76)
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 2 := 14402&3
shl: (shl[64] (bv2int %0) (mod (+ #101 #397) 64)) 1008806316531005506 := 4 << 4
band: (band[57] (shl[64] (bv2int %0) (mod #398 64)) (if (or #804 #805 #806) 0 (if #807 1 #932))) 2 := 14402&3
shl: (shl[64] (bv2int %0) (mod (+ #101 #397) 64)) 1008806316531005506 := 4 << 4
(smt.stats   23   2841  60141 147011  4841/4487/376    4907/982    36  228   22.85)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   24   2977  62990 157569  4927/4610/380    5552/1018    37  232   23.04)
ramon: poll                 wall=2.000s usage=1.996s mem=24536KiB load=1.00 rootload=1.00
(smt.stats   25   3124  68589 168347  5065/4727/384    6148/1108    38  241   23.24)
ramon: poll                 wall=3.000s usage=2.995s mem=24808KiB load=1.00 rootload=1.00
(smt.stats   26   3285  75673 180229  5250/4755/384    6693/1113    38  241   23.33)
(smt.stats   27   3462  82019 200164  5335/5019/385    7492/1227    39  244   23.52)
(smt.stats   28   3563  85074 207888  5411/5024/385    7691/1228    39  244   23.52)
ramon: poll                 wall=4.000s usage=3.994s mem=25076KiB load=1.00 rootload=1.00
(smt.stats   29   3674  87168 214637  5516/5190/386    7855/1254    40  245   23.62)
(smt.stats   30   3796  91250 229748  5667/5238/387    8189/1256    40  245   23.81)
ramon: poll                 wall=5.000s usage=4.993s mem=25332KiB load=1.00 rootload=1.00
(smt.stats   31   3932  92957 237417  5991/5661/392    8501/1267    41  245   23.91)
(smt.stats   32   4079  98415 251552  6063/5677/393    9019/1268    41  245   24.00)
ramon: poll                 wall=6.000s usage=5.993s mem=25728KiB load=1.00 rootload=1.00
(smt.stats   33   4240 106483 276423  6237/5753/393    9329/1310    42  260   24.10)
(smt.stats   34   4417 115997 326249  6252/5924/394    9823/1416    43  260   24.29)
(smt.stats   35   4611 128018 389688  6259/5931/394   10358/1416    43  260   24.29)
(smt.stats   36   4712 131093 405902  6261/5933/394   11158/1416    43  260   24.39)
ramon: poll                 wall=7.000s usage=6.992s mem=26016KiB load=1.00 rootload=1.00
(smt.stats   37   4823 136461 425316  6289/5937/394   11592/1418    43  260   24.48)
(smt.stats   38   4945 141050 443910  6393/5973/394   12530/1422    43  260   24.68)
(smt.delete-inactive-clauses  :num-deleted-clauses 467)
(smt.stats   39   5079 144900 459002  6466/6087/394   13045/1426    43  260   24.68)
ramon: poll                 wall=8.000s usage=7.991s mem=26448KiB load=1.00 rootload=1.00
(smt.stats   40   5226 150902 472690  6702/6169/395   13596/1816    44  268   24.77)
(smt.stats   41   5387 156320 483733  6828/6377/396   14063/1821    44  268   24.97)
(smt.stats   42   5564 161276 502549  6990/6548/396   14823/1932    45  271   24.97)
ramon: poll                 wall=9.000s usage=8.990s mem=26608KiB load=1.00 rootload=0.99
(smt.stats   43   5758 167409 521780  7145/6672/396   15552/1936    45  271   25.16)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   44   5971 173857 550309  7217/6837/396   16256/1941    45  271   25.35)
ramon: poll                 wall=10.000s usage=9.989s mem=27120KiB load=1.00 rootload=1.00
(smt.stats   45   6072 176740 566744  7285/6915/398   16907/2233    46  279   25.35)
(smt.stats   46   6183 181472 594836  7411/6973/398   17411/2235    46  279   25.44)
ramon: poll                 wall=11.000s usage=10.988s mem=27388KiB load=1.00 rootload=1.00
(smt.stats   47   6305 185127 617961  7587/7086/398   17730/2238    46  279   25.63)
ramon: poll                 wall=12.000s usage=11.988s mem=27388KiB load=1.00 rootload=1.00
(smt.stats   48   6439 189169 638254  7740/7291/401   18460/2301    47  286   25.73)
(smt.stats   49   6586 194689 659335  7838/7418/402   18933/2305    47  286   25.92)
ramon: poll                 wall=13.000s usage=12.987s mem=27628KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.986s mem=27648KiB load=1.00 rootload=1.00
(smt.stats   50   6747 199096 683803  8265/7586/402   19663/2363    48  291   26.02)
(smt.stats   51   6924 204491 720963  8537/7942/402   20705/2369    48  291   26.34)
ramon: poll                 wall=15.000s usage=14.986s mem=27904KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.980s mem=28160KiB load=0.99 rootload=0.99
(smt.stats   52   7118 210809 737947  8676/8226/403   21904/2649    49  293   26.53)
(smt.stats   53   7331 219288 778894  8782/8381/403   22703/2653    49  293   26.63)
ramon: poll                 wall=17.000s usage=16.980s mem=28416KiB load=1.00 rootload=1.00
(smt.stats   54   7565 228084 816540  8889/8478/404   24058/2788    50  296   26.82)
(smt.stats   55   7666 231193 825475  8987/8565/404   24284/2795    50  296   26.82)
ramon: poll                 wall=18.000s usage=17.979s mem=28672KiB load=1.00 rootload=1.00
(smt.stats   56   7777 234585 840686  9286/8787/404   24713/2799    50  296   26.92)
(smt.stats   57   7899 238994 862081  9464/8993/404   25160/2807    50  296   27.01)
ramon: poll                 wall=19.000s usage=18.979s mem=28840KiB load=1.00 rootload=1.00
(smt.stats   58   8033 241738 877182  9537/9168/404   26604/2809    50  296   27.21)
(smt.stats   59   8180 246269 904186  9758/9229/404   27168/2810    50  296   27.21)
ramon: poll                 wall=20.000s usage=19.979s mem=29096KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 18:13:42 2024
ramon: root.execname        z3
ramon: root.utime           19.980s
ramon: root.stime           0.000s
ramon: group.total          19.989s
ramon: group.utime          19.985s
ramon: group.stime          0.004s
ramon: group.mempeak        29352KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.008s
ramon: loadavg              1.00
