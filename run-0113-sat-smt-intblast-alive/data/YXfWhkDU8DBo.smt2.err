ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Wed Dec 25 16:09:32 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         40365 MiB
ramon: sys.mem.avail        61379 MiB
ramon: sys.nprocs           1328
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/YXfWhkDU8DBo.smt2
ramon: argv                 2 = sat.smt=true
ramon: argv                 3 = smt.bv.solver=2
ramon: argv                 4 = -T:20
ramon: argv                 5 = -v:2
ramon: argv                 6 = -st
ramon: argv                 7 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 8 = model_validate=true
ramon: childpid             3888095
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   225/224     0/0  67       0    18.60   0.01)
(sat.stats    112    526    0   225/224   112/30  67       0    18.92   0.03)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 323 :time 0.00)
(sat.stats    112    526    0   225/224   112/30  67       0    18.92   0.03)
(sat.stats    112    526    0   225/224   112/30  67       0    18.92   0.03)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 0 :time 0.00)
 (sat-probing :cost 453218.92 :time 0.00)
(sat.stats    112    526    0   225/224   112/30  67       0    18.92   0.03)
(sat.stats    136    628    1   225/224   136/51  67       0    18.92   0.04)
(sat.stats :conflicts    :restarts     :learned/bin       :gc          :time)
(sat.stats        :decisions   :clauses/bin     :units        :memory       )
(sat.stats    195    981    2   225/224   195/99  67       0    18.92   0.04)
(sat.stats    198    987    3   225/224   198/100  67       0    18.92   0.04)
(sat.stats    201    994    4   225/224   201/101  67       0    18.92   0.04)
(sat.stats    204   1007    5   225/224   204/101  67       0    18.92   0.04)
(sat.stats    211   1010    6   225/224   211/101  67       0    18.92   0.04)
(sat.stats    220   1025    7   225/224   220/105  67       0    18.92   0.04)
(sat.stats :conflicts    :restarts     :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    223   1054    8   225/224   223/108  67       0    18.92   0.05)
(sat.stats    226   1089    9   225/224   226/110  67       0    18.92   0.05)
(sat.stats    229   1126   10   225/224   229/112  67       0    19.01   0.05)
(sat.stats    232   1152   11   225/224   232/112  67       0    19.01   0.05)
(sat.stats    235   1188   12   225/224   235/112  67       0    19.01   0.05)
(sat.stats    238   1208   13   225/224   238/114  67       0    19.01   0.05)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 1586 :time 0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 2148 :time 0.00)
shl: (shl[46] (bv2int %0) (mod (bv2int %0) 46)) 0 := 37 << 37
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 29453 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
shl: (shl[64] (bv2int %0) (mod (+ #61 #314) 64)) 37 := 37 << 37
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 28525 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 30720 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 68719474108 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 105071968 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 18 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 8 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 272 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 640 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 320 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 1536 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 1024 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 94691328 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 4096 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 184238080 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 302022656 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 2104557568 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 3543531520 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 4391174144 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 15053357056 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 524288 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 3145728 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 2097152 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 6677331968 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 8388608 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 16777216 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 14025752576 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 11811160064 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 402653184 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 805306368 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 536870912 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 38654705664 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 2147483648 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 51539607552 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 8589934592 := 5085241278464&68719476735
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 34359738368 := 5085241278464&68719476735
(sat.stats :conflicts   :restarts       :learned/bin        :gc          :time)
(sat.stats       :decisions   :clauses/bin        :units        :memory       )
(sat.stats    553   7250   15  1046/1043   549/208  77       0    21.16   0.22)
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 68719442476 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 111210 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 256624 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 8 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 90688 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 32 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 3265408 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 6141184 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 954880 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 903168 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 1024 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 4632576 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 3022848 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 1327104 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 1540096 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 2883584 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 65536 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 131072 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 2097152 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 524288 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 1048576 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 4194304 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 21256732672 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 8388608 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 40030437376 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 56774098944 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 67108864 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 19327352832 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 805306368 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 536870912 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 1073741824 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 51539607552 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 12884901888 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 8589934592 := 68719476735&5085241278464
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 34359738368 := 68719476735&5085241278464
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 3678 :time 0.00)
band: (band[46] (if (= #564 45) 0 (if #566 1 #692)) (shl[46] (bv2int %0) (mod #61 46))) 0 := 68719476735&5085241278464
band: (band[46] (shl[64] (bv2int %0) (mod #315 64)) (if (or #713 #714) 0 (if #715 1 #853))) 256 := 5085241278464&68719476735
(sat.stats    760  13513   16  1555/1552   754/272 514       0    23.22   0.42)
(sat.stats    765  13571   17  1555/1552   759/273 514       0    23.22   0.42)
 (sat-cleaner :elim-literals 48 :elim-clauses 1 :cost 4207 :time 0.00)
ramon: poll                 wall=1.000s usage=0.876s mem=30460KiB load=0.88 rootload=0.86
 (sat-cleaner :elim-literals 58 :elim-clauses 3 :cost 5542 :time 0.00)
(sat.stats   1170  21897   31 38884/38881  2210/1344 526       0    31.60   1.31)
(sat.stats   1602  38164   91 48178/48175  2733/1676 526       0    33.30   1.63)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 9029 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 9029 :time 0.00)
ramon: poll                 wall=2.000s usage=1.876s mem=35020KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 9061 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 9066 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 9066 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 9092 :time 0.00)
ramon: poll                 wall=3.000s usage=2.875s mem=35108KiB load=1.00 rootload=0.99
 (sat-cleaner :elim-literals 1 :elim-clauses 1 :cost 9334 :time 0.00)
ramon: poll                 wall=4.000s usage=3.875s mem=35268KiB load=1.00 rootload=1.00
ramon: poll                 wall=5.000s usage=4.875s mem=35616KiB load=1.00 rootload=1.00
ramon: poll                 wall=6.000s usage=5.874s mem=37648KiB load=1.00 rootload=1.00
ramon: poll                 wall=7.000s usage=6.874s mem=39696KiB load=1.00 rootload=1.00
ramon: poll                 wall=8.000s usage=7.874s mem=46236KiB load=1.00 rootload=1.00
(sat.stats   2403  74198  238 157880/157877  4902/3197 537       0    46.46   8.59)
ramon: poll                 wall=9.000s usage=8.873s mem=49740KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.873s mem=60872KiB load=1.00 rootload=0.99
ramon: poll                 wall=11.002s usage=10.877s mem=64716KiB load=1.00 rootload=1.01
ramon: poll                 wall=12.000s usage=11.873s mem=67532KiB load=1.00 rootload=0.99
ramon: poll                 wall=13.000s usage=12.873s mem=69580KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.873s mem=71884KiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.873s mem=74812KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.873s mem=79932KiB load=1.00 rootload=0.98
ramon: poll                 wall=17.000s usage=16.872s mem=83512KiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.872s mem=102MiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.872s mem=106MiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.872s mem=108MiB load=1.00 rootload=1.00
ramon: end                  Wed Dec 25 16:09:52 2024
ramon: root.execname        z3
ramon: root.utime           19.900s
ramon: root.stime           0.050s
ramon: group.total          19.956s
ramon: group.utime          19.904s
ramon: group.stime          0.052s
ramon: group.mempeak        114MiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.082s
ramon: loadavg              0.99
