ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:36:18 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29454 MiB
ramon: sys.mem.avail        62088 MiB
ramon: sys.nprocs           1386
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/406wOGUJp4lg.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             618712
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(smt.stats    0    101   4024   1087  1235/1111/90      98/6     3   15   51.95)
(smt.stats    1    202   5989   4944  2029/1694/90     195/23     3   15   52.14)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 61 := 64&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 60 := 64&60
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&61
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 61 := 62 << 7
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&61
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 61 := 62 << 7
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&1
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 1 := 62 << 7
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 64&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&60
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 60 := 62 << 7
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 59 := 64&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 58 := 64&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&60
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 60 := 62 << 7
(smt.stats    2    313   9394   7502  2228/2011/109     302/27     4   17   52.33)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1    75.188     10000        49          0            1        2)
(smt.stats    3    414  11479  10067  2334/2101/110     398/27     5   22   52.43)
(smt.stats    4    525  12276  11066  2431/2188/121     486/29     7   35   52.53)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 36028797018963968 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 2&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 18410715276690587648 := 2 << 2
(smt.stats    5    647  13781  12976  2470/2212/127     610/36     8   37   52.73)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&768
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 768 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&769
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 769 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&769
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 769 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 36028797018963967 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 32 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 385 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 2 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 4 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 32 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 32 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 32 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 31 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 31 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 30 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 28 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 1 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 31 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 30 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 4 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 384&32
(sat.ddfw       1      1    38.318     20001        98          1            1        3)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 32 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 32 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 4 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 4 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 4 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 2 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 1 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 1 := 384&32
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  15132  15481  2607/2331/231     721/49    10   46   53.15)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 128 := 2097152&1408
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 256 := 2097152&1408
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 512 := 2097152&1408
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1024 := 2097152&1408
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 128 := 2097152&1408
(smt.stats    7    859  16089  17790  2657/2392/263     856/71    12   69   53.36)
(smt.stats    8    981  18233  20676  2770/2500/278    1043/153    14  158   53.75)
(sat.ddfw       1      1   39.4477     40001       196          2            1        5)
(smt.stats    9   1115  21297  25366  2792/2518/279    1192/153    14  158   53.85)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 5 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 5 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 4 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 4 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 2 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 2 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&61
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 61 := 60 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&59
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 59 := 60 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&59
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 59 := 60 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&4
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 4 := 5 << 5
(smt.stats   10   1216  23090  29280  2826/2540/287    1303/182    16  166   53.96)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 4 := 5 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 4 := 5 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&160
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&160
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&160
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 3 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 3 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 2 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 2 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 2 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 160&16
(smt.stats   11   1327  25050  33833  2926/2633/309    1496/199    17  174   54.15)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&1073741856
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 36028798092705824 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&1610612768
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&1073741856
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 36028798092705824 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&1073741856
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 36028798092705824 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&32212254720
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 536870912 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&32212254720
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 536870912 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&32212254720
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 536870912 := 32212254720&536870912
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  27009  37982  3003/2706/345    1708/221    18  183   54.25)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&265
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&266
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 266 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&1359
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&1354
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 1354 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&2
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 1073741832 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&2
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 1073741832 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 1&2
(smt.stats   13   1585  28952  41788  3128/2745/348    1949/226    18  183   54.76)
(sat.ddfw       1      1   37.4532     70001       343          3            1        8)
(smt.stats   14   1732  29617  45114  3225/2891/358    2110/237    19  194   54.86)
ramon: poll                 wall=1.002s usage=0.871s mem=57072KiB load=0.87 rootload=0.85
(smt.stats   15   1833  31543  49583  3229/2895/359    2281/244    21  196   55.05)
(sat.ddfw       1      1   35.3357    110001       539          4            1       12)
(smt.stats   16   1944  35430  55200  3270/2936/360    2519/288    22  196   55.14)
(sat.ddfw       1      1    31.585    160000       784          5            1       17)
(smt.stats   17   2066  39154  60528  3311/2937/360    2796/291    22  196   55.24)
ramon: poll                 wall=2.000s usage=1.918s mem=57828KiB load=1.05 rootload=1.05
(sat.ddfw       1      1   27.6248    220001      1078          6            1       23)
(smt.stats   18   2200  42313  65902  3368/3030/362    3134/336    23  200   55.43)
(sat.ddfw       1      1   24.4243    290001      1421          7            1       30)
ramon: poll                 wall=3.000s usage=2.911s mem=58228KiB load=0.99 rootload=0.99
(smt.stats   19   2347  47215  76137  3560/3040/362    3443/344    23  200   55.62)
(sat.ddfw       1      1    21.846    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=3.905s mem=58252KiB load=0.99 rootload=1.00
(smt.stats   20   2508  51188  84942  3650/3316/377    3889/405    24  208   55.72)
(smt.stats   21   2609  55841  94520  3652/3318/377    4119/405    24  208   55.72)
(smt.stats   22   2720  63471 112307  3666/3334/377    4240/511    25  236   55.88)
(sat.ddfw       1      1   19.7933    460001      2254          9            1       47)
(smt.stats   23   2842  70557 130344  3685/3350/381    4429/537    26  241   55.98)
ramon: poll                 wall=5.000s usage=4.901s mem=58540KiB load=1.00 rootload=0.99
(smt.stats   24   2976  75067 143104  3746/3356/381    4732/540    26  241   56.17)
(sat.ddfw       1      1   18.0799    560001      2745         10            1       57)
(smt.stats   25   3123  84021 158567  3757/3417/382    4927/584    27  242   56.17)
(smt.stats   26   3284  91640 176135  3765/3427/382    5230/584    27  242   56.28)
ramon: poll                 wall=6.000s usage=5.990s mem=58740KiB load=1.09 rootload=1.09
(smt.stats   27   3461  99010 192369  3797/3462/383    5531/643    28  245   56.43)
(sat.ddfw       1      1   16.3181    670001      3284         11            1       68)
ramon: poll                 wall=7.002s usage=6.921s mem=58912KiB load=0.93 rootload=0.93
(smt.stats   28   3562 101257 196341  3840/3471/383    5766/654    28  245   56.62)
(smt.stats   29   3673 104789 201894  3937/3579/385    6077/658    28  245   56.72)
ramon: poll                 wall=8.000s usage=7.877s mem=59272KiB load=0.96 rootload=0.96
(sat.ddfw       1      1   14.9906    790001      3872         12            1       80)
(smt.stats   30   3795 107927 207761  4064/3619/385    6266/660    28  245   56.80)
(smt.stats   31   3929 111325 216268  4181/3777/385    6796/742    29  248   56.80)
ramon: poll                 wall=9.000s usage=8.841s mem=59596KiB load=0.96 rootload=0.96
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4076 114949 224489  4186/3845/390    7117/742    29  248   56.90)
(smt.stats   33   4237 121226 241554  4196/3855/390    7439/852    30  277   56.90)
(sat.ddfw       1      1   13.8048    920001      4509         13            1       93)
ramon: poll                 wall=10.000s usage=9.801s mem=59656KiB load=0.96 rootload=0.96
(smt.stats   34   4414 127826 261292  4327/3866/391    7979/890    31  277   57.00)
(smt.stats   35   4608 136424 285172  4352/4003/391    8563/891    31  277   57.09)
(smt.stats   36   4709 139140 294926  4354/4013/391    8799/891    31  277   57.43)
(smt.stats   37   4820 142788 304084  4356/4015/391    8948/891    31  277   57.43)
(sat.ddfw       1      1    12.969   1060001      5196         14            1      108)
ramon: poll                 wall=11.000s usage=10.801s mem=59800KiB load=1.00 rootload=1.00
(smt.stats   38   4942 147141 317499  4372/4030/391    9393/891    31  277   57.43)
(smt.delete-inactive-clauses  :num-deleted-clauses 17)
(smt.stats   39   5076 150653 328739  4375/4034/391    9747/891    31  277   57.52)
(smt.stats   40   5223 158244 345674  4387/4043/391   10033/892    31  277   57.52)
(smt.stats   41   5384 164321 362654  4427/4060/391   10366/894    31  277   57.62)
ramon: poll                 wall=12.000s usage=11.900s mem=59880KiB load=1.10 rootload=1.10
(sat.ddfw       1      1    12.222   1210001      5931         15            1      123)
ramon: poll                 wall=13.000s usage=12.899s mem=60104KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   42   5561 168797 376769  4560/4170/392   10883/1167    32  277   57.81)
(sat.ddfw       1      1   11.5523   1370001      6715         16            1      139)
ramon: poll                 wall=14.000s usage=13.899s mem=60772KiB load=1.00 rootload=1.00
(smt.stats   43   5755 175216 393747  4772/4231/392   11267/1177    32  277   58.15)
ramon: poll                 wall=15.000s usage=14.896s mem=61016KiB load=1.00 rootload=0.99
(smt.stats   44   5968 181863 410802  4971/4438/392   11868/1180    32  277   58.25)
(sat.ddfw       1      1    10.948   1540001      7549         17            1      156)
(smt.stats   45   6069 184823 418747  5013/4671/392   12154/1180    32  277   58.25)
(smt.stats   46   6180 190114 440093  5033/4691/392   12529/1180    32  277   58.25)
ramon: poll                 wall=16.000s usage=15.894s mem=60924KiB load=1.00 rootload=1.00
(smt.stats   47   6302 195867 462459  5045/4703/393   12836/1395    33  284   58.34)
(smt.stats   48   6436 201274 482643  5196/4709/393   13368/1396    33  284   58.44)
ramon: poll                 wall=17.000s usage=16.891s mem=60992KiB load=1.00 rootload=1.00
(smt.stats   49   6583 205941 495650  5219/4866/393   13881/1396    33  284   58.44)
(sat.ddfw       1      1   10.4161   1720001      8431         18            1      174)
ramon: poll                 wall=18.000s usage=17.873s mem=61272KiB load=0.98 rootload=0.98
(smt.stats   50   6744 210608 509552  5379/4883/393   14268/1400    33  284   59.02)
ramon: poll                 wall=19.000s usage=18.861s mem=61344KiB load=0.99 rootload=0.99
(sat.ddfw       1      1   9.91856   1910001      9362         19            1      193)
(smt.stats   51   6921 214985 528749  5706/5062/393   14803/1400    33  284   59.12)
ramon: poll                 wall=20.000s usage=19.862s mem=61612KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 21:36:38 2024
ramon: root.execname        z3
ramon: root.utime           19.920s
ramon: root.stime           0.010s
ramon: group.total          19.943s
ramon: group.utime          19.927s
ramon: group.stime          0.016s
ramon: group.mempeak        61632KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.084s
ramon: loadavg              0.99
