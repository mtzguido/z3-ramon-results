ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 17:22:42 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         31173 MiB
ramon: sys.mem.avail        61767 MiB
ramon: sys.nprocs           1289
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/0l4BUAh1qfMc.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             4018935
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   5549    651  1256/1111/115      87/11    10   23   19.27)
(smt.stats    1    202   7492   2419  2033/1846/121     181/15    12   25   19.46)
(smt.stats    2    313   8361   3259  2355/2068/121     305/18    12   25   19.56)
(smt.stats    3    414   9892   4834  2398/2162/121     414/22    12   25   19.56)
(smt.stats    4    525  10422   6196  2528/2229/126     525/33    14   31   19.56)
(smt.stats    5    647  12788   8047  2582/2329/126     663/47    15   33   19.68)
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 0&271
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4887531495603830784 := 1125899906842623 << 9
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 0&271
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4887531495603830784 := 2 << 9
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 0&271
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4887531495603830784 := 2 << 9
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 0&271
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4887531495603830784 := 2 << 9
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 0&271
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4887531495603830784 := 2 << 9
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842623&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842622&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842620&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842616&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842623&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842622&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842620&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842616&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842608&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842608&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842112&271
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4887531495603830272 := 1125899906842623 << 9
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842112&271
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4887531495603830272 := 1125899906842623 << 9
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 512&271
shl: (shl[50] (bv2int %0) (mod (bv2int %1) 50)) 0 := 2199023255553 << 9
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 512&271
shl: (shl[50] (bv2int %0) (mod (bv2int %1) 50)) 0 := 6597069766657 << 9
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 270 := 1125899906842112&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 1125899906842112&271
shl: (shl[50] (bv2int %0) (mod (bv2int %1) 50)) 0 := 1125899906842623 << 9
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  15322  11765  2662/2413/149     760/70    16   34   19.87)
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 512&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 1 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 4 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 8 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 16 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 8 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 16 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 32 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 64 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 128 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 256 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 144 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 160 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 192 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 192 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 160 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 160 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 160 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 160 := 512&271
(smt.stats    7    859  15875  12576  2893/2646/212     876/73    17   43   21.13)
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 160 := 24576&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 192 := 1024&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 192 := 1024&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 256 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 256 := 512&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 256 := 512&271
(smt.stats    8    981  18083  17124  3242/3001/237     993/102    22   76   20.94)
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 2251799813685248 := 6597069766660 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 2251799813685248 := 6597069766660 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 2251799813685248 := 1125899906842623 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 2251799813685248 := 1125899906842623 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 4398046511112&1
shl: (shl[50] (bv2int %0) (mod (bv2int %1) 50)) 4398046511113 := 2199023255556 << 1
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 4398046511198&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 4398046511168&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4398046511168 := 2199023255584 << 5
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 4398046511168&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4398046511168 := 2199023255584 << 5
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 4398046511112&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4398046511112 := 2199023255556 << 5
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 4398046511112&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4398046511112 := 2199023255556 << 5
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 4398046511112&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4398046511112 := 2199023255556 << 5
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 4398046511112&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4398046511112 := 2199023255556 << 5
(smt.stats    9   1115  20400  21485  3311/3058/262    1114/121    25   95   20.94)
(smt.stats   10   1216  23046  25410  3376/3098/262    1238/121    25   95   21.04)
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 4398046511113&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4398046511113 := 2199023255556 << 5
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 70368744177792&16
shl: (shl[50] (bv2int %0) (mod (bv2int %1) 50)) 2048 := 2199023255556 << 5
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 70368744178176&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 70368744178176 := 2199023255569 << 5
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 70368744177920&16
shl: (shl[50] (bv2int %0) (mod (bv2int %1) 50)) 4096 := 2199023255560 << 5
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 2 := 64&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 2 := 64&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 4 := 256&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 4 := 256&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 16 := 256&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 16 := 448&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 8 := 211106232533248&16
(smt.stats   11   1327  24593  27244  3451/3206/294    1351/154    26  109   21.13)
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 1 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 2 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 4 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 16 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 16 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 15 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 14 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 4 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 8 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 4 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 4 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 16 := 211106232532992&16
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 211106232532992&16
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 16 := 211106232532992&16
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  27349  33145  3597/3305/336    1692/167    27  117   21.46)
ramon: poll                 wall=1.000s usage=0.925s mem=22660KiB load=0.92 rootload=0.92
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 8 := 211106232533124&33
(smt.stats   13   1583  31043  40174  3680/3402/355    2227/419    30  150   21.56)
(smt.stats   14   1730  34643  48629  3917/3619/356    2605/437    31  151   21.66)
(smt.stats   15   1831  37355  59574  4027/3759/358    2984/460    32  155   21.87)
(smt.stats   16   1942  40387  70220  4078/3810/360    3543/569    34  164   21.97)
(smt.stats   17   2064  42659  73871  4158/3856/360    3720/570    34  164   22.06)
(smt.stats   18   2198  44473  80906  4418/4013/361    4007/626    35  164   22.47)
ramon: poll                 wall=2.000s usage=1.923s mem=24056KiB load=1.00 rootload=0.99
(smt.stats   19   2345  49114  97829  4523/4145/362    4473/661    36  166   22.57)
(smt.stats   20   2506  54739 121881  4552/4266/366    5101/702    37  168   22.57)
(smt.stats   21   2607  56728 126320  4726/4280/366    5338/732    38  186   22.69)
(smt.stats   22   2718  59661 133664  4874/4464/366    5634/735    38  186   22.99)
(smt.stats   23   2840  63540 142938  5022/4640/366    6086/739    38  186   23.08)
(smt.stats   24   2974  66812 154571  5226/4940/368    7162/901    39  194   23.18)
(smt.stats   25   3121  71262 164541  5324/4948/368    7552/906    39  194   23.31)
ramon: poll                 wall=3.000s usage=2.923s mem=24648KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   26   3282  77089 183842  5402/5107/371    8237/1067    40  196   23.41)
(smt.stats   27   3459  82766 199317  5561/5266/375    8627/1161    41  200   23.50)
(smt.stats   28   3560  85801 208900  5584/5280/375    8858/1233    42  217   23.50)
(smt.stats   29   3671  89626 224890  5697/5313/375    9132/1235    42  217   23.62)
(smt.stats   30   3793  93900 253487  5811/5413/375    9454/1236    42  217   23.62)
ramon: poll                 wall=4.000s usage=3.922s mem=24980KiB load=1.00 rootload=1.00
(smt.stats   31   3927  98691 281694  5888/5593/376    9777/1388    43  223   23.73)
(smt.stats   32   4074 104890 300771  5932/5601/376   10299/1391    43  223   23.73)
(smt.stats   33   4235 111768 326241  5947/5652/376   10578/1391    43  223   23.73)
(smt.stats   34   4412 116402 357013  5983/5658/376   11061/1393    43  223   23.88)
(smt.stats   35   4606 121454 379920  6127/5710/376   12221/1400    43  223   23.97)
(smt.stats   36   4707 124410 405717  6257/5845/377   12569/1808    44  227   24.11)
ramon: poll                 wall=5.000s usage=4.922s mem=25420KiB load=1.00 rootload=1.00
(smt.stats   37   4818 127754 428776  6331/5968/377   12771/1808    44  227   24.11)
(smt.stats   38   4940 131213 450233  6396/6101/387   13161/1847    45  234   24.21)
(smt.delete-inactive-clauses  :num-deleted-clauses 329)
(smt.stats   39   5074 133839 464198  6432/6106/387   13062/1847    45  234   24.21)
(smt.stats   40   5221 139519 510244  6508/6189/389   13313/1950    46  267   24.21)
(smt.stats   41   5382 144760 547166  6697/6231/389   13637/1961    46  267   24.31)
ramon: poll                 wall=6.000s usage=5.922s mem=25868KiB load=1.00 rootload=1.00
(smt.stats   42   5559 149968 571509  6811/6416/389   14497/1969    46  267   24.41)
(smt.stats   43   5753 155502 601297  7026/6560/389   15059/1973    46  267   24.50)
(smt.stats   44   5966 159465 634380  7114/6822/390   15739/2254    47  267   24.69)
(smt.stats   45   6067 162343 642490  7166/6848/390   16018/2254    47  267   24.79)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   46   6178 165187 656228  7281/6936/391   16446/2255    47  267   24.89)
(smt.stats   47   6300 168387 668926  7340/7017/391   16665/2374    48  267   24.89)
ramon: poll                 wall=7.000s usage=6.922s mem=26328KiB load=1.00 rootload=1.00
(smt.stats   48   6434 172190 689435  7386/7061/391   17128/2377    48  267   24.89)
(smt.stats   49   6581 175582 704336  7438/7102/391   17640/2378    48  267   24.98)
(smt.stats   50   6742 180100 728231  7652/7154/391   18062/2381    48  267   25.08)
(smt.stats   51   6919 183946 753857  7764/7379/391   18380/2383    48  267   25.19)
ramon: poll                 wall=8.000s usage=7.921s mem=26684KiB load=1.00 rootload=1.00
(smt.stats   52   7113 188474 786245  7864/7520/391   18926/2384    48  267   25.31)
(smt.stats   53   7326 194167 830676  7930/7587/391   20177/2388    48  267   25.41)
ramon: poll                 wall=9.000s usage=8.921s mem=26972KiB load=1.00 rootload=1.00
(smt.stats   54   7560 201824 893898  8101/7752/392   21595/2820    49  268   25.60)
(smt.stats   55   7661 204968 911932  8268/7849/392   21810/2820    49  268   25.60)
(smt.stats   56   7772 208131 932301  8322/7980/392   22281/2820    49  268   25.69)
(smt.stats   57   7894 210752 952794  8545/8046/392   22511/2824    49  268   25.69)
(smt.stats   58   8028 213199 967963  8692/8348/392   23015/2824    49  268   25.82)
ramon: poll                 wall=10.000s usage=9.921s mem=27264KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   59   8175 218391 1016740  8789/8412/392   23542/2824    49  268   25.82)
(smt.stats   60   8336 223686 1066999  8896/8489/392   24415/2827    49  268   25.92)
(smt.stats   61   8513 228606 1118499  9014/8614/392   25708/2827    49  268   26.27)
(smt.stats   62   8707 236200 1156998  9074/8725/392   26647/2829    49  268   26.37)
ramon: poll                 wall=11.005s usage=10.925s mem=28032KiB load=1.00 rootload=1.00
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 1 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 1 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 2 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 32 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 72 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 64 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 128 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 64 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 128 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 264 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 256 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 256 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 264 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&271
band: (band[50] (shl[50] (bv2int %0) (mod #109 50)) (if (= #615 49) 1 (if #617 2 #756))) 256 := 2048&271
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&67
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4503599627372544 := 8796093022212 << 7
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&67
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4503599627372544 := 8796093022212 << 7
band: (band[50] (shl[64] (bv2int %0) (mod #373 64)) (if (= #775 63) 0 (if #777 1 #913))) 0 := 2048&67
shl: (shl[64] (bv2int %0) (mod (+ #109 #372) 64)) 4503599627372544 := 8796093022212 << 7
(smt.stats   63   8920 242279 1198921  9183/8871/446   27296/3420    50  269   26.60)
(smt.stats   64   9155 249962 1237315  9231/8897/449   27720/3420    50  269   26.80)
(smt.stats   65   9412 257786 1272467  9443/8919/449   28028/3586    51  303   26.80)
(smt.stats   66   9513 260748 1280913  9482/9141/449   28218/3587    51  303   26.94)
(smt.stats   67   9624 263085 1306897  9522/9219/449   28390/3587    51  303   26.94)
ramon: poll                 wall=12.000s usage=11.917s mem=28544KiB load=1.00 rootload=0.99
(smt.stats   68   9746 266099 1320503  9557/9219/449   28609/3588    51  303   26.94)
(smt.stats   69   9880 271130 1382808  9649/9281/449   28767/3589    51  303   26.94)
(smt.delete-inactive-clauses  :num-deleted-clauses 31)
(smt.stats   70  10027 274378 1402123  9673/9362/450   29467/3688    52  309   27.03)
(smt.stats   71  10188 280126 1428943  9886/9430/450   30035/3690    52  309   27.13)
ramon: poll                 wall=13.000s usage=12.917s mem=28800KiB load=1.00 rootload=1.00
(smt.stats   72  10365 284703 1464149 10010/9589/450   30729/3695    52  309   27.35)
(smt.stats   73  10559 290489 1498469 10112/9696/450   31968/3697    52  309   27.44)
(smt.stats   74  10772 298907 1566098 10347/9832/450   33217/3702    52  309   27.71)
ramon: poll                 wall=14.000s usage=13.917s mem=29312KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats   75  11006 304974 1607429 10533/10091/450   33937/3710    52  309   27.81)
(smt.stats   76  11263 313424 1698504 10589/10225/450   35433/3710    52  309   28.20)
ramon: poll                 wall=15.000s usage=14.916s mem=30140KiB load=1.00 rootload=1.00
(smt.stats   77  11545 320452 1737399 10900/10316/450   36449/3715    52  309   28.39)
(smt.stats   78  11646 323838 1750491 10931/10595/450   36711/3715    52  309   28.39)
(smt.stats   79  11757 329090 1786673 10941/10616/450   37129/3715    52  309   28.51)
(smt.stats   80  11879 332477 1826014 10970/10623/450   37780/3715    52  309   28.60)
(smt.stats   81  12013 334979 1843364 11029/10664/450   38559/3715    52  309   28.70)
ramon: poll                 wall=16.000s usage=15.916s mem=30396KiB load=1.00 rootload=1.00
(smt.stats   82  12160 339773 1873508 11083/10712/450   38965/3715    52  309   28.79)
(smt.stats   83  12321 344200 1912760 11161/10785/450   40014/3715    52  309   28.89)
(smt.stats   84  12498 350283 1955318 11292/10844/450   40629/3717    52  309   28.99)
ramon: poll                 wall=17.000s usage=16.916s mem=30652KiB load=1.00 rootload=1.00
(smt.stats   85  12692 358111 2029913 11592/10982/450   41288/3727    52  309   29.27)
(smt.stats   86  12905 365071 2097915 11751/11301/450   41790/3733    52  309   29.36)
ramon: poll                 wall=18.000s usage=17.916s mem=30908KiB load=1.00 rootload=1.00
(smt.stats   87  13139 373294 2182251 11794/11447/450   43186/3733    52  309   29.46)
(smt.stats   88  13396 383400 2304629 12000/11589/452   44159/5316    53  309   29.65)
ramon: poll                 wall=19.000s usage=18.916s mem=31420KiB load=1.00 rootload=1.00
(smt.stats   89  13678 393731 2392886 12094/11689/452   45775/5318    53  309   29.75)
(smt.stats   90  13988 405886 2459976 12261/11802/452   47012/5447    54  330   29.94)
(smt.stats   91  14089 409470 2479111 12344/11946/452   47199/5448    54  330   29.94)
ramon: poll                 wall=20.000s usage=19.916s mem=31676KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 17:23:02 2024
ramon: root.execname        z3
ramon: root.utime           19.990s
ramon: root.stime           0.010s
ramon: group.total          20.002s
ramon: group.utime          19.990s
ramon: group.stime          0.012s
ramon: group.mempeak        31932KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.083s
ramon: loadavg              1.00
