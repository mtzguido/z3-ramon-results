ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 17:46:57 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28415 MiB
ramon: sys.mem.avail        61764 MiB
ramon: sys.nprocs           1274
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/AXQTEkDnPGvm.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             4103494
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    102   3436    374  1173/1065/98     124/14     6   17   19.07)
(smt.stats    1    203   5253    808  1622/1428/98     244/19     6   17   19.17)
(smt.stats    2    314   6979   1727  1680/1528/105     364/54     8   26   19.36)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 4&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 4&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 4&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 4&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 16&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 16 := 31 << 31
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 16&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 16 := 31 << 31
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 8 := 8&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 8 := 31 << 31
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 16&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 16 := 31 << 31
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 16&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 16&1073741823
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 16 := 31 << 31
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741823 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741822 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741820 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741816 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741808 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1073741792 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 64 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 128 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 256 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 512 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1024 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 2048 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 4096 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 8192 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16384 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 32768 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65536 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 131072 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 262144 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 524288 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1048576 := 66571993088&1073741823
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 2097152 := 66571993088&1073741823
(smt.stats    3    415   8470   2642  2338/2138/265     464/66    11   62   20.06)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
(smt.stats    4    526  10464   3961  2432/2223/274     569/77    15   98   20.15)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 18446741874686296072 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255551 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255444 := 2 << 2
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1 := 8&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1 := 8&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1 := 8&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 1 := 8&1
(smt.stats    5    648  14387   6511  2491/2276/291     781/130    17  104   20.25)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 32&3
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 3 << 3
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&3
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255560 := 3 << 3
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 8&3
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255560 := 3 << 3
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    750  18900  10445  2660/2408/298     960/172    19  111   20.54)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 164&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 160&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 192&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 256&127
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255808 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 192&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65 := 128&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65 := 129&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65 := 65&127
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255617 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 65 := 65&127
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255617 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 32 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 16 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255551 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255450 := 8 << 8
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 1 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 2 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 4 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 8 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 16 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 32 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 64 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 64 := 2048&127
(smt.stats    7    861  26059  16126  2786/2514/391    1169/232    21  133   21.06)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 64 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 32 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 1 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 2 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 2 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 16 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 16 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 8 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 5 := 2048&127
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 2048&127
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 0 (if #578 1 #689))) 4 := 2048&127
(smt.stats    8    983  29286  20874  2882/2605/411    1394/273    23  157   21.34)
(smt.stats    9   1117  36110  27424  2978/2653/411    1721/277    23  157   21.54)
(smt.stats   10   1218  42147  34927  3023/2723/413    1966/366    25  168   21.63)
(smt.stats   11   1329  48596  43876  3094/2793/416    2231/396    27  179   21.82)
(smt.stats   12   1451  51753  48913  3145/2852/426    2556/406    28  189   21.92)
ramon: poll                 wall=1.000s usage=0.932s mem=23324KiB load=0.93 rootload=0.92
(smt.stats   13   1585  56156  55824  3268/2941/432    2836/484    29  219   22.40)
(smt.stats   14   1732  63346  63910  3406/2981/432    3264/487    29  219   22.78)
ramon: poll                 wall=2.016s usage=1.946s mem=24116KiB load=1.00 rootload=0.99
(smt.stats   15   1833  66849  69402  3654/3243/432    3489/580    30  222   22.69)
(smt.stats   16   1944  69805  76142  3800/3416/432    3784/581    30  222   22.88)
(smt.stats   17   2066  73160  83719  3833/3520/438    4145/669    31  223   22.97)
(smt.stats   18   2200  78732  95320  3859/3556/440    4470/771    33  250   23.07)
ramon: poll                 wall=3.004s usage=2.933s mem=24580KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   19   2347  85436 107385  4019/3615/443    4914/773    33  250   23.36)
(smt.stats   20   2508  91124 118172  4205/3870/449    5517/817    34  279   23.46)
(smt.stats   21   2609  99317 140973  4240/3898/449    5717/889    35  299   23.55)
ramon: poll                 wall=4.000s usage=3.929s mem=25408KiB load=1.00 rootload=0.99
(smt.stats   22   2720 104872 150094  4313/3899/449    6152/891    35  299   23.74)
ramon: poll                 wall=5.000s usage=4.929s mem=25416KiB load=1.00 rootload=1.00
(smt.stats   23   2842 111210 161570  4551/3985/449    6464/902    35  299   23.93)
ramon: poll                 wall=6.000s usage=5.929s mem=25536KiB load=1.00 rootload=1.00
(smt.stats   24   2976 115741 173151  4679/4338/451    7071/1016    36  302   24.12)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   25   3123 124178 189378  4828/4358/452    7570/1019    36  302   24.21)
ramon: poll                 wall=7.000s usage=6.929s mem=25760KiB load=1.00 rootload=1.00
(smt.stats   26   3284 135607 214453  5050/4500/452    8146/1092    37  310   24.31)
ramon: poll                 wall=8.000s usage=7.927s mem=25892KiB load=1.00 rootload=1.00
(smt.stats   27   3461 143452 230061  5232/4721/452    8762/1095    37  310   24.42)
(smt.stats   28   3562 148340 238560  5257/4892/452    9276/1097    37  310   24.52)
(smt.stats   29   3673 157043 252276  5333/4929/452    9804/1097    37  310   24.63)
(smt.stats   30   3795 165401 267797  5400/4998/452   10223/1098    37  310   24.63)
ramon: poll                 wall=9.000s usage=8.927s mem=26108KiB load=1.00 rootload=1.00
(smt.stats   31   3929 171854 283927  5534/5065/452   10797/1103    37  310   24.72)
(smt.stats   32   4076 178304 301020  5577/5208/455   11481/1323    38  339   24.92)
(smt.stats   33   4237 184771 321553  5662/5271/455   12009/1326    38  339   24.92)
ramon: poll                 wall=10.000s usage=9.927s mem=26516KiB load=1.00 rootload=1.00
(smt.stats   34   4414 193123 349073  5822/5333/455   12738/1456    39  342   25.11)
(smt.stats   35   4608 200892 374684  5853/5491/461   13537/1540    40  349   25.20)
(smt.stats   36   4709 204703 393342  5868/5526/461   13849/1693    41  362   25.30)
(smt.stats   37   4820 210443 412905  5899/5528/462   14226/1693    41  362   25.30)
ramon: poll                 wall=11.000s usage=10.927s mem=26748KiB load=1.00 rootload=1.00
(smt.stats   38   4942 214501 426287  5945/5603/463   14821/1804    42  374   25.39)
(smt.delete-inactive-clauses  :num-deleted-clauses 332)
(smt.stats   39   5076 219968 442534  5996/5610/463   15074/1807    42  374   25.39)
(smt.stats   40   5223 227655 459888  6159/5666/463   15682/1921    43  398   25.59)
ramon: poll                 wall=12.000s usage=11.926s mem=27472KiB load=1.00 rootload=1.00
(smt.stats   41   5384 236820 491479  6222/5868/472   16441/2073    44  422   25.68)
(smt.stats   42   5561 242854 506777  6265/5891/472   16980/2074    44  422   25.77)
ramon: poll                 wall=13.000s usage=12.926s mem=27488KiB load=1.00 rootload=1.00
(smt.stats   43   5755 250113 515508  6459/5933/472   17294/2081    44  422   25.87)
(smt.stats   44   5968 258589 531655  6757/6186/472   18295/2084    44  422   25.96)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   45   6069 261360 541295  6791/6414/472   18861/2086    44  422   26.15)
ramon: poll                 wall=14.004s usage=13.929s mem=27644KiB load=1.00 rootload=1.00
(smt.stats   46   6180 265703 553290  6842/6452/473   19735/2341    45  426   26.25)
(smt.stats   47   6302 272096 572681  6881/6500/473   20583/2343    45  426   26.25)
(smt.stats   48   6436 278199 592593  6960/6554/473   21444/2346    45  426   26.44)
(smt.stats   49   6583 283203 615143  6985/6626/473   22015/2346    45  426   26.54)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 524531&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 283674000490739 := 549755813868 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 524531&0
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 140737488879859 := 549755813868 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1099511627736&0
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255472 := 549755813868 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (or #709 #710) 0 (if #711 1 #854))) 0 := 1099511627736&0
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255472 := 549755813868 << 1
(smt.stats   50   6744 288020 641053  7071/6654/473   22392/2347    45  426   26.63)
ramon: poll                 wall=15.000s usage=14.926s mem=28508KiB load=1.00 rootload=1.00
(smt.stats   51   6921 297748 677112  7146/6790/485   23196/2603    46  428   27.01)
ramon: poll                 wall=16.000s usage=15.925s mem=28992KiB load=1.00 rootload=1.00
(smt.stats   52   7115 305215 700982  7226/6797/485   24624/2606    46  428   27.30)
ramon: poll                 wall=17.000s usage=16.925s mem=29064KiB load=1.00 rootload=1.00
(smt.stats   53   7328 315623 721029  7486/6874/486   25334/2760    47  446   27.39)
ramon: poll                 wall=18.000s usage=17.925s mem=29220KiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.925s mem=29336KiB load=1.00 rootload=1.00
(smt.stats   54   7562 325157 762711  7766/7188/486   26594/2762    47  446   27.58)
(smt.stats   55   7663 329131 783838  7794/7425/486   27027/2762    47  446   27.58)
(smt.stats   56   7774 334570 803777  7904/7440/487   27694/3024    48  451   27.74)
ramon: poll                 wall=20.000s usage=19.924s mem=29488KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 17:47:17 2024
ramon: root.execname        z3
ramon: root.utime           19.980s
ramon: root.stime           0.010s
ramon: group.total          19.998s
ramon: group.utime          19.986s
ramon: group.stime          0.012s
ramon: group.mempeak        30000KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.074s
ramon: loadavg              1.00
