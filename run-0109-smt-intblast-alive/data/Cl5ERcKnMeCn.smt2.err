ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:47:19 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         42398 MiB
ramon: sys.mem.avail        61714 MiB
ramon: sys.nprocs           1256
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/Cl5ERcKnMeCn.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2855262
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   5192    471  1225/1111/116      86/12    11   21   19.28)
(smt.stats    1    202   6479   1511  2365/2103/116     213/13    11   21   19.37)
(smt.stats    2    313   8339   3622  2455/2158/116     461/25    11   21   19.47)
(smt.stats    3    414  11463   5746  2492/2260/128     558/50    13   22   19.57)
(smt.stats    4    525  13237   8361  2498/2267/131     647/75    14   38   19.67)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2 := 70368744177662 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2 := 70368744177662 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 3&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&1
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 4 := 3 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 70368744177663 := 1 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 3 := 1 << 1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 2&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&1
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 1 := 2&1
(smt.stats    5    647  15884  10749  2573/2309/173     711/63    18  102   19.88)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas       :deletions     )
(smt.stats    6    748  17163  12637  2650/2375/173     818/64    18  102   20.08)
(smt.stats    7    859  18266  13908  2816/2480/173     958/73    18  102   20.08)
(smt.stats    8    981  20427  17288  2863/2612/173    1117/73    18  102   20.08)
(smt.stats    9   1115  23128  20340  2898/2645/176    1288/115    19  108   20.19)
(smt.stats   10   1216  23784  22012  2899/2651/176    1390/115    19  108   20.29)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1 := 9&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 9&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177673 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 9&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177673 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 9&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177673 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 9&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177673 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 8&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177672 := 1 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2305702271725338626 := 0 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 8&4
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177672 := 1 << 3
(smt.stats   11   1327  24586  24951  2926/2675/187    1514/155    20  110   20.29)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  25245  28475  2930/2680/196    1643/161    21  112   20.39)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&2
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177665 := 0 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&2
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744177665 := 0 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 4&2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 4&2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 4&2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&2
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 3 := 1 << 2
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4&2
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 3 := 1 << 2
(smt.stats   13   1583  28730  31475  2984/2686/196    1788/167    21  112   20.54)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 10&8
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 10&8
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 16&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 16 := 1 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 16&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 16 := 1 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 16&8
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 1 := 1 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 82&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 82 := 10 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 82&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 82 := 10 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 160&8
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 9 := 10 << 4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&8
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 0 := 10 << 4
(smt.stats   14   1730  31537  36476  3021/2762/235    1922/205    23  144   20.64)
ramon: poll                 wall=1.000s usage=0.894s mem=21788KiB load=0.89 rootload=0.89
(smt.stats   15   1831  34589  40563  3077/2815/238    2039/235    25  152   20.73)
(smt.stats   16   1942  36319  44684  3093/2820/238    2166/236    25  152   20.73)
(smt.stats   17   2064  40270  50866  3133/2841/238    2327/239    25  152   20.93)
(smt.stats   18   2198  42857  54763  3156/2876/238    2511/240    25  152   20.93)
(smt.stats   19   2345  45063  59102  3181/2909/238    2671/240    25  152   20.93)
(smt.stats   20   2506  48597  65618  3252/2980/247    2826/313    26  161   21.04)
(smt.stats   21   2607  49689  69385  3255/2983/247    2935/313    26  161   21.04)
(smt.stats   22   2718  52768  73755  3275/2984/247    3047/318    27  171   21.04)
(smt.stats   23   2840  55214  83874  3284/3012/247    3175/318    27  171   21.04)
(smt.stats   24   2974  56737  91286  3310/3034/247    3323/318    27  171   21.14)
(smt.stats   25   3121  59358 100195  3362/3074/251    3484/339    28  174   21.14)
(smt.stats   26   3282  63830 116941  3373/3088/252    3645/340    29  176   21.44)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4398046511176&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4398046511176&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4398046511176&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 4398046511176&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 8796093022208&4398046511104
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 79164837199872 := 22 << 43
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 8796093022208&4398046511104
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 79164837199872 := 22 << 43
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 70368744177662&4398046511104
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 428&4398046511104
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 70368744178092 := 22 << 43
ramon: poll                 wall=2.000s usage=1.894s mem=22672KiB load=1.00 rootload=0.99
ramon: poll                 wall=3.000s usage=2.893s mem=22744KiB load=1.00 rootload=1.00
ramon: poll                 wall=4.000s usage=3.893s mem=22752KiB load=1.00 rootload=1.00
(smt.stats   27   3459  67523 123478  3472/3101/254    3823/348    30  181   21.53)
(smt.stats   28   3560  70623 129393  3557/3232/272    3941/350    30  181   21.63)
(smt.stats   29   3671  74522 136590  3567/3279/272    4056/344    31  209   21.63)
(smt.stats   30   3793  77118 143466  3576/3284/273    4189/357    32  212   21.63)
(smt.stats   31   3927  80734 151681  3585/3292/273    4348/357    32  212   21.63)
ramon: poll                 wall=5.002s usage=4.894s mem=22884KiB load=1.00 rootload=1.01
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074  83903 158042  3585/3296/273    4497/357    32  212   21.63)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 268&1
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 1 := 268&1
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 268&1
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 1 := 268&1
(smt.stats   33   4235  85815 164374  3595/3297/273    4694/359    32  212   21.63)
(smt.stats   34   4412  88783 174273  3604/3314/274    4886/372    33  218   21.72)
(smt.stats   35   4606  94126 181494  3614/3321/274    5100/372    33  218   21.72)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666768&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 65970697666752&4
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 65970697666752&4
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 3 := 25838523252760 << 3
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 65970697666752&4
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 2 := 25838523252760 << 3
(smt.stats   36   4707  96182 187472  3660/3364/291    5214/382    34  218   21.82)
(smt.stats   37   4818  98422 192690  3717/3397/291    5343/383    34  218   22.01)
(smt.stats   38   4940 100023 199216  3726/3421/291    5480/383    34  218   22.01)
(smt.delete-inactive-clauses  :num-deleted-clauses 242)
(smt.stats   39   5074 102210 204819  3740/3437/291    5375/391    35  222   22.01)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 32 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 32 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 64 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 128 := 8797166764034&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8 := 8797166765082&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 64 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 128 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 256 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 512 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2048 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4096 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8192 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2048 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4096 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4096 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8192 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 32768 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 65536 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 131072 := 8797166765058&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 64 := 8797166765066&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 64 := 8797166765122&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 131072 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 262144 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 262144 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765722&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1048576 := 8797166765722&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765722&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16777216 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 134217728 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 268435456 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 536870912 := 8797166765698&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1073741824 := 8797166765698&1073741824
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 149534655121026 := 66520522686464 << 31
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765186&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4194304 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2097152 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8797166765202&1073741824
(smt.stats   40   5221 105260 211450  4016/3719/479    5717/463    36  261   22.70)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 524288 := 8796101935234&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1048576 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8388608 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 67108864 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101936258&1073741824
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 33554432 := 8796101937282&1073741824
(smt.stats   41   5382 108206 219077  4317/3761/479    6253/475    36  261   22.99)
ramon: poll                 wall=6.000s usage=5.892s mem=24476KiB load=1.00 rootload=0.99
(smt.stats   42   5559 111391 225912  4798/4471/507    6912/561    37  266   23.18)
(smt.stats   43   5753 121006 242254  4897/4521/507    7218/561    37  266   23.37)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8192 := 8194&32768
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   44   5966 127107 261830  5123/4826/516    8094/1012    39  277   23.47)
(smt.stats   45   6067 130895 276449  5132/4835/517    8468/1012    39  277   23.58)
(smt.stats   46   6178 135034 298470  5140/4841/517    8670/1056    40  291   23.88)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388547502080&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388413284352&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388413284352&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388547502080&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 26388547502080&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388950155264&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388950155264&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388950155264&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388815937536&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388815937536&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388815937536&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 1024 := 26388815937536&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 26389352808448&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 26389352808448&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16384 := 26389226979328&17592186044416
(smt.stats   47   6300 138375 310803  5281/4948/548    9272/1284    41  298   23.98)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 512 := 35184372088834&137438953472
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 32 := 35184372088834&137438953472
(smt.stats   48   6434 143285 332564  5304/5007/558    9888/1741    42  313   24.08)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 16 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2 := 35184372088834&17592186044416
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 35184372088834&17592186044416
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 175921860444162 := 65970697666560 << 45
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 35184372088834&17592186044416
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 246290604621826 := 65970697666560 << 45
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 35184372088834&17592186044416
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 246290604621826 := 65970697666560 << 45
(smt.stats   49   6581 149079 345555  5397/5095/574   10188/1746    42  313   24.28)
ramon: poll                 wall=7.000s usage=6.892s mem=25644KiB load=1.00 rootload=1.00
(smt.stats   50   6742 155194 372014  5447/5151/581   10804/2133    43  334   24.28)
(smt.stats   51   6919 163497 422995  5460/5156/583   11023/2153    44  341   24.37)
(smt.stats   52   7113 171310 465462  5488/5175/588   11365/2154    44  341   24.37)
(smt.stats   53   7326 180427 514251  5531/5196/588   11627/2220    45  358   24.47)
(smt.stats   54   7560 187271 548772  5549/5253/590   12393/2252    46  365   24.66)
ramon: poll                 wall=8.000s usage=7.892s mem=26160KiB load=1.00 rootload=1.00
(smt.stats   55   7661 191249 566503  5557/5261/590   12581/2252    46  365   24.66)
(smt.stats   56   7772 196569 595275  5568/5268/591   12921/2552    47  372   24.76)
(smt.stats   57   7894 200331 610341  5584/5288/591   13082/2663    48  374   24.76)
(smt.stats   58   8028 202523 617485  5594/5293/592   13364/2663    48  374   24.76)
(smt.stats   59   8175 206428 649340  5629/5313/592   13612/2664    48  374   24.95)
(smt.stats   60   8337 210186 667109  5703/5396/593   13798/2813    49  382   24.95)
(smt.stats   61   8514 214367 698985  5720/5408/596   14355/2824    50  410   25.05)
ramon: poll                 wall=9.000s usage=8.891s mem=26512KiB load=1.00 rootload=1.00
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 83886080&64
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2306265221762646016 := 65970697666561 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 83886080&64
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2306265221762646016 := 65970697666561 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 83886080&64
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2306265221762646016 := 65970697666560 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 83886080&64
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2306265221762646016 := 65970697666560 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&64
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 35184355311626 := 65970697666560 << 7
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&64
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 35184355311626 := 65970697666560 << 7
(smt.stats   62   8709 223698 743341  5865/5557/618   14832/3270    51  432   25.14)
(smt.stats   63   8922 232094 760294  5937/5560/618   15087/3272    51  432   25.24)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   64   9156 238121 799464  6044/5685/619   15527/3366    52  447   25.43)
ramon: poll                 wall=10.000s usage=9.883s mem=26968KiB load=0.99 rootload=0.99
(smt.stats   65   9413 246579 847874  6080/5729/619   15929/3503    53  463   25.53)
(smt.stats   66   9514 248865 862864  6092/5771/620   16157/3556    54  473   25.53)
(smt.stats   67   9625 253032 881273  6099/5778/621   16427/3556    54  473   25.53)
(smt.stats   68   9747 258137 914673  6104/5783/621   16772/3652    55  481   25.63)
(smt.stats   69   9881 261323 938323  6117/5796/621   17062/3652    55  481   25.82)
(smt.delete-inactive-clauses  :num-deleted-clauses 310)
(smt.stats   70  10028 267955 964495  6130/5799/621   16975/3652    55  481   25.82)
(smt.stats   71  10189 274182 991121  6146/5815/621   17202/3653    55  481   25.82)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   72  10366 278988 1005520  6228/5834/621   17400/3657    55  481   25.82)
ramon: poll                 wall=11.000s usage=10.883s mem=27380KiB load=1.00 rootload=1.00
(smt.stats   73  10560 284847 1043867  6273/5932/621   17842/3657    55  481   25.92)
(smt.stats   74  10773 292355 1081339  6286/5957/621   18065/3657    55  481   25.92)
(smt.stats   75  11007 298254 1116466  6319/5998/622   18554/4040    56  487   26.13)
(smt.stats   76  11264 303105 1142439  6338/6013/622   18816/4040    56  487   26.54)
(smt.stats   77  11546 310129 1166151  6373/6052/623   19477/4170    57  490   26.63)
ramon: poll                 wall=12.000s usage=11.883s mem=28148KiB load=1.00 rootload=1.00
(smt.stats   78  11647 313653 1187258  6399/6056/623   19603/4172    57  490   26.63)
(smt.stats   79  11758 319476 1206666  6472/6125/627   19792/4172    57  490   26.73)
(smt.stats   80  11880 323491 1230528  6504/6160/629   20025/4340    58  506   26.73)
(smt.stats   81  12014 326781 1247478  6521/6190/629   20215/4340    58  506   26.73)
(smt.stats   82  12161 335137 1290076  6522/6197/629   20629/4404    59  512   26.83)
(smt.stats   83  12322 344497 1345194  6528/6203/629   20839/4404    59  512   26.83)
ramon: poll                 wall=13.000s usage=12.882s mem=28324KiB load=1.00 rootload=1.00
(smt.stats   84  12499 352634 1392099  6540/6215/630   21476/4420    60  527   26.92)
(smt.stats   85  12693 356123 1407690  6552/6223/630   21685/4420    60  527   26.92)
(smt.stats   86  12906 367506 1483731  6562/6231/630   21971/4420    60  527   26.92)
(smt.stats   87  13140 371701 1524411  6583/6243/630   22342/4420    60  527   26.92)
(smt.stats   88  13397 374500 1567881  6612/6258/630   22683/4420    60  527   26.92)
ramon: poll                 wall=14.000s usage=13.882s mem=28452KiB load=1.00 rootload=1.00
(smt.stats   89  13679 381452 1622330  6640/6295/632   23227/4492    61  547   27.12)
(smt.stats   90  13989 392400 1693127  6715/6331/632   24016/4498    61  547   27.21)
(smt.stats   91  14090 395876 1706359  6736/6391/632   24136/4691    62  562   27.21)
ramon: poll                 wall=15.000s usage=14.881s mem=28792KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   92  14201 399713 1735628  6757/6413/632   24375/4692    62  562   27.31)
(smt.stats   93  14323 403392 1761506  6762/6433/632   24500/4692    62  562   27.31)
(smt.stats   94  14458 405570 1794538  6763/6438/634   24641/4800    63  567   27.31)
(smt.stats   95  14605 408320 1813313  6781/6443/634   24840/4801    63  567   27.31)
(smt.stats   96  14766 411664 1826152  6791/6458/634   25021/4801    63  567   27.31)
(smt.stats   97  14943 416181 1862414  6803/6470/634   25315/4801    63  567   27.40)
(smt.delete-inactive-clauses  :num-deleted-clauses 405)
(smt.stats   98  15137 424320 1888598  6819/6478/634   25139/4801    63  567   27.40)
ramon: poll                 wall=16.002s usage=15.883s mem=28884KiB load=1.00 rootload=1.00
(smt.stats   99  15350 431078 1921048  6949/6497/634   25381/4803    63  567   27.40)
(smt.stats  100  15584 435842 1966168  7020/6695/635   25912/4944    64  568   27.50)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 1 := 1 << 5
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 1&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 1 := 1 << 5
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 0 := 1 << 5
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&16
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 0 := 1 << 5
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&16
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 35184372088838 := 0 << 5
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&16
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 35184372088838 := 0 << 5
(smt.stats  101  15841 442751 2010933  7092/6712/637   26259/4947    64  568   27.59)
ramon: poll                 wall=17.000s usage=16.881s mem=29156KiB load=1.00 rootload=0.99
(smt.stats  102  16123 448057 2037907  7097/6765/649   26592/5018    65  589   27.69)
ramon: poll                 wall=18.000s usage=17.880s mem=29400KiB load=1.00 rootload=1.00
(smt.stats  103  16433 452320 2049196  7873/6813/649   27205/5040    65  589   28.07)
(smt.stats  104  16773 465749 2122986  7886/7555/649   27901/5040    65  589   28.31)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 2&16384
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 2 := 1 << 15
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&16384
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 0 := 1 << 15
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 0&16384
shl: (shl[64] (bv2int %0) (mod (+ #109 #351) 64)) 0 := 1 << 15
(smt.stats  105  16874 469280 2151727  7905/7563/649   28061/5128    66  592   28.31)
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 4123168604160 := 1 << 15
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
shl: (shl[46] (bv2int %0) (mod (bv2int %1) 46)) 4123168604160 := 1 << 15
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 8192 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 4096 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 128 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 256 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 2048 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16382 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16380 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16380 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16380 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16384 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16384 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16384 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16378 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16376 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16368 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16352 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16320 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16256 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 16128 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 15872 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 1024 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 2048 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 4096 := 32768&16384
band: (band[46] (shl[64] (bv2int %0) (mod #352 64)) (if (= #710 63) 0 (if #712 1 #836))) 0 := 32768&16384
band: (band[46] (shl[46] (bv2int %0) (mod #109 46)) (if (= #601 45) 1 (if #603 2 #691))) 8192 := 32768&16384
(smt.stats  106  16985 471919 2165288  8056/7700/765   28251/5136    66  592   28.71)
(smt.stats  107  17107 476570 2181296  8115/7710/765   28403/5140    66  592   28.84)
ramon: poll                 wall=19.000s usage=18.880s mem=30324KiB load=1.00 rootload=1.00
(smt.stats  108  17241 479914 2213023  8145/7800/765   28593/5206    67  616   28.93)
(smt.stats  109  17388 487669 2261215  8185/7819/765   28905/5206    67  616   29.13)
(smt.stats  110  17549 492189 2273134  8196/7863/766   29147/5363    68  618   29.23)
ramon: poll                 wall=20.000s usage=19.880s mem=31244KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 14:47:39 2024
ramon: root.execname        z3
ramon: root.utime           19.940s
ramon: root.stime           0.010s
ramon: group.total          19.968s
ramon: group.utime          19.948s
ramon: group.stime          0.020s
ramon: group.mempeak        31504KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.088s
ramon: loadavg              0.99
