ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:38:23 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         25294 MiB
ramon: sys.mem.avail        61752 MiB
ramon: sys.nprocs           1393
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/aGMhxemoAxtR.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             84282
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   3607    373  1308/1128/106     104/21     4   16   19.38)
(smt.stats    1    202   4112    808  2226/1994/106     214/23     4   16   19.49)
(smt.stats    2    314   5569   2587  2617/2360/109     323/29     6   20   19.59)
(smt.stats    3    415   7194   4166  2651/2413/111     422/29     8   23   19.69)
ramon: poll                 wall=1.000s usage=0.936s mem=20816KiB load=0.94 rootload=0.93
(smt.stats    4    526   9558   6006  2860/2622/123     526/58    12   29   19.79)
(smt.stats    5    648  14247   7695  2936/2690/125     646/74    14   31   19.88)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas        :deletions    )
(smt.stats    6    749  17273   8893  3006/2695/125     750/74    14   31   19.98)
(smt.stats    7    860  19725  10368  3131/2808/125     862/76    14   31   20.08)
(smt.stats    8    982  22452  13301  3268/3024/126     978/86    15   33   20.08)
(smt.stats    9   1116  23814  16552  3286/3032/129    1110/86    15   33   20.08)
(smt.stats   10   1217  25221  19197  3304/3054/131    1200/87    16   39   20.18)
ramon: poll                 wall=2.000s usage=1.936s mem=21308KiB load=1.00 rootload=1.00
(smt.stats   11   1328  30982  24862  3373/3117/132    1312/95    18   40   20.18)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions    )
(smt.stats   12   1450  36780  29687  3383/3134/132    1439/95    18   40   20.32)
(smt.stats   13   1584  41328  34095  3392/3147/133    1578/121    19   40   20.32)
(smt.stats   14   1731  43501  39496  3459/3158/133    1723/122    19   40   20.41)
(smt.stats   15   1832  44663  42616  3546/3223/133    1819/130    19   40   20.51)
(smt.stats   16   1943  45867  46577  3611/3364/133    1923/130    19   40   20.51)
(smt.stats   17   2065  46996  50236  3638/3383/134    2050/153    20   40   20.51)
(smt.stats   18   2199  50676  54167  3677/3413/134    2176/158    20   40   20.51)
ramon: poll                 wall=3.003s usage=2.939s mem=21796KiB load=1.00 rootload=1.00
(smt.stats   19   2346  52879  59187  3783/3467/134    2306/169    20   40   20.60)
(smt.stats   20   2507  53277  59853  3868/3554/134    2467/174    20   40   20.89)
ramon: poll                 wall=4.000s usage=3.936s mem=22160KiB load=1.00 rootload=1.00
(smt.stats   21   2608  54274  62055  4316/4005/135    2566/192    21   40   20.99)
(smt.stats   22   2719  54657  62915  4466/4154/135    2678/199    21   40   20.99)
(smt.stats   23   2841  56044  66565  4615/4351/135    2815/200    21   40   20.99)
(smt.stats   24   2975  57797  69474  4672/4424/143    3050/230    22   44   21.08)
(smt.stats   25   3122  59398  72676  4706/4441/145    3218/231    22   44   21.28)
(smt.stats   26   3283  65056  76406  4718/4465/145    3372/345    23   52   21.28)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 31 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 30 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 24 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 24 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 31 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 30 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 24 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 31 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 30 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 2 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 27 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 26 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 26 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 4626&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 18 := 4626&31
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4626 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 8 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 8 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 36028797018963966 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 8444249301318851 := 4626 << 6
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 4 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 1 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 1 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 4 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 8 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 1 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 4 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 8 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 16 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 2 := 296064&31
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 4 := 296064&31
ramon: poll                 wall=5.000s usage=4.936s mem=22848KiB load=1.00 rootload=0.99
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296064&31
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 1 := 296064&31
(smt.stats   27   3460  68573  82974  4829/4580/267    3618/367    25   83   21.60)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 64 := 296388&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 64 := 296388&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 64 := 296388&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 96 := 296416&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 96 := 296416&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 96 := 296416&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 128 := 296448&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 128 := 296448&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 256 := 296448&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 512 := 296448&1023
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 296448 := 4631 << 11
(smt.stats   28   3561  70904  86375  4939/4678/300    3789/375    26   90   21.81)
(smt.stats   29   3672  75800  92438  4943/4682/301    3903/380    27   94   21.81)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 8444249301318881 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 8444249301318881 := 4631 << 11
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 992 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 64 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 128 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 256 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 64 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 32 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 128 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 256 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 512 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 384 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9484288&1023
band: (band[55] (shl[55] (bv2int %0) (mod #114 55)) (if (= #636 54) 0 (if #638 1 #791))) 256 := 9484288&1023
(smt.stats   30   3794  79216  99586  5112/4792/353    4111/393    28  100   22.20)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 137 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 137 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 168 := 9484288&1023
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 168 := 9484288&1023
(smt.stats   31   3928  81544 105657  5205/4916/362    4407/418    29  109   22.29)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4075  88199 114859  5224/4929/363    4603/486    30  120   22.29)
(smt.stats   33   4236  97230 136120  5272/4983/365    4794/508    31  127   22.41)
ramon: poll                 wall=6.000s usage=5.935s mem=23864KiB load=1.00 rootload=1.00
(smt.stats   34   4413 102411 142689  5483/5194/367    5094/526    32  128   22.69)
ramon: poll                 wall=7.000s usage=6.935s mem=24140KiB load=1.00 rootload=1.00
(smt.stats   35   4607 110517 159214  5543/5238/371    5585/576    33  136   22.79)
(smt.stats   36   4709 115557 171141  5629/5340/372    5775/609    34  137   22.79)
(smt.stats   37   4820 118518 174057  5634/5341/372    5915/609    34  137   22.89)
(smt.stats   38   4942 123500 192881  5646/5357/374    6185/622    35  143   23.07)
(smt.delete-inactive-clauses  :num-deleted-clauses 538)
(smt.stats   39   5076 130854 213170  5651/5362/375    5802/622    35  143   23.07)
(smt.stats   40   5223 141841 241952  5661/5365/375    5955/657    36  145   23.17)
(smt.stats   41   5384 149204 259258  5680/5391/377    6180/670    37  163   23.17)
(smt.stats   42   5561 155486 270670  5692/5402/377    6563/670    37  163   23.17)
(smt.stats   43   5755 164167 286031  5711/5410/377    6836/670    37  163   23.29)
ramon: poll                 wall=8.000s usage=7.935s mem=24692KiB load=1.00 rootload=1.00
(smt.stats   44   5968 170566 301773  5791/5499/379    7184/829    38  182   23.39)
(smt.stats   45   6069 173527 306916  5805/5504/381    7311/830    38  182   23.48)
(smt.stats   46   6180 176529 315635  5812/5520/381    7549/830    38  182   23.48)
ramon: poll                 wall=9.000s usage=8.934s mem=24844KiB load=1.00 rootload=1.00
(smt.stats   47   6302 181770 330707  5839/5531/381    7731/873    39  185   23.48)
(smt.stats   48   6436 186391 349144  5945/5548/381    8079/876    39  185   23.67)
(smt.stats   49   6583 194460 371632  5983/5674/381    8276/877    39  185   23.67)
ramon: poll                 wall=10.000s usage=9.934s mem=25220KiB load=1.00 rootload=1.00
(smt.stats   50   6744 201229 394555  6003/5700/381    8605/877    39  185   23.77)
(smt.stats   51   6921 207738 424776  6012/5717/381    8855/877    39  185   24.17)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   52   7115 214215 445113  6035/5726/381    9203/878    39  185   24.17)
(smt.stats   53   7328 221134 475993  6146/5755/381    9559/880    39  185   24.17)
ramon: poll                 wall=11.000s usage=10.934s mem=25644KiB load=1.00 rootload=1.00
(smt.stats   54   7562 228479 500714  6194/5875/381    9927/880    39  185   24.27)
(smt.stats   55   7663 231406 507993  6263/5907/381   10132/885    39  185   24.27)
(smt.stats   56   7774 234966 521442  6328/5981/382   10321/1033    40  190   24.36)
(smt.stats   57   7896 244149 551919  6329/6034/382   10454/1033    40  190   24.47)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   58   8030 247345 572292  6337/6040/382   10733/1033    40  190   24.47)
ramon: poll                 wall=12.000s usage=11.934s mem=25980KiB load=1.00 rootload=1.00
(smt.stats   59   8177 248852 576541  6454/6044/382   10900/1033    40  190   24.57)
ramon: poll                 wall=13.000s usage=12.934s mem=26112KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.934s mem=26288KiB load=1.00 rootload=1.00
(smt.stats   60   8338 253931 589541  6714/6284/382   11203/1034    40  190   24.76)
(smt.stats   61   8515 258151 601175  6869/6556/384   11784/1143    41  193   24.76)
ramon: poll                 wall=15.000s usage=14.933s mem=26364KiB load=1.00 rootload=1.00
(smt.stats   62   8709 263365 615558  7189/6893/385   12103/1146    41  193   25.24)
ramon: poll                 wall=16.000s usage=15.933s mem=27000KiB load=1.00 rootload=1.00
(smt.stats   63   8922 268028 627530  7455/6905/385   12675/1188    42  196   25.33)
(smt.stats   64   9156 274055 660429  7499/7189/386   13065/1313    43  200   25.43)
(smt.stats   65   9413 280403 685906  7512/7212/387   13326/1313    43  200   25.53)
(smt.stats   66   9514 282510 693661  7519/7224/387   13491/1330    44  205   25.53)
ramon: poll                 wall=17.000s usage=16.933s mem=27092KiB load=1.00 rootload=0.99
(smt.stats   67   9625 288791 753621  7519/7224/387   13606/1330    44  205   25.53)
(smt.stats   68   9747 291973 770537  7600/7224/387   13895/1330    44  205   25.62)
ramon: poll                 wall=18.000s usage=17.933s mem=27316KiB load=1.00 rootload=1.00
(smt.stats   69   9881 294732 783143  7856/7407/387   14184/1334    44  205   25.82)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10028 298891 801663  7937/7634/387   14366/1334    44  205   25.92)
(smt.stats   71  10189 313793 856035  7938/7643/387   14528/1334    44  205   25.92)
ramon: poll                 wall=19.000s usage=18.933s mem=27564KiB load=1.00 rootload=1.00
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 309631&4503599627370495
(smt.stats   72  10366 321863 883689  8023/7648/387   14908/1338    44  205   26.04)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483552&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483552&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483584&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483552&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483552&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483584&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483584&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483584&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483552&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483776&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483776&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483776&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483776&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483776&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483776&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9483776&4503599627370495
(smt.stats   73  10560 326051 908479  8199/7763/393   15462/1476    45  216   26.23)
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9216&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9216&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 10240&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9216&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 10240&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 12288&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9216&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296192&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 296192&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 295936&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 294912&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9216&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 10240&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 12288&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 16384&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 10240&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9216&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 9216&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 16384&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 32768&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 65536&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 65536&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 131072&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 262144&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 65536&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 131072&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 262144&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 32768&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 24576&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 16384&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 16384&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 65536&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 262144&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 262144&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 65536&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 262144&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 262144&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 65536&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 65536&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 65536&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 131072&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 131072&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 131072&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 12288&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 12288&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 12288&4503599627370495
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 0&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4575657221408423936 := 4838 << 53
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 0&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4575657221408423936 := 4838 << 53
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 0&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4575657221408423936 := 4838 << 53
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 0&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4575657221408423936 := 4948 << 53
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 0&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4575657221408423936 := 4948 << 53
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 0&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4575657221408423936 := 4948 << 53
band: (band[55] (shl[64] (bv2int %0) (mod #802 64)) (if (or #817 #818) 0 (if #819 1 #948))) 0 := 0&4503599627370495
shl: (shl[64] (bv2int %0) (mod (+ #114 #801) 64)) 4575657221408423936 := 4948 << 53
(smt.stats   74  10773 332315 941898  8396/8010/574   15984/1558    46  236   27.52)
(smt.stats   75  11007 345115 993566  8479/8156/579   16508/1581    47  255   27.80)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   76  11264 360700 1045651  8668/8305/581   17077/1686    49  261   27.99)
ramon: poll                 wall=20.000s usage=19.932s mem=29800KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 18:38:43 2024
ramon: root.execname        z3
ramon: root.utime           19.980s
ramon: root.stime           0.010s
ramon: group.total          20.002s
ramon: group.utime          19.986s
ramon: group.stime          0.016s
ramon: group.mempeak        30312KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.069s
ramon: loadavg              1.00
