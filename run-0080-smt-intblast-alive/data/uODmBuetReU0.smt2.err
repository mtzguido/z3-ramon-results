ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 19:07:45 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         24585 MiB
ramon: sys.mem.avail        61749 MiB
ramon: sys.nprocs           1398
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/uODmBuetReU0.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             177406
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    102   4460   1930  1307/1176/102      94/9     7   18   19.26)
(smt.stats    1    203   5468   2744  2138/1919/105     203/24     9   22   19.46)
(smt.stats    2    314   6835   3833  2242/2045/111     307/23    10   31   19.55)
(smt.stats    3    415   7768   4679  2328/2048/112     413/27    11   38   19.55)
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 576460752303423485&0
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 18446744073709551613 := 18446744073709551552 >>l 5
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 576460752303423485&0
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 18446744073709551613 := 18446744073709551552 >>l 5
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 576460752303423425&0
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 18446744073709551553 := 18446744073709551552 >>l 5
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 576460752303423425&0
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 18446744073709551553 := 18446744073709551552 >>l 5
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 576460752303423457&0
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 18446744073709551585 := 18446744073709551584 >>l 6
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 576460752303423457&0
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 18446744073709551585 := 18446744073709551584 >>l 6
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 576460752303423457&0
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 18446744073709551585 := 18446744073709551584 >>l 6
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 576460752303423457&0
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 18446744073709551585 := 18446744073709551584 >>l 6
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 288230376151711743&0
lshr: (lshr[59] (bv2int %0) (mod (bv2int %0) 59)) 1 := 576460752303423487 >>l 1
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 288230376151711743&0
lshr: (lshr[59] (bv2int %0) (mod (bv2int %0) 59)) 140187732541775 := 576460752303423487 >>l 1
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 288230376151711743&0
lshr: (lshr[59] (bv2int %0) (mod (bv2int %0) 59)) 140187732541775 := 576460752303423487 >>l 1
(smt.stats    4    526   9063   6649  2405/2198/128     514/55    15   44   19.65)
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 288230376151711743&0
lshr: (lshr[59] (bv2int %0) (mod (bv2int %0) 59)) 1 := 576460752303423487 >>l 1
(smt.stats    5    648   9465   7639  2447/2239/134     631/81    16   46   19.74)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas        :deletions    )
(smt.stats    6    749  10086   8529  2929/2560/134     740/84    16   46   19.96)
(smt.stats    7    860  11204   9846  3113/2739/134     857/85    16   46   20.05)
ramon: poll                 wall=1.000s usage=0.930s mem=21236KiB load=0.93 rootload=0.92
(smt.stats    8    982  12658  11259  3250/2893/134     991/91    16   46   20.15)
(smt.stats    9   1116  14005  13855  3512/3218/137    1116/131    17   52   20.15)
(smt.stats   10   1217  15092  15923  3561/3267/137    1245/132    18   54   20.25)
(smt.stats   11   1329  16378  19000  3683/3323/137    1359/139    18   54   20.25)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1451  17745  21975  3738/3434/137    1487/143    18   54   20.34)
(smt.stats   13   1585  19379  24909  3852/3575/141    1645/176    19   54   20.34)
ramon: poll                 wall=2.000s usage=1.930s mem=21556KiB load=1.00 rootload=1.00
(smt.stats   14   1732  21320  31154  3973/3612/141    1793/179    19   54   20.44)
(smt.stats   15   1833  24666  34798  3997/3732/141    1900/179    19   54   20.44)
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 256 := 73761&256
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 256 := 73761&256
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 73761&256
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 576460752303497249 := 576460752303497248 >>l 57
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 256 := 73761&256
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 255 := 73761&256
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 254 := 73761&256
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 252 := 73761&256
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 73761&256
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 576460752303497249 := 576460752303497248 >>l 57
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 73761&256
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 576460752303497249 := 576460752303497248 >>l 57
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 73761&256
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 576460752303497249 := 576460752303497248 >>l 57
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 256 := 73759&256
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 255 := 73759&256
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 254 := 73759&256
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 255&256
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 576460752303423743 := 576460752303497248 >>l 57
(smt.stats   16   1944  25877  39155  4039/3778/160    2015/204    21   61   20.64)
(smt.stats   17   2066  27667  41359  4079/3785/160    2144/213    21   61   20.73)
(smt.stats   18   2200  29460  43994  4209/3862/160    2282/217    21   61   20.73)
(smt.stats   19   2347  31833  50511  4359/4000/161    2440/253    22   61   20.83)
ramon: poll                 wall=3.000s usage=2.929s mem=22012KiB load=1.00 rootload=1.00
(smt.stats   20   2508  35142  55000  4539/4276/163    2603/273    24   63   20.92)
(smt.stats   21   2609  36455  58281  4653/4386/164    2706/276    24   63   20.92)
(smt.stats   22   2720  39776  61907  4685/4397/164    2833/277    24   63   21.02)
ramon: poll                 wall=4.000s usage=3.928s mem=22236KiB load=1.00 rootload=1.00
(smt.stats   23   2842  41957  65983  4846/4476/164    2962/285    25   71   21.02)
(smt.stats   24   2976  46982  75106  4850/4587/164    3092/285    25   71   21.15)
(smt.stats   25   3123  50026  79075  4920/4591/164    3270/285    25   71   21.15)
(smt.stats   26   3284  53815  84639  4997/4678/164    3438/290    25   71   21.15)
ramon: poll                 wall=5.000s usage=4.928s mem=22516KiB load=1.00 rootload=1.00
(smt.stats   27   3461  56777  90397  5207/4763/164    3626/295    25   71   21.39)
(smt.stats   28   3562  58923  94832  5276/5011/164    3741/295    25   71   21.39)
(smt.stats   29   3673  61147  99631  5326/5021/164    3861/297    25   71   21.39)
(smt.stats   30   3795  62529 105052  5429/5101/165    3981/361    26   76   21.39)
(smt.stats   31   3929  63948 108584  5489/5188/165    4111/363    26   76   21.39)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions    )
(smt.stats   32   4076  66560 112993  5524/5233/165    4314/363    26   76   21.49)
ramon: poll                 wall=6.000s usage=5.927s mem=22760KiB load=1.00 rootload=1.00
(smt.stats   33   4237  68586 120219  5663/5337/166    4495/422    27   81   21.49)
(smt.stats   34   4414  70537 131719  5891/5444/166    4678/427    27   81   21.58)
ramon: poll                 wall=7.000s usage=6.927s mem=23032KiB load=1.00 rootload=1.00
(smt.stats   35   4608  72708 134886  6158/5657/166    4905/431    27   81   21.87)
(smt.stats   36   4709  73719 141589  6393/6038/166    5037/433    27   81   21.87)
(smt.stats   37   4820  74900 147032  6475/6146/166    5165/434    27   81   21.87)
ramon: poll                 wall=8.004s usage=7.930s mem=23284KiB load=1.00 rootload=1.00
(smt.stats   38   4942  76002 151155  6647/6213/166    5334/435    27   81   21.97)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   39   5076  77936 157891  6726/6393/168    5481/564    28   84   21.97)
(smt.stats   40   5223  81714 167095  6751/6488/168    5628/564    28   84   22.06)
(smt.stats   41   5384  89156 177397  6754/6491/168    5788/564    28   84   22.06)
(smt.stats   42   5561  92186 184658  6818/6494/168    5989/567    28   84   22.16)
ramon: poll                 wall=9.000s usage=8.925s mem=23616KiB load=1.00 rootload=1.00
(smt.stats   43   5755  95368 192737  6959/6576/168    6213/571    28   84   22.16)
(smt.stats   44   5968  99921 203269  7160/6739/168    6464/576    28   84   22.16)
(smt.stats   45   6069 101986 214127  7193/6930/168    6571/576    28   84   22.42)
(smt.stats   46   6180 103801 223355  7245/6937/170    6692/654    29   86   22.42)
(smt.stats   47   6302 105677 235749  7267/6989/170    6824/655    29   86   22.42)
ramon: poll                 wall=10.000s usage=9.925s mem=23836KiB load=1.00 rootload=1.00
(smt.stats   48   6436 107361 238495  7368/7007/170    6967/670    30   87   22.51)
(smt.stats   49   6583 109854 251678  7400/7116/170    7117/674    30   87   22.51)
(smt.stats   50   6744 111158 255875  7508/7172/170    7286/677    30   87   22.61)
(smt.stats   51   6921 112377 261029  7713/7371/170    7484/679    30   87   22.61)
ramon: poll                 wall=11.000s usage=10.924s mem=24092KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions    )
(smt.stats   52   7115 116716 270319  7799/7475/171    7725/728    31   87   22.61)
(smt.stats   53   7328 122086 283094  8060/7565/171    7982/733    31   87   22.71)
ramon: poll                 wall=12.000s usage=11.924s mem=24348KiB load=1.00 rootload=1.00
(smt.stats   54   7562 126490 293909  8229/7805/171    8241/741    31   87   22.81)
(smt.stats   55   7663 128435 295845  8457/8088/171    8352/747    31   87   22.91)
(smt.stats   56   7774 130036 301202  8531/8246/171    8481/747    31   87   22.91)
(smt.stats   57   7896 132122 303985  8665/8276/171    8610/747    31   87   23.00)
ramon: poll                 wall=13.000s usage=12.924s mem=24604KiB load=1.00 rootload=0.99
(smt.stats   58   8030 133843 310098  8825/8502/171    8770/749    31   87   23.00)
(smt.stats   59   8177 136181 318891  8905/8565/171    8966/751    31   87   23.10)
(smt.stats   60   8338 138316 326688  9006/8672/171    9161/751    31   87   23.10)
(smt.stats   61   8515 143208 344320  9019/8756/171    9337/751    31   87   23.10)
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8188 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8184 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8184 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8187 := 432363156388572240&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8184 := 432363156388572234&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 7172 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 7172 := 432363156388572236&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 7168 := 432363156388572235&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 7680 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 7680 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 7680 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 7680 := 432363156388572752&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 4096 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6643 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6642 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 4096 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 4096 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 4096 := 432363156388572233&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 4096 := 432363156388572291&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 4593 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 4592 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 4576 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6144 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6144 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6641 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6640 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6624 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6592 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6144 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6144 := 432363156388573257&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6528 := 432363156388575305&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6417 := 432363156388575305&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6528 := 432363156388575305&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6528 := 432363156388575305&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6528 := 432363156388575305&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6528 := 432363156388575360&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6432 := 432363156388575305&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6448 := 432363156388575328&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6432 := 432363156388575305&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6448 := 432363156388575328&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6432 := 432363156388574304&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6400 := 432363156388574304&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6144 := 432363156388574304&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 6144 := 432363156388574304&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 5440 := 432363156388574304&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8192 := 432363156388574304&8192
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 2161745413298844768 := 7349892184063595392 >>l 52
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8192 := 432363156388574304&8192
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 2161745413298844768 := 7349892184063595392 >>l 52
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8192 := 432363156388576329&8192
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 2161745413298846793 := 7349892184063595392 >>l 52
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8192 := 432363156388576329&8192
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 2161745413298846793 := 7349892184063595392 >>l 52
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8192 := 432363156388576329&8192
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 2161745413298846793 := 7349892184063595392 >>l 52
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 8192 := 432363156388576329&8192
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 2161745413298846793 := 7349892184063595392 >>l 52
(smt.stats   62   8709 147993 355993  9246/8794/202    9708/884    32   93   23.50)
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 1024 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 256 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 256 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 256 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
lshr: (lshr[59] (bv2int %0) (mod (bv2int %0) 59)) 274648091561237109 := 229684130751987356 >>l 47
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
lshr: (lshr[59] (bv2int %0) (mod (bv2int %0) 59)) 105852458273742017 := 229684130751987356 >>l 47
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
lshr: (lshr[59] (bv2int %0) (mod (bv2int %0) 59)) 105852458273742017 := 229684130751987356 >>l 47
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 2 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 2 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 2 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 1 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 1 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 2 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 4 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 8 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 16 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 32 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 64 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 128 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 256 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 512 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 1024 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 1024 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 512 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 512 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 512 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 357 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 356 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 352 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 256 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 256 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 1024 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 1024 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 101 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 96 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 64 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 64 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 37 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 36 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 32 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 32 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 64 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 4 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 2 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 1 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 1 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 128 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 8 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 8 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 8 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 16 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 16 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 16 := 1632&8192
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 0 := 1632&8192
band: (band[59] (lshr[59] (bv2int %0) (mod #98 59)) (if (= #504 58) 576460752303423488 (if #506 288230376151711744 #620))) 16 := 1632&8192
(smt.stats   63   8922 152376 369537  9411/9145/437   10073/1005    33  144   24.08)
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 512 := 609&512
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 2305843009213694561 := 4035225266123968512 >>l 56
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 512 := 609&512
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 2305843009213694561 := 4035225266123968512 >>l 56
ramon: poll                 wall=14.000s usage=13.924s mem=25884KiB load=1.00 rootload=0.99
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 512 := 609&512
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 1729382256910271073 := 4035225266123968512 >>l 56
band: (band[59] (lshr[64] (* 32 #98) (mod #346 64)) (if (= #643 63) 36893488147419103232 (if #645 18446744073709551616 #769))) 512 := 609&512
lshr: (lshr[64] (* 32 (bv2int %0)) (mod (+ 5 #98 #345) 64)) 1729382256910271073 := 4035225266123968512 >>l 56
(smt.stats   64   9156 161156 399167  9499/9174/437   10483/1011    33  144   24.38)
(smt.stats   65   9413 169264 416404  9804/9279/442   10910/1171    34  152   24.65)
(smt.stats   66   9514 172655 424746  9944/9627/443   11041/1280    35  155   24.65)
(smt.stats   67   9625 177622 435554  9994/9669/444   11160/1282    35  155   24.84)
ramon: poll                 wall=15.000s usage=14.924s mem=26396KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions   :clauses/bin/units            :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   68   9747 184025 452742 10092/9740/444   11296/1283    35  155   24.84)
(smt.stats   69   9881 191109 461600 10093/9809/444   11435/1304    36  155   24.84)
(smt.delete-inactive-clauses  :num-deleted-clauses 3)
(smt.stats   70  10028 195274 478795 10128/9823/444   11815/1305    36  155   24.93)
ramon: poll                 wall=16.004s usage=15.928s mem=26652KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.924s mem=26652KiB load=1.00 rootload=1.00
(smt.stats   71  10189 200373 493994 10396/9884/444   12105/1309    36  155   25.12)
(smt.stats   72  10366 206653 520109 10592/10163/444   12423/1311    36  155   25.22)
ramon: poll                 wall=18.000s usage=17.924s mem=26908KiB load=1.00 rootload=1.00
(smt.stats   73  10560 211823 539826 10688/10385/445   12751/1637    37  161   25.22)
ramon: poll                 wall=19.000s usage=18.924s mem=27164KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions   :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   74  10773 221275 566352 10959/10654/448   13105/1734    38  170   25.42)
ramon: poll                 wall=20.000s usage=19.924s mem=27876KiB load=1.00 rootload=1.00
(smt.stats   75  11007 226989 589244 11207/10922/449   13610/1737    38  170   26.09)
ramon: end                  Fri Nov  1 19:08:05 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.020s
ramon: group.total          19.998s
ramon: group.utime          19.974s
ramon: group.stime          0.024s
ramon: group.mempeak        28132KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.074s
ramon: loadavg              1.00
