ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:22:23 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         41488 MiB
ramon: sys.mem.avail        61711 MiB
ramon: sys.nprocs           1255
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/TeQ2ppZDL9UA.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2974694
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&1
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&1
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&36028797018963967
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&2
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&2
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&1
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&1
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&4
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&4
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&8
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&4
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&9
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&8
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&16
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&16
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&32
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&32
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&64
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&128
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&16
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&16
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&32
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&32
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&64
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&256
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&32
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 36028797018963967&64
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 64 := 36028797018963967&65
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 64 := 36028797018963967&68
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 64 := 36028797018963967&68
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 67 := 36028797018963967&68
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 66 := 36028797018963967&68
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 64 := 36028797018963967&68
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 64 := 36028797018963967&68
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 67 := 36028797018963967&68
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 66 := 36028797018963967&68
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 64 := 36028797018963967&68
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 65 := 36028797018963967&69
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 68 := 36028797018963967&69
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 64 := 36028797018963967&65
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 128 := 36028797018963967&256
(smt.stats    0    101   4277    547  1375/1242/225      86/16    12   46   19.69)
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 256 := 36028797018963967&1024
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 512 := 36028797018963967&1024
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 512 := 36028797018963967&1024
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 1024 := 36028797018963967&36028797018963200
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 1024 := 36028797018963967&36028797018962944
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 1024 := 36028797018963967&36028797018962944
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 512 := 36028797018963967&1024
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4096 := 36028797018963967&5120
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 1024 := 36028797018963967&4096
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 2048 := 36028797018963967&4096
(smt.stats    1    202   4640    778  2619/2338/230     213/27    13   47   20.18)
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4096 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4096 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4352 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4352 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 66304 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 66304 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 66304 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 65280 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 13056 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 13056 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 21403 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 21248 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 23296 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 33536 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 33536 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 37632 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 7067 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 7066 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 7064 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 6912 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 7056 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 7056 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 7056 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 7040 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 6912 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&70400
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&136192
(smt.stats    2    313   6219   3243  3041/2795/353     657/181    16   74   20.47)
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&136192
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&136192
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4864 := 36028797018963967&136192
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4608 := 36028797018963967&136192
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4224 := 36028797018963967&136192
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4096 := 36028797018963967&136192
(smt.stats    3    414   7786   4832  3114/2873/357     853/211    17   75   20.66)
(smt.stats    4    525  10339   9533  3212/2956/364    1190/356    20   98   20.75)
ramon: poll                 wall=1.000s usage=0.931s mem=22040KiB load=0.93 rootload=0.92
ramon: poll                 wall=2.000s usage=1.929s mem=22164KiB load=1.00 rootload=1.00
ramon: poll                 wall=3.000s usage=2.929s mem=22164KiB load=1.00 rootload=1.00
(smt.stats    5    647  12267  11955  3333/2999/365    1390/468    22  100   20.95)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations          :lemmas         :deletions     )
(smt.stats    6    748  16345  18956  3499/3161/365    1516/470    22  100   21.04)
(smt.stats    7    859  22307  28797  3543/3280/365    1638/470    22  100   21.04)
(smt.stats    8    981  27309  40109  3586/3339/367    1883/587    23  103   21.14)
(smt.stats    9   1115  36779  60419  3592/3344/367    2118/600    24  104   21.23)
(smt.stats   10   1216  44101  76798  3596/3347/367    2224/600    24  104   21.34)
(smt.stats   11   1327  53062  97217  3601/3352/367    2370/600    24  104   21.34)
(smt.stats   12   1449  59729 114558  3611/3364/368    2557/702    25  110   21.52)
(smt.stats   13   1583  68356 138168  3615/3366/375    2735/722    26  115   21.52)
(smt.stats   14   1730  78416 168041  3616/3369/375    2890/768    27  139   21.52)
(smt.stats   15   1831  83411 183292  3626/3377/375    3018/768    27  139   21.52)
(smt.stats   16   1942  89281 201422  3629/3380/377    3132/825    28  145   21.52)
(smt.stats   17   2064  95085 220048  3648/3386/379    3291/827    29  159   21.79)
ramon: poll                 wall=4.000s usage=3.928s mem=22992KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   18   2198 102096 242691  3658/3408/379    3435/855    30  161   21.79)
(smt.stats   19   2345 110497 271933  3658/3408/379    3606/855    30  161   21.79)
(smt.stats   20   2506 117434 296658  3666/3416/380    4014/994    31  164   21.79)
(smt.stats   21   2607 122352 313601  3666/3416/380    4115/994    31  164   21.79)
(smt.stats   22   2718 128825 334146  3667/3417/380    4225/994    31  164   21.79)
(smt.stats   23   2840 135867 356226  3667/3417/380    4354/994    31  164   21.79)
(smt.stats   24   2974 143784 380804  3667/3417/381    4552/1135    32  167   21.89)
(smt.stats   25   3121 151367 408372  3670/3419/382    4763/1135    33  169   21.89)
(smt.stats   26   3282 159282 435736  3683/3427/382    4931/1135    33  169   21.89)
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 3&169984
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #874 #878) 64)) 36028797019133952 := 216 << 1
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 3&169984
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #874 #878) 64)) 169984 := 216 << 1
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 3&432
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 1 := 108 << 2
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 3&432
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 2 := 108 << 2
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 3&432
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 2 := 108 << 2
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 3&432
shl: (shl[55] (bv2int %0) (+ 55 (* 36028797018963967 #116))) 2 := 108 << 2
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 1 := 3&432
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 2 := 3&432
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 3&432
band: (band[55] (if (= #120 54) 1 (if #633 3 #787)) (shl[55] (bv2int %0) (+ 55 #790))) 1 := 3&432
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 0 := 3&432
band: (band[55] (if (= #120 54) 1 (if #633 3 #787)) (shl[55] (bv2int %0) (+ 55 #790))) 2 := 3&432
(smt.stats   27   3459 162872 447145  3760/3502/416    5149/1217    34  169   21.99)
(smt.stats   28   3560 164051 457636  3825/3545/422    5359/1240    35  185   22.38)
ramon: poll                 wall=5.000s usage=4.928s mem=24336KiB load=1.00 rootload=1.00
(smt.stats   29   3671 165220 462373  4001/3654/422    5526/1244    35  185   22.75)
(smt.stats   30   3793 167025 471822  4122/3729/422    5682/1350    36  187   22.85)
ramon: poll                 wall=6.000s usage=5.925s mem=24348KiB load=1.00 rootload=0.99
(smt.stats   31   3927 168762 475622  4328/3868/423    5840/1355    36  187   22.94)
(smt.stats   32   4074 171130 487659  4450/4058/428    6070/1385    37  194   23.04)
(smt.stats   33   4235 177248 515176  4515/4205/430    6343/1430    38  211   23.24)
ramon: poll                 wall=7.000s usage=6.925s mem=24684KiB load=1.00 rootload=1.00
(smt.stats   34   4412 186417 550923  4555/4251/432    6622/1458    40  226   23.33)
(smt.stats   35   4606 196081 575559  4581/4273/432    6903/1460    40  226   23.56)
(smt.stats   36   4707 199278 581761  4727/4309/432    7085/1468    40  226   23.75)
ramon: poll                 wall=8.000s usage=7.925s mem=25564KiB load=1.00 rootload=1.00
(smt.stats   37   4818 201841 589423  4898/4476/432    7228/1481    40  226   23.84)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   38   4940 205983 609365  4933/4642/435    7516/1621    41  227   23.84)
(smt.delete-inactive-clauses  :num-deleted-clauses 126)
(smt.stats   39   5074 212786 635674  4945/4651/435    7734/1621    41  227   23.84)
(smt.stats   40   5221 222357 646141  5070/4660/439    7989/1763    42  230   23.94)
ramon: poll                 wall=9.000s usage=8.924s mem=25580KiB load=1.00 rootload=1.00
(smt.stats   41   5382 230376 660633  5324/5031/444    8364/1818    43  250   24.13)
(smt.stats   42   5559 236534 680494  5336/5046/447    8754/1880    44  261   24.13)
ramon: poll                 wall=10.000s usage=9.924s mem=25584KiB load=1.00 rootload=1.00
(smt.stats   43   5753 242037 707065  5482/5048/447    9202/1904    45  266   24.13)
(smt.stats   44   5966 250963 729098  5585/5249/449    9812/1963    46  269   24.44)
(smt.stats   45   6067 253379 733667  5697/5377/449    9978/2082    47  276   24.44)
(smt.stats   46   6178 261390 750923  5717/5392/449   10208/2082    47  276   24.44)
ramon: poll                 wall=11.000s usage=10.924s mem=25976KiB load=1.00 rootload=1.00
(smt.stats   47   6300 268983 765674  5806/5414/449   10564/2084    47  276   24.54)
(smt.stats   48   6434 277173 779228  5876/5564/451   10986/2209    48  278   24.54)
(smt.stats   49   6581 285628 791950  5984/5582/454   11328/2210    48  278   24.65)
ramon: poll                 wall=12.000s usage=11.924s mem=26156KiB load=1.00 rootload=1.00
(smt.stats   50   6742 292769 815314  6328/5714/454   11633/2311    49  290   24.94)
ramon: poll                 wall=13.000s usage=12.923s mem=26360KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.923s mem=26392KiB load=1.00 rootload=1.00
(smt.stats   51   6919 301131 841856  6500/6025/454   11938/2312    49  290   24.94)
ramon: poll                 wall=15.000s usage=14.923s mem=26432KiB load=1.00 rootload=1.00
(smt.stats   52   7113 305050 862062  6585/6219/454   12550/2312    49  290   25.13)
ramon: poll                 wall=16.000s usage=15.921s mem=26904KiB load=1.00 rootload=0.99
ramon: poll                 wall=17.000s usage=16.920s mem=26908KiB load=1.00 rootload=1.00
(smt.stats   53   7326 311377 886213  6822/6322/455   13159/2531    50  299   25.22)
ramon: poll                 wall=18.000s usage=17.920s mem=26936KiB load=1.00 rootload=1.00
(smt.stats   54   7560 315275 903163  7103/6786/456   13626/2586    51  312   25.32)
(smt.stats   55   7661 317977 924664  7122/6805/458   13821/2587    51  312   25.32)
(smt.stats   56   7772 323111 956408  7130/6816/460   14049/2614    52  338   25.32)
(smt.stats   57   7894 328727 987035  7137/6821/461   14455/2614    52  338   25.42)
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 63 := 63&63
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 54 #874 #878) 64)) 252201579132747839 := 98 << 5
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   58   8028 330888 995237  7213/6830/464   14807/2626    53  370   25.61)
(smt.stats   59   8175 334591 1011402  7496/7027/469   15222/2628    53  370   25.80)
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 4 := 63&36028797018958720
(smt.stats   60   8336 338980 1047618  7712/7369/471   15919/2819    55  378   25.90)
(smt.stats   61   8513 341517 1063218  7764/7393/472   16288/2819    55  378   25.99)
ramon: poll                 wall=19.000s usage=18.920s mem=27520KiB load=1.00 rootload=1.00
(smt.stats   62   8707 345803 1085915  7864/7504/473   16963/2965    56  380   26.09)
(smt.stats   63   8920 351542 1131070  8089/7561/473   17812/2967    56  380   26.19)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   64   9154 357932 1183885  8173/7816/475   18696/3041    57  381   26.39)
band: (band[55] (if (= #411 63) 1 (if #613 3 #867)) (shl[64] (* 2 #114) (mod #882 64))) 8 := 31&497152
(smt.stats   65   9411 364928 1218796  8624/7841/475   19648/3048    57  381   26.85)
ramon: poll                 wall=20.000s usage=19.920s mem=28400KiB load=1.00 rootload=1.00
(smt.stats   66   9512 367223 1230057  8647/8297/475   20547/3098    58  381   26.85)
ramon: end                  Tue Dec 24 15:22:43 2024
ramon: root.execname        z3
ramon: root.utime           19.980s
ramon: root.stime           0.010s
ramon: group.total          19.994s
ramon: group.utime          19.982s
ramon: group.stime          0.012s
ramon: group.mempeak        28656KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.073s
ramon: loadavg              1.00
