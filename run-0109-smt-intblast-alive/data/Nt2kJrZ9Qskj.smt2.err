ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:11:06 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         41775 MiB
ramon: sys.mem.avail        61712 MiB
ramon: sys.nprocs           1257
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/Nt2kJrZ9Qskj.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2936714
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.79)
(smt.stats    0    101   5911    787  1212/1074/107      98/13     4   19   19.34)
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 3&1
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 3&1
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 4&1
shl: (shl[64] (bv2int %0) (mod (+ #114 #765) 64)) 4 := 2 << 2
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 562949953421311 := 2 << 2
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
shl: (shl[64] (bv2int %0) (mod (+ #114 #765) 64)) 8 := 2 << 2
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 562949953421311 := 2 << 2
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
shl: (shl[64] (bv2int %0) (mod (+ #114 #765) 64)) 8 := 2 << 2
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 562949953421311 := 2 << 2
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 1 := 8&1
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 9&1
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 10&1
shl: (shl[64] (bv2int %0) (mod (+ #114 #765) 64)) 10 := 2 << 2
(smt.stats    1    203   8665   4789  2140/1894/108     199/19     5   21   19.55)
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 9 := 2 << 2
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
band: (band[49] (shl[49] (bv2int %0) (mod #114 49)) (if (= #618 48) 0 (if #620 1 #755))) 1 := 8&1
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 7 := 2 << 2
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
band: (band[49] (shl[49] (bv2int %0) (mod #114 49)) (if (= #618 48) 0 (if #620 1 #755))) 1 := 8&1
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
band: (band[49] (shl[49] (bv2int %0) (mod #114 49)) (if (= #618 48) 0 (if #620 1 #755))) 1 := 8&1
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
band: (band[49] (shl[49] (bv2int %0) (mod #114 49)) (if (= #618 48) 0 (if #620 1 #755))) 1 := 8&1
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 0 := 8&1
band: (band[49] (shl[49] (bv2int %0) (mod #114 49)) (if (= #618 48) 0 (if #620 1 #755))) 1 := 8&1
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 1 := 8&1
(smt.stats    2    314  12332  11292  2420/1999/123     313/48     6   24   19.76)
(smt.stats    3    415  14154  14404  2442/2199/148     436/50     8   31   19.95)
(smt.stats    4    527  15129  16604  2557/2293/173     498/78    12   64   20.04)
ramon: poll                 wall=1.000s usage=0.911s mem=21648KiB load=0.91 rootload=0.90
(smt.stats    5    649  16168  17971  2641/2294/173     631/84    12   64   20.71)
ramon: poll                 wall=2.000s usage=1.906s mem=22112KiB load=0.99 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas       :deletions     )
(smt.stats    6    752  18287  20364  2899/2625/175     730/98    14  116   20.62)
ramon: poll                 wall=3.000s usage=2.899s mem=22184KiB load=0.99 rootload=1.00
(smt.stats    7    863  20311  21400  2982/2649/175     866/102    14  116   20.71)
(smt.stats    8    985  22211  24157  3057/2791/183    1041/136    16  122   20.71)
(smt.stats    9   1119  25005  30058  3083/2796/191    1214/145    16  122   20.82)
(smt.stats   10   1220  27605  34331  3151/2840/191    1389/157    17  171   20.82)
(smt.stats   11   1331  29624  38496  3158/2896/191    1526/157    17  171   20.92)
ramon: poll                 wall=4.000s usage=3.898s mem=22164KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1453  31557  44322  3180/2901/191    1674/158    17  171   20.92)
(smt.stats   13   1587  35799  50127  3221/2930/192    1817/192    18  174   21.04)
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 264 := 72313030766558&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 264 := 72313030766558&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 264 := 72313030766560&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 256 := 72313030766560&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 4 := 72313030766560&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 4 := 72313030766560&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 16 := 72313030766560&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 32 := 72313030766560&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 64 := 72313030766560&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313030766592&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313030766594&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313030766594&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313030770690&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313030770690&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313030836226&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313030836226&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313038962690&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313038962690&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313038962690&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313290620930&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313290620930&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72314364362754&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313307414658&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313307414786&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313307414786&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313324175362&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313324175362&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72313324175362&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72314364362754&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72314364362754&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72327249264642&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72327249265154&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72327249265154&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72327249265154&72313030766555
(smt.stats   14   1734  38982  56074  3421/3113/314    2026/210    19  183   21.26)
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72327249264958&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 2 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 64 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 66 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 130 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 66 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 262 := 72327249264898&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264906&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264914&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264906&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264914&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264914&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264914&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264946&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72327249264930&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72018548490498&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72018549014786&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72018549015810&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72018549015810&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72018549016834&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72018549016834&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72018549016834&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72018549016834&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 72018549018882&72313030766555
(smt.stats   15   1835  41380  64396  3638/3179/360    2249/259    20  203   21.81)
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 1103806595330&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 1100585373954&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 1100585370882&72313030766555
band: (band[49] (shl[64] (bv2int %0) (mod #766 64)) (if (or #781 #782) 0 (if #783 1 #918))) 258 := 1100585390338&72313030766555
(smt.stats   16   1946  42525  68626  3914/3375/431    2502/275    21  224   22.00)
(smt.stats   17   2068  47808  77074  3975/3712/446    2675/384    23  238   22.09)
ramon: poll                 wall=5.000s usage=4.898s mem=23988KiB load=1.00 rootload=0.99
ramon: poll                 wall=6.002s usage=5.898s mem=24120KiB load=1.00 rootload=1.00
(smt.stats   18   2202  53372  83412  4249/3730/446    2920/394    24  238   22.47)
(smt.stats   19   2349  61300  99433  4426/4020/446    3113/395    24  238   22.68)
ramon: poll                 wall=7.000s usage=6.891s mem=24124KiB load=0.99 rootload=0.99
(smt.stats   20   2510  65265 114038  4528/4243/449    3786/559    26  245   22.98)
(smt.stats   21   2611  71059 122612  4530/4245/449    3992/559    26  245   23.10)
(smt.stats   22   2722  76264 140994  4535/4250/450    4218/700    27  252   23.10)
(smt.stats   23   2844  86342 171824  4539/4254/451    4339/709    28  254   23.32)
ramon: poll                 wall=8.000s usage=7.888s mem=25036KiB load=1.00 rootload=1.00
(smt.stats   24   2978  94398 189829  4571/4257/452    4688/710    29  259   23.41)
(smt.stats   25   3125 101399 212585  4667/4290/456    4979/713    29  259   23.51)
ramon: poll                 wall=9.000s usage=8.887s mem=24840KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.885s mem=25116KiB load=1.00 rootload=0.99
(smt.stats   26   3286 106403 218906  4958/4422/456    5192/912    30  274   23.51)
ramon: poll                 wall=11.000s usage=10.885s mem=25236KiB load=1.00 rootload=1.00
(smt.stats   27   3463 110525 228827  5443/4870/456    5536/912    30  274   23.70)
(smt.stats   28   3564 114494 240184  5525/5196/456    5713/912    30  274   23.70)
ramon: poll                 wall=12.000s usage=11.884s mem=25412KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   29   3675 118185 251337  5729/5327/457    5917/1040    31  275   23.81)
ramon: poll                 wall=13.000s usage=12.884s mem=25460KiB load=1.00 rootload=1.00
(smt.stats   30   3797 122092 264804  5979/5501/457    6198/1047    31  275   23.90)
(smt.stats   31   3931 127555 277004  6023/5727/457    6416/1047    31  275   24.00)
ramon: poll                 wall=14.000s usage=13.883s mem=26044KiB load=1.00 rootload=1.00
(smt.stats   32   4078 132752 289495  6092/5794/458    6849/1188    32  275   24.09)
ramon: poll                 wall=15.000s usage=14.883s mem=25844KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.882s mem=25844KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.881s mem=25844KiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.879s mem=25848KiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.879s mem=25848KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.877s mem=25848KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 15:11:26 2024
ramon: root.execname        z3
ramon: root.utime           19.910s
ramon: root.stime           0.010s
ramon: group.total          19.935s
ramon: group.utime          19.919s
ramon: group.stime          0.016s
ramon: group.mempeak        26104KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.056s
ramon: loadavg              0.99
