ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:46:39 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         40875 MiB
ramon: sys.mem.avail        61709 MiB
ramon: sys.nprocs           1258
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/iganwLMonOUr.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3053898
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   2336    698  1221/1101/107      98/46     5   21   19.18)
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 29&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 29&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 30&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 29&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 30&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 32&78353561
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 32 := 28 << 28
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 29&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 30&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 32&78353561
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 32 := 28 << 28
(smt.stats    1    202   4390   1687  2275/2064/119     205/73     7   25   19.47)
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192769&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 7516192768 := 28 << 28
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 549755813887 := 28 << 28
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 78353560 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 2 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 78353561 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 4 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 8 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 16 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 16 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 32 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 64 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 128 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 128 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 256 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 512 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 1024 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 2048 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 4096 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 8192 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 16384 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 32768 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 65536 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192769&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192770&78353561
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 7516192770 := 28 << 28
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 7516192769 := 28 << 28
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 128 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 128 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 256 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 131072 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 262144 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 524288 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 1048576 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 2097152 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 4194304 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 8388608 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 16777216 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 16777216 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 33554432 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 67108864 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 16777216 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 33554432 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 67108864 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 67108864 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 67108864 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 67108864 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 67108864 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 33554432 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 33554432 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 524288 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 8388608 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 131072 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 77824 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 77824 := 7516192768&78353561
(smt.stats    2    313   6599   3786  2491/2177/223     436/94     9   46   20.16)
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 1 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 76832 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 76832 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 76832 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 76816 := 7516192768&78353561
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 7516192768&78353561
band: (band[39] (shl[39] (bv2int %0) (mod #114 39)) (if (= #588 38) 0 (if #590 1 #695))) 76815 := 7516192768&78353561
(smt.stats    3    414   8664   7156  2675/2313/326     620/162    11   71   20.55)
(smt.stats    4    525  12197  11062  2764/2546/349     769/309    18  102   20.55)
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 67108862&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 0&1253656988
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 21032008171913216 := 71 << 32
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 0&1253656988
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 21032008171913216 := 71 << 32
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 0&1253656988
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 21032008171913216 := 71 << 32
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 0&1253656988
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 21032008171913216 := 71 << 32
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 0&1253656988
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 21032008171913216 := 71 << 32
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 1253656988 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 1253656988 := 304942678015&1253656988
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 304942678015 := 71 << 32
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 1253656988 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 1253656988 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 1253656984 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 304942678016&1253656988
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 72 := 71 << 32
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 304942678016&1253656988
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 72 := 71 << 32
(smt.stats    5    647  16299  17875  2870/2616/355     905/330    21  108   20.75)
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 1253656980 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 4 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 4 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 2 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 304942678016&1253656988
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 305076895744 := 71 << 32
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 16 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 32 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 64 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 128 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 256 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 512 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 1024 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 2048 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 4096 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 8192 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 4096 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 8192 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 16384 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 32768 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 65536 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 131072 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 131072 := 304942678016&1253656988
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 131072 := 304942678016&1253656988
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations          :lemmas         :deletions     )
(smt.stats    6    748  18292  19605  2977/2735/448    1085/334    23  128   21.36)
(smt.stats    7    859  18724  20259  3263/2854/458    1410/334    23  128   21.55)
ramon: poll                 wall=1.000s usage=0.916s mem=23148KiB load=0.92 rootload=0.89
(smt.stats    8    981  22158  28187  3471/3218/463    1736/395    25  132   21.84)
(smt.stats    9   1115  24711  30868  3643/3284/463    2077/458    26  138   22.03)
ramon: poll                 wall=2.000s usage=1.916s mem=23328KiB load=1.00 rootload=1.00
(smt.stats   10   1216  25084  32054  3957/3532/463    2224/464    26  138   22.13)
(smt.stats   11   1327  27038  36720  4222/3937/464    2412/741    27  138   22.31)
ramon: poll                 wall=3.000s usage=2.915s mem=24028KiB load=1.00 rootload=1.00
(smt.stats   12   1449  30638  47963  4271/4041/469    3301/839    29  148   22.41)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions     )
(smt.stats   13   1583  39441  62854  4316/4080/475    3933/1725    32  160   22.69)
(smt.stats   14   1730  52155  67759  4427/4172/475    4087/1741    33  165   22.69)
(smt.stats   15   1831  60124  79049  4435/4180/475    4231/1741    33  165   23.09)
(smt.stats   16   1942  68655  98025  4441/4186/478    4452/1800    36  190   23.09)
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 262146&0
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 21034756951244802 := 68719476736 << 1
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 2&0
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 21034756950982658 := 68719476736 << 1
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 427885854722&0
shl: (shl[64] (bv2int %0) (mod (+ #114 #705) 64)) 1152922482248515586 := 68719476736 << 1
(smt.stats   17   2064  77121 117258  4474/4192/480    4709/1811    37  193   23.19)
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 137438953472&0
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 427886116865 := 68719476736 << 1
band: (band[39] (shl[64] (bv2int %0) (mod #706 64)) (if (or #721 #722) 0 (if #723 1 #868))) 0 := 137438953472&0
shl: (shl[39] (bv2int %0) (mod (bv2int %0) 39)) 427886116865 := 68719476736 << 1
(smt.stats   18   2198  80657 133408  4536/4271/496    4898/1863    39  205   23.31)
(smt.stats   19   2345  89040 165126  4824/4480/501    5239/1884    41  214   23.60)
(smt.stats   20   2506  95502 187347  4872/4546/507    6356/2005    43  237   23.88)
ramon: poll                 wall=4.000s usage=3.915s mem=25324KiB load=1.00 rootload=1.00
(smt.stats   21   2607 101857 196475  4942/4551/507    6781/2015    43  237   24.11)
ramon: poll                 wall=5.000s usage=4.914s mem=25668KiB load=1.00 rootload=1.00
(smt.stats   22   2718 109843 208641  5096/4717/508    7217/2339    45  248   24.21)
ramon: poll                 wall=6.000s usage=5.914s mem=25900KiB load=1.00 rootload=1.00
(smt.stats   23   2840 117296 223734  5339/4799/508    7576/2347    45  248   24.40)
(smt.stats   24   2974 123143 239929  5537/5160/510    8211/2491    46  249   24.59)
ramon: poll                 wall=7.000s usage=6.914s mem=26104KiB load=1.00 rootload=1.00
(smt.stats   25   3121 130855 250920  5653/5226/510    8932/2542    47  252   24.68)
ramon: poll                 wall=8.000s usage=7.913s mem=26448KiB load=1.00 rootload=0.99
(smt.stats   26   3282 140103 268436  5906/5409/511    9438/2657    48  256   24.97)
ramon: poll                 wall=9.000s usage=8.913s mem=26532KiB load=1.00 rootload=1.00
(smt.stats   27   3459 147057 286288  6075/5593/511   10117/2664    48  256   25.07)
(smt.stats   28   3560 150736 293221  6142/5782/511   10586/2666    48  256   25.16)
ramon: poll                 wall=10.000s usage=9.913s mem=26740KiB load=1.00 rootload=1.00
(smt.stats   29   3671 155300 303150  6205/5839/511   10850/2671    48  256   25.26)
(smt.stats   30   3793 161098 319379  6308/5962/513   11385/2911    49  269   25.34)
(smt.stats   31   3927 167370 352617  6341/6015/516   12494/3009    50  301   25.43)
ramon: poll                 wall=11.000s usage=10.913s mem=27268KiB load=1.00 rootload=1.00
(smt.stats   32   4074 175092 366538  6353/6019/516   12866/3009    50  301   25.53)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   33   4235 187643 409514  6408/6052/516   13669/3012    50  301   25.65)
(smt.stats   34   4412 195655 448296  6636/6310/518   14176/3282    51  302   25.84)
(smt.stats   35   4606 205808 474612  6700/6315/518   14832/3282    51  302   25.94)
ramon: poll                 wall=12.000s usage=11.913s mem=27472KiB load=1.00 rootload=1.00
(smt.stats   36   4707 212883 484261  6796/6402/518   15083/3432    52  316   25.94)
(smt.stats   37   4818 218316 497954  6894/6524/518   15346/3443    52  316   26.03)
(smt.stats   38   4940 225313 536279  6926/6598/518   16346/3443    52  316   26.03)
(smt.delete-inactive-clauses  :num-deleted-clauses 1210)
(smt.stats   39   5074 231698 556274  6985/6606/519   16210/3664    53  318   26.33)
ramon: poll                 wall=13.000s usage=12.912s mem=27848KiB load=1.00 rootload=1.00
(smt.stats   40   5221 237362 577167  7329/6744/519   16688/3668    53  318   26.42)
ramon: poll                 wall=14.000s usage=13.912s mem=27932KiB load=1.00 rootload=1.00
(smt.stats   41   5382 246123 603438  7677/7067/519   17667/3674    53  318   26.70)
(smt.stats   42   5559 255298 647564  7728/7402/522   19864/3997    54  318   26.89)
ramon: poll                 wall=15.000s usage=14.912s mem=28516KiB load=1.00 rootload=1.00
(smt.stats   43   5753 266303 696990  7850/7524/524   21397/4447    56  342   27.18)
ramon: poll                 wall=16.000s usage=15.911s mem=28776KiB load=1.00 rootload=1.00
(smt.stats   44   5966 273247 721541  8174/7543/526   22873/4461    56  342   27.37)
(smt.stats   45   6067 278384 732282  8223/7857/526   23502/4463    56  342   27.46)
ramon: poll                 wall=17.000s usage=16.911s mem=29012KiB load=1.00 rootload=1.00
(smt.stats   46   6178 284930 756806  8361/7930/526   23935/4753    57  343   27.56)
ramon: poll                 wall=18.000s usage=17.911s mem=29164KiB load=1.00 rootload=1.00
(smt.stats   47   6300 294575 806432  8423/8086/526   25043/4754    57  343   27.66)
(smt.stats   48   6434 301560 834263  8508/8114/526   26106/4757    57  343   27.85)
ramon: poll                 wall=19.000s usage=18.911s mem=29576KiB load=1.00 rootload=1.00
(smt.stats   49   6581 308319 864072  8568/8201/526   27400/4759    57  343   27.94)
ramon: poll                 wall=20.000s usage=19.911s mem=29592KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 15:46:59 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.020s
ramon: group.total          19.980s
ramon: group.utime          19.956s
ramon: group.stime          0.024s
ramon: group.mempeak        29848KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.069s
ramon: loadavg              1.00
