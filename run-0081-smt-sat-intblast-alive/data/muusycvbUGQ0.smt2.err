ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:08:09 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28111 MiB
ramon: sys.mem.avail        62089 MiB
ramon: sys.nprocs           1354
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/muusycvbUGQ0.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             531486
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   111/109     0/0  58       0    18.45   0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 117 :time 0.00)
(sat.stats    400   3196    0   110/108   399/396  65       0    18.64   0.01)
(sat.stats    400   3196    0   110/108   399/396  65       0    18.64   0.01)
(sat.stats    400   3196    0   110/108   399/396  65       0    18.64   0.01)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 2 :time 0.00)
 (sat-probing :cost 425818.64 :time 0.00)
(sat.stats    400   3196    0   112/110   408/406  65       0    18.64   0.01)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 110 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 116 :time 0.00)
(sat.stats    488   3732    1   117/115   490/480  71       0    18.74   0.03)
(sat.stats :conflicts    :restarts     :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    491   3823    2   126/123   493/480  71       0    18.74   0.03)
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 11 := 11 << 26
(sat.stats    494   3852    3   139/135   496/480  71       0    18.74   0.03)
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 175 :time 0.00)
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&738197504
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 22 := 22 << 25
(sat.stats    497   3892    4   148/144   497/479  74       0    18.85   0.03)
(sat.stats    500   3901    5   152/148   500/480  74       0    18.85   0.03)
(sat.stats    503   3915    6   155/151   503/481  74       0    18.85   0.04)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 207 :time 0.00)
(sat.stats    507   3946    7   162/157   507/482  77       0    18.85   0.04)
(sat.stats    510   3964    8   167/162   510/482  77       0    18.95   0.04)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 245 :time 0.00)
(sat.stats    513   3991    9   168/163   513/482  78       0    18.95   0.04)
(sat.stats    518   4011   10   168/163   518/482  78       0    18.95   0.04)
(sat.stats    521   4059   11   168/163   521/482  78       0    18.95   0.04)
(sat.stats    524   4092   12   172/167   524/483  78       0    18.95   0.04)
(sat.stats    528   4232   13   187/182   528/483  78       0    18.95   0.05)
(sat.stats    531   4241   14   207/202   531/483  78       0    18.95   0.06)
(sat.stats    534   4250   15   233/228   534/483  78       0    19.04   0.06)
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 522 :time 0.00)
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 1&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 3 := 0 << 36
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 1 << 36
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&68719476736
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 68719476737 := 2 << 35
 (sat-cleaner :elim-literals 13 :elim-clauses 2 :cost 986 :time 0.00)
(sat.stats    759   8706   37   820/811   751/543  92       0    19.33   0.15)
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 268437403 << 2
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 2393 :time 0.00)
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&536879388
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 9223517653425979392 := 68987916430 << 1
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 2484 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 2814 :time 0.00)
(sat.stats :conflicts  :restarts       :learned/bin         :gc          :time)
(sat.stats      :decisions    :clauses/bin       :units         :memory       )
(sat.stats   1066  21230  101  3346/3333  1066/576 101       0    20.06   0.67)
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 4226941059 := 10 << 27
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&1342177280
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 40 := 20 << 26
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 268435456 := 2 << 35
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&68719476736
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 8 := 4 << 34
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 34359738368 := 9 << 28
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&2415919104
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 36 := 18 << 27
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 4226934996 := 5 << 32
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&21474836480
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 20 := 10 << 31
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 30064771072 := 7 << 30
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&7516192768
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 28 := 14 << 29
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 6442450944 := 6 << 31
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&12884901888
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 24 := 12 << 30
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 6442450944 := 3 << 34
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&51539607552
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 12 := 6 << 33
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 3023 := 4 << 33
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&34359738368
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 16 := 8 << 32
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 68719476736 := 8 << 29
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&4294967296
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 32 := 16 << 28
(sat.stats   1597  40719  219  4026/3997  1617/742 102       0    20.75   0.88)
ramon: poll                 wall=1.000s usage=0.931s mem=22012KiB load=0.93 rootload=0.92
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 2080374784 := 31 << 6
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 2013265920 := 30 << 7
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 29 << 8
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 33 << 4
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 19 << 18
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 17 << 20
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 27 << 10
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 23 << 14
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 21 << 16
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 25 << 12
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 15 << 22
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 16 << 21
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 24 << 13
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 22 << 15
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 20 << 17
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 18 << 19
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 26 << 11
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 28 << 9
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 34 << 3
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 32 << 5
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 12 << 25
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 14 << 23
shl: (shl[37] (bv2int %0) (+ 37 (* 137438953471 #78))) 0 := 13 << 24
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&1024
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 128 := 64 << 4
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&272
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 136 := 68 << 2
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&528
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 132 := 66 << 3
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&1984
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 124 := 62 << 5
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&2621440
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 80 := 40 << 16
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&720896
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 88 := 44 << 14
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&7424
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 116 := 58 << 7
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&3840
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 120 := 60 << 6
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&402653184
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 48 := 24 << 24
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&117440512
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 56 := 28 << 22
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&62914560
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 60 := 30 << 21
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&33554432
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 64 := 32 << 20
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&1376256
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 84 := 42 << 15
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&17825792
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 68 := 34 << 19
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&9437184
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 72 := 36 << 18
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&218103808
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 52 := 26 << 23
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&4980736
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 76 := 38 << 17
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&376832
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 92 := 46 << 13
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&196608
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 96 := 48 << 12
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&14336
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 112 := 56 << 8
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&53248
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 104 := 52 << 10
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&27648
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 108 := 54 << 9
band: (band[37] (if (or #495 #496 #497 #498 #499 #500 #501 #502 #503 #504 #505 #506 #507 #508 #509 #510 ...) 0 1) (shl[37] (bv2int %0) (+ 37 #675))) 0 := 0&102400
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 36 #686 #688) 64)) 100 := 50 << 11
ramon: poll                 wall=2.000s usage=1.930s mem=24736KiB load=1.00 rootload=0.99
 (sat-cleaner :elim-literals 43 :elim-clauses 2 :cost 11704 :time 0.00)
(sat.stats   3083  88400  350  6865/6804  3137/902 310       0    23.28   2.04)
 (sat-cleaner :elim-literals 3 :elim-clauses 0 :cost 12010 :time 0.00)
ramon: poll                 wall=3.000s usage=2.929s mem=25668KiB load=1.00 rootload=1.00
(sat.stats   3614 125996  393  7019/6958  3667/1152 311       0    24.52   3.04)
 (sat-cleaner :elim-literals 1 :elim-clauses 1 :cost 13206 :time 0.00)
 (sat-cleaner :elim-literals 2 :elim-clauses 1 :cost 13555 :time 0.00)
 (sat-cleaner :elim-literals 9 :elim-clauses 0 :cost 13674 :time 0.00)
 (sat-cleaner :elim-literals 3 :elim-clauses 1 :cost 14142 :time 0.00)
 (sat-cleaner :elim-literals 161 :elim-clauses 0 :cost 14361 :time 0.00)
ramon: poll                 wall=4.000s usage=3.929s mem=26016KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 2 :elim-clauses 7 :cost 15172 :time 0.00)
ramon: poll                 wall=5.000s usage=4.928s mem=26880KiB load=1.00 rootload=1.00
(sat.stats   5393 216305  827 11568/11507  4770/1505 317       0    26.42   5.76)
ramon: poll                 wall=6.000s usage=5.927s mem=27948KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 1 :elim-clauses 1 :cost 25845 :time 0.00)
ramon: poll                 wall=7.000s usage=6.926s mem=28392KiB load=1.00 rootload=0.99
ramon: poll                 wall=8.000s usage=7.925s mem=28992KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.924s mem=29416KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.922s mem=29892KiB load=1.00 rootload=0.99
ramon: poll                 wall=11.000s usage=10.922s mem=30620KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 36348 :time 0.00)
(sat.stats   8092 467919 1438 33165/33104  6271/1680 319       0    29.46  11.28)
ramon: poll                 wall=12.000s usage=11.919s mem=30744KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.917s mem=30960KiB load=1.00 rootload=0.99
ramon: poll                 wall=14.000s usage=13.917s mem=31120KiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.916s mem=31300KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.916s mem=32360KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.915s mem=32700KiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.915s mem=33044KiB load=1.00 rootload=1.00
(sat.stats :conflicts  :restarts         :learned/bin          :gc         :time )
(sat.stats     :decisions     :clauses/bin          :units         :memory       )
(sat.stats  14222 1171491 1998 37741/37680  9660/2318 319       0    31.79  18.36)
ramon: poll                 wall=19.000s usage=18.915s mem=33492KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.908s mem=34592KiB load=0.99 rootload=0.99
ramon: end                  Fri Nov  1 21:08:29 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.030s
ramon: group.total          19.985s
ramon: group.utime          19.953s
ramon: group.stime          0.032s
ramon: group.mempeak        36292KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.076s
ramon: loadavg              1.00
