ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:51:48 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29101 MiB
ramon: sys.mem.avail        62087 MiB
ramon: sys.nprocs           1390
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/ACrVRWlTOsfb.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             673346
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(smt.stats    0    101   3091   1843  1183/1060/100      92/4     5   15   51.97)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   133.333     10000        49          0            1        2)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 2&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 6&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 32&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 32&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 64&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 19&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 18&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 16&68719476735
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 16 := 17 << 36
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 16&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 16&68719476735
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 16 := 17 << 36
(sat.ddfw       1      1   62.8994     20001        98          1            1        3)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 5&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 3 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 4&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 4&68719476735
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 4 := 268435456 << 36
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 5&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 6&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 5&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 5 := 7&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 5 := 7&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 5 := 7&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 5 := 7&68719476735
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 7 := 7&68719476735
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281474976710663 := 68987912192 << 36
(smt.stats    1    202   4723   3288  1718/1544/195     193/23    10   38   52.45)
(sat.ddfw       1      1   59.7015     40001       196          2            1        5)
(smt.stats    2    313   6462   4946  1910/1669/195     307/53    10   38   52.56)
(smt.stats    3    414   8514   6533  2185/1988/199     387/72    12   39   52.66)
(smt.stats    4    525  11324   8577  2203/2004/205     438/71    14   99   52.66)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 16&255
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 18446462598732840976 := 281474976706560 << 8
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 16&255
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281474976710672 := 68987912192 << 8
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 8 := 256&255
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 8 := 256&255
(smt.stats    5    647  12851  10149  2353/2064/219     577/98    15  101   52.95)
(sat.ddfw       1      1   49.3421     70001       343          3            1        8)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions     )
(smt.stats    6    748  15042  14094  2756/2521/221     699/132    17  103   53.05)
(smt.stats    7    859  19408  19041  2771/2534/223     808/143    19  106   53.15)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[48] (bv2int %1) (mod (bv2int %0) 48)) 1 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 0 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 0&2199023255551
shl: (shl[48] (bv2int %1) (mod (bv2int %0) 48)) 1 := 0 << 41
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 32 := 64&2199023255551
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 64 := 64&2199023255551
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281474976710720 := 4097 << 41
(smt.stats    8    981  21589  22220  2830/2588/248     977/194    21  119   53.25)
(smt.stats    9   1115  25031  28639  2878/2634/252    1147/226    23  124   53.35)
(sat.ddfw       1      1   42.2833    110001       539          4            1       12)
ramon: poll                 wall=1.003s usage=0.942s mem=55740KiB load=0.94 rootload=0.93
(smt.stats   10   1216  27424  32096  2931/2637/253    1309/239    24  134   53.45)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 2 := 8796093022208&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 8796093022208&131071
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 8796093022208 := 128 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281543696187392 := 4224 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
shl: (shl[64] (bv2int %1) (mod (+ #104 #355) 64)) 281543696187392 := 4224 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
shl: (shl[48] (bv2int %1) (mod (bv2int %0) 48)) 524289 := 524288 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131071 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131070 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131070 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
shl: (shl[48] (bv2int %1) (mod (bv2int %0) 48)) 68719476737 := 524288 << 17
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131071 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131070 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 131068 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 1099494850560&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16 := 1099494850560&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 34 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 32 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 64 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 128 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 256 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 512 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 1024 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 2048 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 4096 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8192 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16384 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 32768 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68736253952&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 65536 := 68736253952&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 128 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 128 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 64 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 64 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 1024 := 68719476736&131071
(smt.stats   11   1327  29196  35819  3073/2786/341    1464/284    25  145   54.24)
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 2048 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 4096 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8192 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16384 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 32768 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 16384 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8192 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 8192 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 32768 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 2048 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 4096 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 6144 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 0 := 68719476736&131071
band: (band[48] (shl[48] (bv2int %1) (mod #104 48)) (if (= #602 47) 1 (if #604 3 #737))) 512 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 1 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 64 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 128 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 256 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 512 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 512 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 1024 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 2048 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 4096 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 8192 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 16384 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 32768 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 65536 := 68719476736&131071
band: (band[48] (shl[64] (bv2int %1) (mod #356 64)) (if (= #756 63) 0 (if #758 1 #896))) 65536 := 68719476736&131071
(smt.stats   12   1449  31766  44063  3212/2952/477    1674/379    28  189   54.63)
(smt.stats   13   1583  32028  46312  3221/2959/477    1807/379    28  189   54.63)
(sat.ddfw       1      1   36.4424    160000       784          5            1       17)
(smt.stats   14   1730  33266  55253  3227/2963/478    1992/376    29  195   54.91)
(smt.stats   15   1831  35456  58435  3368/2976/478    2188/381    29  195   55.01)
(sat.ddfw       1      1   31.1694    220001      1078          6            1       23)
(smt.stats   16   1942  37597  64678  3401/3138/481    2383/439    30  199   55.01)
ramon: poll                 wall=2.003s usage=1.867s mem=57732KiB load=0.92 rootload=0.92
(smt.stats   17   2064  41482  69937  3405/3142/482    2530/439    30  199   55.12)
(smt.stats   18   2198  46584  78942  3468/3146/482    2846/464    31  207   55.41)
(sat.ddfw       1      1   27.7008    290001      1421          7            1       30)
ramon: poll                 wall=3.000s usage=2.817s mem=57740KiB load=0.95 rootload=0.95
(sat.ddfw       1      1   24.0891    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=3.861s mem=57980KiB load=1.04 rootload=1.04
(sat.ddfw       1      1   21.9673    460001      2254          9            1       47)
(smt.stats   19   2345  47640  80555  3774/3328/482    3054/467    31  207   55.70)
ramon: poll                 wall=5.003s usage=4.829s mem=58052KiB load=0.97 rootload=0.97
(sat.ddfw       1      1   20.1329    560001      2745         10            1       57)
(smt.stats   20   2506  49848  88302  4190/3895/488    3465/590    32  213   55.79)
ramon: poll                 wall=6.000s usage=5.798s mem=58572KiB load=0.97 rootload=0.97
(sat.ddfw       1      1   18.4905    670001      3284         11            1       68)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   21   2607  54313 106509  4254/3953/489    3747/793    33  235   55.93)
(smt.stats   22   2718  57607 120901  4448/3969/489    3919/796    33  235   55.93)
(smt.stats   23   2840  62929 139772  4499/4165/489    4206/799    33  235   56.21)
ramon: poll                 wall=7.000s usage=6.787s mem=58656KiB load=0.99 rootload=0.99
(sat.ddfw       1      1   17.1748    790001      3872         12            1       80)
(smt.stats   24   2974  67468 151869  4637/4330/492    4801/905    35  245   56.30)
(smt.stats   25   3121  72574 167003  4680/4334/492    5018/907    35  245   56.40)
(smt.stats   26   3282  80862 189995  4856/4399/492    5445/911    35  245   56.50)
ramon: poll                 wall=8.000s usage=7.789s mem=58944KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   16.0316    920001      4509         13            1       93)
(smt.stats   27   3459  87502 214061  5025/4567/492    6004/917    35  245   56.59)
(smt.stats   28   3560  91796 224736  5102/4720/492    6474/920    35  245   56.69)
ramon: poll                 wall=9.000s usage=8.750s mem=59236KiB load=0.96 rootload=0.96
(smt.stats   29   3671  96205 238763  5342/5035/494    6989/1420    36  254   57.02)
(sat.ddfw       1      1   15.0005   1060001      5196         14            1      108)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   30   3793 104111 273093  5349/5042/496    7345/1420    36  254   57.02)
(smt.stats   31   3927 109604 300827  5381/5052/496    7550/1498    37  274   57.11)
ramon: poll                 wall=10.003s usage=9.721s mem=59540KiB load=0.97 rootload=0.97
(smt.stats   32   4074 114413 324029  5403/5097/499    7893/1641    38  279   57.11)
(smt.stats   33   4235 123405 359518  5448/5142/499    8225/1662    39  286   57.21)
(sat.ddfw       1      1   14.2207   1210001      5931         15            1      123)
(smt.stats   34   4412 133523 396189  5613/5307/504    8603/1809    41  314   57.46)
ramon: poll                 wall=11.000s usage=10.769s mem=60016KiB load=1.05 rootload=1.04
(smt.stats   35   4606 141029 427300  5638/5331/506    9313/1965    42  327   57.80)
(smt.stats   36   4707 144542 442392  5732/5338/506    9453/1970    42  327   57.80)
(sat.ddfw       1      1   13.4082   1370001      6715         16            1      139)
ramon: poll                 wall=12.000s usage=11.769s mem=60184KiB load=1.00 rootload=1.00
(smt.stats   37   4818 150090 462962  5909/5460/506    9712/1970    42  327   57.99)
(smt.stats   38   4940 154159 476948  5959/5653/507    9962/2110    43  342   57.99)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
ramon: poll                 wall=13.000s usage=12.793s mem=60644KiB load=1.02 rootload=1.02
(smt.stats   39   5074 159340 497376  6050/5667/507   10386/2114    43  342   57.99)
(sat.ddfw       1      1   12.7417   1540001      7549         17            1      156)
(smt.stats   40   5221 164388 512294  6155/5761/507   10618/2118    43  342   58.09)
ramon: poll                 wall=14.000s usage=13.869s mem=60644KiB load=1.08 rootload=1.08
(smt.stats   41   5382 169238 543442  6383/6076/510   11018/2289    44  343   58.09)
(smt.stats   42   5559 171201 562851  6502/6174/512   11496/2416    45  358   58.18)
(sat.ddfw       1      1   12.3525   1720001      8431         18            1      174)
(smt.stats   43   5753 174697 577562  6553/6176/512   11921/2417    45  358   58.38)
ramon: poll                 wall=15.000s usage=14.945s mem=60900KiB load=1.08 rootload=1.08
ramon: poll                 wall=16.000s usage=15.989s mem=61096KiB load=1.04 rootload=1.04
(sat.ddfw       1      1   11.8174   1910001      9362         19            1      193)
(smt.stats   44   5966 177397 590258  6829/6501/516   12453/2471    46  372   58.66)
(smt.stats   45   6067 178015 595734  6829/6501/519   12656/2471    46  372   58.66)
(smt.stats   46   6178 183186 618890  6876/6507/519   13147/2476    46  372   58.66)
(smt.stats   47   6300 186585 635331  6926/6571/519   13408/2657    47  403   58.76)
(smt.stats   48   6434 190447 645662  6967/6607/519   13661/2657    47  403   58.76)
(smt.stats   49   6581 190821 653127  6980/6652/519   13871/2657    47  403   58.76)
ramon: poll                 wall=17.000s usage=17.011s mem=61372KiB load=1.02 rootload=1.02
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   50   6742 191773 663542  6983/6655/519   14132/2657    47  403   58.76)
(smt.stats   51   6919 192190 669888  7011/6679/519   14309/2657    47  403   58.76)
(smt.stats   52   7113 192801 678087  7012/6680/520   14551/2803    48  404   58.86)
(smt.stats   53   7326 196660 701344  7020/6684/520   14845/2803    48  404   58.86)
(sat.ddfw       1      1   11.2334   2110001     10343         20            1      214)
ramon: poll                 wall=18.000s usage=17.985s mem=61792KiB load=0.97 rootload=0.98
(smt.stats   54   7560 203950 737561  7060/6714/522   15822/2832    49  415   59.05)
ramon: poll                 wall=19.000s usage=18.861s mem=61956KiB load=0.88 rootload=0.87
(smt.stats   55   7661 209243 759009  7146/6735/522   16210/2994    50  418   59.46)
(smt.stats   56   7772 214025 778458  7196/6850/523   16488/2995    50  418   59.56)
(smt.stats   57   7894 218878 807750  7248/6874/523   16691/3105    51  418   59.56)
(sat.ddfw       1      1   10.6297   2320001     11372         21            1      235)
(smt.stats   58   8029 220413 824548  7302/6956/523   16997/3105    51  418   59.65)
ramon: poll                 wall=20.000s usage=19.814s mem=61748KiB load=0.95 rootload=0.96
ramon: end                  Fri Nov  1 21:52:08 2024
ramon: root.execname        z3
ramon: root.utime           19.830s
ramon: root.stime           0.020s
ramon: group.total          19.864s
ramon: group.utime          19.840s
ramon: group.stime          0.024s
ramon: group.mempeak        62304KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.052s
ramon: loadavg              0.99
