ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Mon Dec 30 12:22:34 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         22049 MiB
ramon: sys.mem.avail        62136 MiB
ramon: sys.nprocs           1211
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/QF_BV_SAT/bin_libsmbclient_vc1225213.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify sls-smt)
ramon: argv                 6 = model_validate=true
ramon: childpid             1336594
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
tabu (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964))
failed to commit (if (and (bvsle bv[4294967295:32] #17843) (not #20073)) (bvadd bv[1:32] (if #17841 bv[0:32] v530956964)) (if (and #9168 #11425) bv[0:32] v530956964)) 1 ev: 0 fix:ffffffff [1, 2[
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw      71      2   129.436     10096         0          0          143     2600)
(sat.ddfw      26      7   93.1963     20068         0          1           63     2743)
(sat.ddfw      16     70   110.839     40019         0          2          136     3177)
(sat.ddfw       4    100   93.8812     70061         0          3           69     3648)
(sat.ddfw       4    813   64.1316    110015         0          4           19     4419)
ramon: poll                 wall=1.000s usage=0.999s mem=22832KiB load=1.00 rootload=0.99
(sat.ddfw       3    538   40.1486    160000         0          5           13     4424)
ramon: poll                 wall=2.000s usage=1.999s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       2    892   27.4474    220000         1          6            8     4449)
ramon: poll                 wall=3.000s usage=2.999s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       2   1025   22.9856    290014         2          7           17     4462)
ramon: poll                 wall=4.000s usage=3.999s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       2   1025   19.8233    370001         2          8           10     4489)
ramon: poll                 wall=5.000s usage=4.998s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       2   1025   17.7461    460009         4          9           10     4517)
ramon: poll                 wall=6.000s usage=5.997s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       2   1025   15.4379    560000         5         10           10     4543)
ramon: poll                 wall=7.000s usage=6.997s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       2   1025   14.4246    670002         9         11           17     4562)
ramon: poll                 wall=8.000s usage=7.997s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       2   1025   13.4286    790000        10         12            9     4626)
ramon: poll                 wall=9.000s usage=8.995s mem=22832KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.995s mem=22832KiB load=1.00 rootload=1.00
ramon: poll                 wall=11.000s usage=10.995s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       1    629   11.1073    920000        11         13            2     4640)
ramon: poll                 wall=12.000s usage=11.994s mem=22832KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.994s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       1   1025    10.488   1060004        12         14           17     4666)
ramon: poll                 wall=14.000s usage=13.994s mem=22832KiB load=1.00 rootload=0.99
ramon: poll                 wall=15.000s usage=14.994s mem=22832KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.993s mem=22832KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.993s mem=22832KiB load=1.00 rootload=1.00
(sat.ddfw       1   1025   8.51627   1210001        13         15            2     4699)
ramon: poll                 wall=18.000s usage=17.993s mem=22832KiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.993s mem=22832KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.993s mem=22832KiB load=1.00 rootload=1.00
ramon: end                  Mon Dec 30 12:22:54 2024
ramon: root.execname        z3
ramon: root.utime           19.990s
ramon: root.stime           0.000s
ramon: group.total          19.997s
ramon: group.utime          19.993s
ramon: group.stime          0.004s
ramon: group.mempeak        23092KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.005s
ramon: loadavg              1.00
