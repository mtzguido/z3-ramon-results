ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:54:16 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         24893 MiB
ramon: sys.mem.avail        61750 MiB
ramon: sys.nprocs           1394
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/kVDFuiyYTTFl.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             135290
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   4630   1266  1073/974/100      94/22     7   21   19.18)
(smt.stats    1    202   7314   1853  1942/1724/100     201/25     7   21   19.28)
(smt.stats    2    313   9060   2397  2109/1847/100     314/28     7   21   19.47)
(smt.stats    3    414  11111   3636  2318/2070/101     442/44     8   22   19.47)
(smt.stats    4    525  12714   4970  2407/2199/109     535/55    11   32   19.57)
(smt.stats    5    647  15173   6468  2544/2255/109     681/60    12   35   19.66)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas        :deletions    )
(smt.stats    6    748  18152   8515  2555/2347/110     785/81    13   35   19.66)
(smt.stats    7    859  20759  10686  2601/2371/110     904/81    13   35   19.76)
(smt.stats    8    981  24203  12679  2640/2419/110    1029/83    13   35   19.85)
ramon: poll                 wall=1.003s usage=0.922s mem=21044KiB load=0.92 rootload=0.91
(smt.stats    9   1115  25407  15908  2749/2533/111    1163/101    14   36   19.85)
(smt.stats   10   1216  26432  17976  2796/2550/111    1276/104    14   36   19.85)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 4095 := 4095&16777751
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 4087 := 4095&16777751
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 23 := 4095&16777751
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777792
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777751
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777751
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777760
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777751
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777760
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777792
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777856
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&16777792
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 192 := 4095&16777792
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 320 := 4095&16777792
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 576 := 4095&16777792
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 16777792 := 16777750 << 12
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 512 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 520 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 520 := 4095&16777758
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 520 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 536 := 4095&16777752
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 16777752 := 16777750 << 12
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 776 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 799 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 799 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 798 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 796 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 792 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 799 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 798 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 792 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 792 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1032 := 4095&16777752
(smt.stats   11   1327  28907  20973  2941/2693/189    1437/132    15   40   20.19)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1560 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2584 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1560 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2072 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2072 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2584 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2591 := 4095&16777758
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2591 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2584 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2584 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 536 := 4095&16777752
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 16777752 := 16777750 << 12
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 536 := 4095&16777752
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 16777752 := 16777750 << 12
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 536 := 4095&16777752
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 16777752 := 16777750 << 12
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 543 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 542 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 540 := 4095&16777752
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 536 := 4095&16777752
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 17196646936 := 16777750 << 12
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 536 := 4095&16777752
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 17196646936 := 16777750 << 12
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  32340  26325  3025/2750/226    1822/147    16   59   20.39)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1024 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1024 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1024 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 207 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 200 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 192 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 640 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 519 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 518 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 512 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 512 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 512 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
shl: (shl[34] (bv2int %0) (+ 34 (* 17179869183 #104))) 1 := 191 << 13
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
shl: (shl[34] (bv2int %0) (+ 34 (* 17179869183 #104))) 1 := 191 << 13
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
shl: (shl[34] (bv2int %0) (+ 34 (* 17179869183 #104))) 1 := 191 << 13
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
shl: (shl[34] (bv2int %0) (+ 34 (* 17179869183 #104))) 1 := 191 << 13
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 4 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 5 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 4 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 16 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 32 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 32 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 32 := 4095&1564672
(smt.stats   13   1583  37441  34042  3086/2873/272    2029/284    18   76   20.49)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 1 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 2 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 4 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 8 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 4080 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 4064 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 64 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 128 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 256 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 512 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 1024 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 2048 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 2048 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 2048 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 512 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 512 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 1024 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 1024 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 256 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 159 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 158 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 156 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 158 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 128 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 128 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 128 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 2 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 4 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 8 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 16 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 4 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 4 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 1 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 2 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 2 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 2 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 10 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 8 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 64 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 64 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 32 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 4095&1564672
band: (band[34] (if (= #108 33) 0 (if #553 1 #643)) (shl[34] (bv2int %0) (+ 34 #646))) 32 := 4095&1564672
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 8191&1556480
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 1556480 := 380 << 13
(smt.stats   14   1730  41114  40484  3208/2981/395    2252/294    19   90   21.22)
(smt.stats   15   1831  48097  46682  3317/3055/400    2389/336    20  104   21.31)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 8191&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 0 := 380 << 13
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 8191&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 0 := 380 << 13
(smt.stats   16   1942  53409  55541  3382/3148/406    2761/409    22  108   21.64)
(smt.stats   17   2064  58577  66527  3388/3154/410    3014/517    23  127   21.64)
(smt.stats   18   2198  65760  80042  3407/3166/410    3194/517    23  127   21.75)
(smt.stats   19   2345  74645  99576  3425/3186/410    3344/553    24  131   21.75)
(smt.stats   20   2506  80124 111406  3459/3212/418    3623/583    25  151   21.84)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 8589934591&1392644
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 8589934591&1392644
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 8589934591&1392644
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 8589934591&1392644
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 0 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 2 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 130 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 130 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 4098 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 8194 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 8194 := 8589934591&1392642
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 18 := 8589934591&1392786
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 18 := 8589934591&1392914
(smt.stats   21   2607  82496 119386  3605/3364/467    3837/641    27  183   22.04)
(smt.stats   22   2718  83236 122565  3707/3411/468    4023/642    27  183   22.52)
ramon: poll                 wall=2.000s usage=1.918s mem=24036KiB load=1.00 rootload=0.99
(smt.stats   23   2840  84816 128435  4074/3599/468    4251/644    27  183   22.63)
(smt.stats   24   2974  87431 137474  4185/3944/471    5066/660    28  184   22.86)
(smt.stats   25   3121  91154 149148  4197/3954/472    5577/845    29  201   22.86)
(smt.stats   26   3282  97493 172948  4456/3974/473    6298/959    30  219   23.07)
(smt.stats   27   3459 102371 192470  4639/4276/473    6797/965    30  219   23.35)
(smt.stats   28   3560 105417 204256  4704/4435/473    7639/971    30  219   23.35)
(smt.stats   29   3671 109008 215699  4815/4489/473    8101/975    30  219   23.65)
ramon: poll                 wall=3.000s usage=2.918s mem=25828KiB load=1.00 rootload=1.00
(smt.stats   30   3793 113774 224450  5037/4605/473    8731/984    30  219   23.74)
(smt.stats   31   3927 118139 233540  5129/4817/473    9322/989    30  219   23.87)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074 123020 248818  5182/4932/473    9863/991    30  219   23.87)
(smt.stats   33   4235 128091 265121  5488/4957/473   10606/997    30  219   24.01)
ramon: poll                 wall=4.000s usage=3.918s mem=25828KiB load=1.00 rootload=1.00
(smt.stats   34   4412 133409 289846  5840/5247/473   11530/1002    30  219   24.28)
(smt.stats   35   4606 142906 343746  5863/5620/479   12700/1922    31  221   24.37)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 65538 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 65537 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 98304 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 98304 := 134217727&1409280
(smt.stats   36   4707 147181 358330  5938/5627/479   13002/2217    32  244   24.50)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 65792 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 65792 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 65792 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 65792 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 98560 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 98560 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 98560 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 98560 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 295168 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 360704 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 360704 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 360704 := 134217727&1409280
(smt.stats   37   4818 149300 367196  6261/5816/510   13315/2224    32  244   24.59)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1147136 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1147136 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1147136 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1343744 := 134217727&1409280
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1343744 := 134217727&1409280
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   38   4940 152083 376578  6401/6138/536   13910/2347    33  253   24.83)
(smt.delete-inactive-clauses  :num-deleted-clauses 245)
(smt.stats   39   5074 158057 400618  6442/6146/536   15024/2351    33  253   24.92)
(smt.stats   40   5221 165386 427964  6608/6193/536   15430/3002    34  258   25.17)
(smt.stats   41   5382 166845 433385  7192/6536/536   15754/3005    34  258   25.26)
ramon: poll                 wall=5.000s usage=4.918s mem=26852KiB load=1.00 rootload=0.99
(smt.stats   42   5559 175154 470783  7458/7159/537   17679/3370    35  267   25.46)
(smt.stats   43   5753 186158 519337  7763/7202/537   18829/3388    35  267   25.78)
(smt.stats   44   5966 194674 575180  8161/7515/537   20474/3400    35  267   26.15)
ramon: poll                 wall=6.000s usage=5.917s mem=27876KiB load=1.00 rootload=1.00
(smt.stats   45   6067 201573 603192  8221/7957/539   21881/4999    36  276   26.24)
(smt.stats   46   6178 208424 623919  8332/7968/539   22293/5003    36  276   26.43)
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 16384 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 16385 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 16385 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1024 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1025 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 1025 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 3072 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 3073 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 3072 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 3072 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 3073 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 7168 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 7169 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 7168 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 7169 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 39936 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 39936 := 8388607&39937
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 39937 := 8388607&39937
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 137438993409 := 16777932 << 23
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 39937 := 8388607&39937
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 137438993409 := 16777932 << 23
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 39937 := 8388607&39937
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 137438993409 := 16777932 << 23
band: (band[34] (if (= #288 63) 0 (if #532 1 #744)) (shl[64] (* 2 #102) (mod #759 64))) 39937 := 8388607&39937
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 33 #751 #755) 64)) 137438993409 := 16777932 << 23
(smt.stats   47   6300 214135 651877  8496/8120/539   22891/5007    36  276   26.52)
(smt.stats   48   6434 217093 674560  8571/8250/569   23088/5138    37  289   26.64)
(smt.stats   49   6581 224646 687472  8986/8635/571   23682/5144    37  289   26.74)
(smt.stats   50   6742 234519 732247  9086/8820/573   24943/5349    38  309   26.94)
ramon: poll                 wall=7.000s usage=6.917s mem=28644KiB load=1.00 rootload=1.00
(smt.stats   51   6919 244186 790402  9190/8823/573   25992/5358    38  309   27.04)
(smt.stats   52   7113 251664 833117  9242/8976/579   27841/5846    39  311   27.61)
(smt.stats   53   7326 264758 878038  9256/8982/579   28687/5846    39  311   27.80)
ramon: poll                 wall=8.000s usage=7.915s mem=29336KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.915s mem=29848KiB load=1.00 rootload=1.00
(smt.stats   54   7560 274913 920354  9340/8996/579   29545/6320    40  333   27.99)
ramon: poll                 wall=10.000s usage=9.915s mem=29848KiB load=1.00 rootload=1.00
(smt.stats   55   7661 278626 939181  9438/9125/579   29973/6323    40  333   27.99)
ramon: poll                 wall=11.000s usage=10.915s mem=29848KiB load=1.00 rootload=1.00
(smt.stats   56   7772 283548 963305  9576/9186/579   30441/6330    40  333   28.08)
(smt.stats   57   7894 289478 990953  9596/9314/579   30954/6331    40  333   28.18)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   58   8028 295232 1025863  9640/9359/581   32506/6776    41  352   28.28)
ramon: poll                 wall=12.000s usage=11.915s mem=30104KiB load=1.00 rootload=1.00
(smt.stats   59   8175 302389 1058236  9849/9388/581   33402/6779    41  352   28.37)
(smt.stats   60   8336 309466 1110079  9933/9651/582   34329/7660    42  362   28.47)
ramon: poll                 wall=13.000s usage=12.915s mem=30360KiB load=1.00 rootload=1.00
(smt.stats   61   8513 317054 1158216 10048/9772/583   35180/8045    43  369   28.78)
ramon: poll                 wall=14.000s usage=13.915s mem=30872KiB load=1.00 rootload=1.00
(smt.stats   62   8707 325578 1199826 10246/9895/586   36102/8051    43  369   28.88)
(smt.stats   63   8920 333441 1234266 10540/10275/587   36844/8287    44  401   28.97)
ramon: poll                 wall=15.000s usage=14.915s mem=31384KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats     :conflicts  :propagations            :lemmas           :deletions     )
(smt.stats   64   9154 343997 1308888 10981/10441/590   37975/8298    44  401   29.16)
ramon: poll                 wall=16.000s usage=15.915s mem=31408KiB load=1.00 rootload=1.00
(smt.stats   65   9411 351551 1386514 11597/11161/591   38875/8426    45  406   29.35)
(smt.stats   66   9512 354130 1405833 11622/11357/592   39774/8691    46  409   29.45)
(smt.stats   67   9623 360833 1453414 11745/11362/592   40343/8692    46  409   29.54)
ramon: poll                 wall=17.000s usage=16.915s mem=31408KiB load=1.00 rootload=1.00
(smt.stats   68   9745 367530 1488317 11888/11484/592   41002/8694    46  409   29.78)
(smt.stats   69   9879 373140 1519206 12090/11633/592   41683/8702    46  409   29.78)
(smt.delete-inactive-clauses  :num-deleted-clauses 96)
(smt.stats   70  10026 377712 1554272 12199/11920/594   43557/9373    47  412   30.11)
ramon: poll                 wall=18.000s usage=17.914s mem=31920KiB load=1.00 rootload=1.00
(smt.stats   71  10187 384958 1630884 12398/11994/597   44353/9381    47  412   30.21)
(smt.stats   72  10364 389657 1658255 12618/12152/597   45232/9683    48  454   30.21)
ramon: poll                 wall=19.000s usage=18.914s mem=32176KiB load=1.00 rootload=1.00
(smt.stats   73  10558 395329 1703181 12948/12487/597   46749/9688    48  454   30.40)
ramon: poll                 wall=20.000s usage=19.914s mem=32432KiB load=1.00 rootload=1.00
(smt.stats   74  10771 402601 1791621 13377/12708/597   48337/9697    48  454   30.70)
ramon: end                  Fri Nov  1 18:54:36 2024
ramon: root.execname        z3
ramon: root.utime           19.980s
ramon: root.stime           0.020s
ramon: group.total          20.001s
ramon: group.utime          19.981s
ramon: group.stime          0.020s
ramon: group.mempeak        32688KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.085s
ramon: loadavg              1.00
