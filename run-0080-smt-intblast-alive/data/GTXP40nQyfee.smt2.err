ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:00:24 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28289 MiB
ramon: sys.mem.avail        61764 MiB
ramon: sys.nprocs           1273
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/GTXP40nQyfee.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             4149559
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   4531    525  1385/1225/108      92/16     6   18   19.28)
(smt.stats    1    202   5679    940  2072/1867/109     188/54     7   19   19.49)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 671&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 671&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 671 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 0&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 0 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 0&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 0 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 0&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 0 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 0&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 0 := 672 << 52
(smt.stats    2    313   6904   1747  2715/2457/110     298/57     8   20   19.68)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 3026418949592973312&2251799813685248
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 1 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 3026418949592973312&2251799813685248
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 1 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 3026418949592973312&2251799813685248
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 1 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 3026418949592973312&2251799813685248
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 3026418949592973313 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2251799813685248 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2251799813685246 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 4 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 8 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 16 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 288 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 385 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 512 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 512 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 512 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 512 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1024 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2048 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2048 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 4096 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 8320 := 3026418949592973312&2251799813685248
(smt.stats    3    414   7639   2276  2905/2583/161     475/59     9   21   19.99)
(smt.stats    4    525   8796   5709  2994/2735/216     635/158    13   63   20.09)
(smt.stats    5    647   9957   8791  3068/2767/217     740/160    14   63   20.28)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  14397  13907  3083/2820/218     836/160    15   65   20.28)
(smt.stats    7    859  17505  18396  3107/2831/218     944/163    15   65   20.48)
(smt.stats    8    981  19406  22766  3242/2976/229    1111/208    17   70   20.48)
ramon: poll                 wall=1.005s usage=0.952s mem=21804KiB load=0.95 rootload=0.95
(smt.stats    9   1115  22406  24790  3357/2991/229    1236/219    18   84   20.68)
(smt.stats   10   1216  24766  26814  3450/3106/229    1337/222    18   84   20.77)
(smt.stats   11   1327  28375  28613  3649/3264/229    1467/222    18   84   20.87)
ramon: poll                 wall=2.000s usage=1.942s mem=22256KiB load=1.00 rootload=0.99
(smt.stats   12   1449  31076  30154  3872/3428/229    1609/224    18   84   20.87)
(smt.stats   13   1583  32576  31562  3997/3608/229    1815/231    18   84   20.98)
(smt.stats   14   1730  34880  35005  4128/3819/230    2005/278    19   84   20.98)
(smt.stats   15   1831  37103  39330  4236/3872/230    2120/280    19   84   21.07)
(smt.stats   16   1942  41396  50052  4291/3998/230    2264/280    19   84   21.07)
(smt.stats   17   2064  45146  53441  4307/4034/231    2461/293    20   87   21.07)
ramon: poll                 wall=3.000s usage=2.942s mem=22512KiB load=1.00 rootload=1.00
(smt.stats   18   2198  48073  58582  4409/4045/231    2629/294    20   87   21.17)
(smt.stats   19   2345  51205  64165  4615/4187/231    2816/295    20   87   21.26)
(smt.stats   20   2506  54220  68648  4739/4381/231    3024/295    20   87   21.26)
ramon: poll                 wall=4.005s usage=3.950s mem=22768KiB load=1.00 rootload=1.01
(smt.stats   21   2607  56231  73876  4784/4486/231    3141/295    20   87   21.26)
(smt.stats   22   2718  59367  83643  4829/4536/231    3330/296    20   87   21.26)
(smt.stats   23   2840  61342  91201  4953/4576/233    3461/456    21   87   21.46)
(smt.stats   24   2974  62635  94099  5208/4772/233    3611/458    21   87   21.63)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions    )
(smt.stats   25   3121  66611 103770  5239/4971/238    3834/497    23   96   21.63)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 48 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 48 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 48 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 48 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 40 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 4575657221408451552&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 4575657221408450782&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 4575657221408450756&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 4575657221408450756&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 4575657221408450756&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1664 := 4575657221408450820&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1664 := 4575657221408450756&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1792 := 4575657221408450820&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1792 := 4575657221408450820&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2048 := 4575657221408450756&8388608
(smt.stats   26   3282  69599 109205  5387/4974/238    4098/502    23   96   21.72)
ramon: poll                 wall=5.000s usage=4.942s mem=23280KiB load=1.00 rootload=0.99
(smt.stats   27   3459  72588 123965  5684/5416/298    4688/566    25  110   22.02)
(smt.stats   28   3560  75388 133017  5703/5429/299    4817/632    26  110   22.02)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 4611686018427387901&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 4611686018427387901 := 4611686018427387901 << 1
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 4611686018427387901&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 4611686018427387901 := 4611686018427387901 << 1
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 4575657221408437343&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 9187343239835825247 := 4611686018427387901 << 1
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 4575657221408437385&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 9187343239835825289 := 4611686018427387901 << 1
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 16523&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 16523&4
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 4611686018427404427 := 4611686018427387903 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 16523&4
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 4611686018427404427 := 4611686018427387903 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 139&4
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 139 := 4611686018427387841 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 155&4
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 155 := 4611686018427387841 << 3
(smt.stats   29   3671  78451 142996  5811/5519/322    5117/809    28  123   22.11)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 27021597227381763 := 4611686018427387841 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 27021597227381763 := 4611686018427387841 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 0 := 4611686018427387841 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 1 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 4 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 4 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 3 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 1 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 4 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 3 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 1 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 1 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 4 := 4611686018427387400&4
(smt.stats   30   3793  82788 153134  5870/5543/322    5253/810    28  123   22.30)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 385 := 387&576460752303423488
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 385 := 387&576460752303423488
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 386 := 397&576460752303423488
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 386 := 387&576460752303423488
(smt.stats   31   3927  86117 162718  5949/5601/359    5697/825    29  130   22.40)
(smt.stats   32   4074  89632 169190  6025/5670/365    5922/857    30  136   22.49)
ramon: poll                 wall=6.000s usage=5.942s mem=24048KiB load=1.00 rootload=1.00
(smt.stats   33   4235  92994 178053  6235/5915/366    6143/910    31  144   22.60)
(smt.stats   34   4412  96726 204056  6532/6231/368    6421/1010    32  148   22.70)
ramon: poll                 wall=7.000s usage=6.942s mem=24232KiB load=1.00 rootload=1.00
(smt.stats   35   4607 103142 232698  6629/6321/372    6653/1027    33  151   22.79)
(smt.stats   36   4708 105504 238897  6689/6338/372    6797/1028    33  151   22.98)
ramon: poll                 wall=8.000s usage=7.941s mem=24756KiB load=1.00 rootload=1.00
(smt.stats   37   4819 109028 253276  6950/6542/372    6975/1029    34  159   23.17)
(smt.stats   38   4941 111771 261768  7112/6655/372    7156/1029    34  159   23.17)
(smt.delete-inactive-clauses  :num-deleted-clauses 159)
(smt.stats   39   5075 114606 271594  7120/6819/373    7347/1093    35  163   23.27)
ramon: poll                 wall=9.000s usage=8.941s mem=24756KiB load=1.00 rootload=1.00
(smt.stats   40   5222 119369 279276  7235/6825/373    7643/1095    35  163   23.27)
(smt.stats   41   5383 123220 295391  7331/6955/374    7932/1293    36  164   23.37)
ramon: poll                 wall=10.000s usage=9.941s mem=25012KiB load=1.00 rootload=1.00
(smt.stats   42   5560 127273 313816  7539/7221/376    8432/1340    37  171   23.56)
(smt.stats   43   5754 135160 327203  7668/7352/377    9017/1514    38  172   23.65)
ramon: poll                 wall=11.000s usage=10.941s mem=25268KiB load=1.00 rootload=1.00
(smt.stats   44   5967 140614 344034  7751/7410/379    9312/1568    39  179   23.75)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   45   6068 143609 355503  7817/7471/379    9569/1569    39  179   23.84)
(smt.stats   46   6179 147351 370804  7938/7530/379    9800/1570    39  179   23.84)
ramon: poll                 wall=12.000s usage=11.940s mem=25396KiB load=1.00 rootload=1.00
(smt.stats   47   6301 150426 376656  8120/7685/379   10089/1572    39  179   23.94)
(smt.stats   48   6435 153560 386313  8285/7989/380   10368/1810    40  184   24.03)
ramon: poll                 wall=13.000s usage=12.940s mem=25396KiB load=1.00 rootload=0.99
(smt.stats   49   6582 156792 393971  8375/7996/380   10568/1810    40  184   24.13)
(smt.stats   50   6743 160030 400010  8756/8170/380   10818/1812    40  184   24.23)
ramon: poll                 wall=14.005s usage=13.948s mem=25908KiB load=1.00 rootload=1.01
(smt.stats   51   6920 163801 417894  9034/8508/380   11072/1815    40  184   24.32)
ramon: poll                 wall=15.000s usage=14.939s mem=26164KiB load=1.00 rootload=0.99
(smt.stats   52   7114 169760 445615  9139/8811/382   11504/1886    41  193   24.42)
ramon: poll                 wall=16.000s usage=15.939s mem=26164KiB load=1.00 rootload=1.00
(smt.stats   53   7327 175119 458241  9541/8886/382   11915/1978    42  198   24.61)
ramon: poll                 wall=17.000s usage=16.939s mem=26676KiB load=1.00 rootload=1.00
(smt.stats   54   7561 178884 472400  9872/9281/382   12337/1978    42  198   24.95)
(smt.stats   55   7662 181618 478976  9894/9587/382   12457/1978    42  198   25.05)
(smt.stats   56   7773 183358 487989  9936/9623/382   12582/1978    42  198   25.05)
(smt.stats   57   7895 185661 498963  9956/9638/382   12776/1978    42  198   25.15)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 8 := 9&8
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 9 := 576460752303423538 << 4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 8 := 8&8
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 8 := 576460752303423538 << 4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 8 := 9&8
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 9 := 4 << 4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 8 := 9&8
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 9 := 4 << 4
(smt.stats   58   8029 187163 505671 10026/9659/382   12952/1981    42  198   25.34)
ramon: poll                 wall=18.000s usage=17.939s mem=26932KiB load=1.00 rootload=0.99
(smt.stats   59   8176 193012 515467 10037/9710/387   13121/2166    43  199   25.34)
(smt.stats   60   8337 200061 546867 10053/9726/389   13506/2297    44  220   25.44)
(smt.stats   61   8514 205126 573283 10068/9739/390   13905/2392    45  224   25.53)
(smt.stats   62   8708 214386 599574 10094/9742/390   14298/2392    45  224   25.53)
(smt.stats   63   8921 224740 649288 10120/9773/390   14566/2392    45  224   25.63)
ramon: poll                 wall=19.000s usage=18.939s mem=27188KiB load=1.00 rootload=1.00
(smt.stats   64   9155 228967 673552 10157/9799/391   14905/2533    46  233   25.63)
(smt.stats :restarts :decisions   :clauses/bin/units            :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   65   9412 234905 700534 10446/9835/392   15366/2533    47  245   25.73)
ramon: poll                 wall=20.000s usage=19.939s mem=27444KiB load=1.00 rootload=1.00
(smt.stats   66   9513 238286 708079 10463/10123/392   15521/2534    47  245   25.73)
ramon: end                  Fri Nov  1 18:00:44 2024
ramon: root.execname        z3
ramon: root.utime           19.990s
ramon: root.stime           0.010s
ramon: group.total          20.009s
ramon: group.utime          19.997s
ramon: group.stime          0.012s
ramon: group.mempeak        27700KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.066s
ramon: loadavg              1.00
