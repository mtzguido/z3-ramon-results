ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:58:06 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27578 MiB
ramon: sys.mem.avail        62083 MiB
ramon: sys.nprocs           1385
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/ihE8T65KhAWG.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             899213
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   85.4701     10000        49          0            1        2)
(sat.ddfw       1      1   43.4826     20001        98          1            1        3)
(smt.stats    0    101   4420    502  1339/1199/111      90/36     7   17   52.14)
(sat.ddfw       1      1   43.4783     40001       196          2            1        5)
(smt.stats    1    202   4984    772  2330/2065/111     193/36     7   17   52.33)
(sat.ddfw       1      1   37.0828     70001       343          3            1        8)
ramon: poll                 wall=1.000s usage=0.931s mem=54536KiB load=0.93 rootload=0.92
(smt.stats    2    313   5890   1314  2585/2206/111     311/36     7   17   52.54)
(sat.ddfw       1      1   31.6456    110001       539          4            1       12)
(smt.stats    3    414   6214   1651  2704/2391/111     413/37     7   17   52.64)
(smt.stats    4    525   9017   2609  2926/2694/120     528/45     9   25   52.73)
(sat.ddfw       1      1   27.1881    160000       784          5            1       17)
ramon: poll                 wall=2.000s usage=1.933s mem=54808KiB load=1.00 rootload=1.00
(smt.stats    5    647  12612   4388  3026/2731/120     665/58    10   27   52.83)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas        :deletions    )
(smt.stats    6    748  15029   6018  3205/2829/123     766/76    11   29   52.83)
(smt.stats    7    859  17522   9329  3238/2990/123     886/81    12   30   52.95)
(smt.stats    8    981  20561  12656  3301/3064/127    1021/100    14   34   53.05)
(smt.stats    9   1115  24970  17412  3322/3075/128    1148/129    16   35   53.18)
(sat.ddfw       1      1   23.7064    220001      1078          6            1       23)
ramon: poll                 wall=3.000s usage=2.929s mem=55352KiB load=1.00 rootload=1.00
(smt.stats   10   1216  28252  20479  3465/3103/128    1249/130    16   35   53.28)
(smt.stats   11   1327  31739  22750  3531/3263/128    1362/133    16   35   53.28)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  36493  26384  3561/3314/128    1479/133    16   35   53.28)
(sat.ddfw       1      1   20.9706    290001      1421          7            1       30)
(smt.stats   13   1583  39505  30610  3588/3337/132    1683/140    17   39   53.38)
(smt.stats   14   1730  44607  40998  3612/3376/132    1826/140    17   39   53.48)
(smt.stats   15   1831  49843  43099  3613/3381/132    1934/140    17   39   53.68)
(smt.stats   16   1942  54306  46541  3660/3383/132    2047/141    17   39   53.78)
ramon: poll                 wall=4.000s usage=3.895s mem=55936KiB load=0.97 rootload=0.96
(sat.ddfw       1      1   18.3866    370001      1813          8            1       38)
(smt.stats   17   2064  56823  48744  3826/3439/132    2180/141    17   39   53.97)
(smt.stats   18   2198  58298  52522  3963/3687/132    2334/141    17   39   53.97)
ramon: poll                 wall=5.000s usage=4.887s mem=56356KiB load=0.99 rootload=0.99
(smt.stats   19   2345  62551  59429  3987/3739/132    2480/141    17   39   54.36)
(smt.stats   20   2506  64494  64174  4035/3761/132    2653/141    17   39   54.36)
(smt.stats   21   2607  68199  71536  4046/3808/132    2751/141    17   39   54.36)
(smt.stats   22   2718  70330  78829  4050/3815/132    2877/141    17   39   54.48)
(smt.stats   23   2840  73446  83799  4054/3822/132    2996/141    17   39   54.48)
(sat.ddfw       1      1   16.6852    460001      2254          9            1       47)
(smt.stats   24   2974  76802  88161  4066/3822/132    3140/141    17   39   54.58)
(smt.stats   25   3121  78805  93435  4073/3841/132    3287/141    17   39   54.58)
(smt.stats   26   3282  83242 103482  4112/3843/132    3455/141    17   39   54.67)
(smt.stats   27   3459  87032 112090  4158/3897/132    3632/142    17   39   54.67)
(smt.stats   28   3560  89988 116500  4158/3926/133    3736/277    18   43   54.79)
ramon: poll                 wall=6.000s usage=5.881s mem=57184KiB load=0.99 rootload=0.99
(smt.stats   29   3671  92471 123880  4159/3926/133    3847/277    18   43   55.39)
(smt.stats   30   3793  94754 136430  4168/3930/133    3969/277    18   43   55.39)
(smt.stats   31   3927  96270 141664  4272/3954/133    4111/277    18   43   55.51)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions    )
(smt.stats   32   4074 100302 148579  4285/4053/133    4283/277    18   43   55.51)
(sat.ddfw       1      1   15.2416    560001      2745         10            1       57)
(smt.stats   33   4235 104412 156360  4334/4057/133    4446/277    18   43   55.63)
(smt.stats   34   4412 109209 166818  4338/4106/133    4633/277    18   43   55.63)
(smt.stats   35   4606 113303 176338  4339/4107/133    4861/277    18   43   55.72)
(smt.stats   36   4707 116176 183803  4341/4109/133    4962/277    18   43   55.72)
ramon: poll                 wall=7.003s usage=6.883s mem=58156KiB load=1.00 rootload=1.01
(smt.stats   37   4818 120280 190638  4341/4109/133    5073/277    18   43   55.72)
(smt.stats   38   4940 123679 195391  4341/4109/133    5195/277    18   43   55.84)
(smt.delete-inactive-clauses  :num-deleted-clauses 117)
(smt.stats   39   5074 127152 198970  4343/4111/133    5210/277    18   43   55.84)
(smt.stats   40   5221 133396 204126  4343/4111/133    5357/277    18   43   55.84)
(smt.stats   41   5382 136471 208520  4432/4113/133    5516/278    18   43   55.94)
(smt.stats   42   5559 138393 217835  4488/4214/133    5696/278    18   43   56.25)
(smt.stats   43   5753 142212 223294  4499/4261/133    5891/278    18   43   56.25)
(smt.stats   44   5966 147182 244487  4500/4268/133    6104/278    18   43   56.25)
(sat.ddfw       1      1    14.036    670001      3284         11            1       68)
(smt.stats   45   6067 148795 248853  4500/4268/133    6205/278    18   43   56.37)
ramon: poll                 wall=8.000s usage=7.877s mem=58440KiB load=1.00 rootload=0.99
(smt.stats   46   6178 150560 266700  4500/4268/133    6316/278    18   43   57.15)
(smt.stats   47   6300 151689 272011  4639/4268/133    6442/279    18   43   57.24)
(smt.stats   48   6434 153717 278970  4715/4437/133    6604/279    18   43   57.24)
(smt.stats   49   6581 155472 287398  4726/4494/133    6751/279    18   43   57.34)
(smt.stats   50   6742 157864 298804  4775/4494/133    6915/280    18   43   57.34)
ramon: poll                 wall=9.000s usage=8.921s mem=59848KiB load=1.04 rootload=1.04
(smt.stats   51   6919 160220 311082  4900/4547/133    7114/281    18   43   57.44)
(sat.ddfw       1      1    13.011    790001      3872         12            1       80)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions    )
(smt.stats   52   7113 162758 323721  4941/4674/133    7321/281    18   43   57.57)
(smt.stats   53   7326 166161 340881  4952/4716/133    7534/281    18   43   57.57)
(smt.stats   54   7560 169110 355795  4953/4721/133    7791/281    18   43   57.57)
(smt.stats   55   7661 170722 364981  4959/4723/133    7893/281    18   43   57.57)
(smt.stats   56   7772 171831 370874  4960/4728/133    8032/281    18   43   57.57)
(smt.stats   57   7894 173069 377380  4980/4728/133    8159/281    18   43   57.68)
(smt.stats   58   8028 175298 387480  4996/4752/133    8299/281    18   43   57.68)
ramon: poll                 wall=10.000s usage=9.921s mem=60012KiB load=1.00 rootload=1.00
(smt.stats   59   8175 179912 396721  5001/4768/133    8448/282    18   43   57.78)
(smt.stats   60   8336 182911 414100  5029/4773/133    8617/282    18   43   57.78)
(smt.stats   61   8513 185445 425650  5031/4799/133    8796/282    18   43   57.78)
(smt.stats   62   8707 187418 434550  5145/4803/133    9039/282    18   43   57.89)
(smt.stats   63   8920 191252 446871  5231/4939/133    9257/282    18   43   57.89)
(sat.ddfw       1      1    12.119    920001      4509         13            1       93)
ramon: poll                 wall=11.000s usage=10.925s mem=60324KiB load=1.00 rootload=1.00
(smt.stats   64   9154 192182 448920  5460/5001/133    9510/284    18   43   58.09)
ramon: poll                 wall=12.003s usage=11.929s mem=60496KiB load=1.00 rootload=1.01
(sat.ddfw       1      1   11.3388   1060001      5196         14            1      108)
(smt.stats   65   9411 192942 452150  5788/5385/133    9786/284    18   43   58.18)
(smt.stats   66   9512 193740 454208  5823/5587/133    9893/285    18   43   58.18)
(smt.stats   67   9623 195725 458984  5829/5591/133   10008/286    18   43   58.18)
(smt.stats   68   9745 197746 463761  5898/5628/133   10142/286    18   43   58.28)
(smt.stats   69   9879 198906 469072  5992/5675/134   10290/545    19   44   58.28)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10026 200508 477483  6036/5777/134   10443/545    19   44   58.37)
ramon: poll                 wall=13.000s usage=13.033s mem=61056KiB load=1.11 rootload=1.10
(smt.stats   71  10187 202270 481855  6096/5823/134   10626/545    19   44   58.37)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats    :conflicts   :propagations          :lemmas           :deletions    )
(smt.stats   72  10364 203897 498155  6137/5876/134   10809/546    19   44   58.37)
(smt.stats   73  10558 205553 515481  6148/5914/134   11004/546    19   44   58.49)
(smt.stats   74  10771 207657 543412  6163/5915/134   11218/546    19   44   58.95)
(smt.stats   75  11005 211883 581486  6221/5947/134   11480/546    19   44   59.05)
(smt.stats   76  11262 216209 628795  6252/5991/134   11753/546    19   44   59.15)
ramon: poll                 wall=14.000s usage=14.050s mem=61544KiB load=1.02 rootload=1.02
(sat.ddfw       1      1   10.6436   1210001      5931         15            1      123)
(smt.stats   77  11544 218988 649474  6466/6018/134   12065/546    19   44   59.25)
(smt.stats   78  11645 221147 658978  6530/6289/134   12184/546    19   44   59.34)
(smt.stats   79  11756 223208 673799  6540/6306/134   12300/546    19   44   59.34)
ramon: poll                 wall=15.000s usage=15.052s mem=61816KiB load=1.00 rootload=1.00
(smt.stats   80  11878 224893 683270  6545/6311/134   12418/546    19   44   59.34)
(smt.stats   81  12012 227185 692755  6550/6313/134   12550/546    19   44   59.44)
(smt.stats   82  12159 232762 701187  6553/6319/134   12697/546    19   44   59.44)
(smt.stats   83  12320 237161 709523  6553/6319/134   12858/546    19   44   59.44)
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488355294&1
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 1829587348619265 := 1829587348750336 >>l 63
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488355294&1
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 1829587348619265 := 1829587348750336 >>l 63
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488355294&1
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 1829587348619265 := 1829587348815872 >>l 63
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488355294&140709571067901
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 27917287397 := 140737488355294&27917287426
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 27917287398 := 140737488355294&27917287427
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 27917287426 := 140737488355294&27917287427
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 1548140289196035 := 1829587348881408 >>l 63
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488355294&1
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 140737488355329 := 9223372036854710272 >>l 63
(smt.stats   84  12497 241015 716955  6577/6322/134   13033/548    19   44   59.54)
(smt.stats   85  12691 244472 730268  6609/6352/144   13221/667    20   46   59.63)
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 17 := 140737483898880&18
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 18 := 140737483898880&19
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 20 := 140737483898880&21
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 24 := 140737483898880&25
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 32 := 140737483898880&33
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 64 := 140737483898880&65
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 128 := 140737483898880&129
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 256 := 140737483898880&257
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 512 := 140737483898880&513
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 1024 := 140737483898880&1025
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 2048 := 140737483898880&2049
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 4096 := 140737483898880&4097
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8192 := 140737483898880&8193
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16384 := 140737483898880&16385
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16384 := 140737483898880&16385
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 32768 := 140737483898880&32769
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 65536 := 140737483898880&65537
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 131072 := 140737483898880&131073
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 262144 := 140737483898880&262145
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 576038539838619649 := 1829587348750336 >>l 46
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 131072 := 140737483898880&131073
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 262144 := 140737483898880&262145
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 576038539838619649 := 17180000256 >>l 46
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 262144 := 140737483898880&27917287425
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 524288 := 140737483898880&27917287425
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 1048576 := 140737483898880&27917287425
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 2097152 := 140737483898880&27917287425
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 4194304 := 140737483898880&27917287425
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8388608 := 140737483898880&27917287425
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16777216 := 140737483898880&27917287425
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 33554432 := 140737483898880&27917287425
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 4194304 := 140737483898880&4194305
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8388608 := 140737483898880&16777216
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8388608 := 140737483898880&25165824
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8388608 := 140737483898880&8388609
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 576038539846746113 := 1829587348750336 >>l 46
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8388608 := 140737483898880&8388609
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 576038539846746113 := 1829587348750336 >>l 46
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 25 := 140737483898880&26
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 24 := 140737483898880&25
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 18 := 140737483898880&19
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16 := 140737483898880&18
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16 := 140737483898880&18
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16 := 140737483898880&18
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8 := 140737483898880&18
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737483898880&26
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 0 := 27917287424 >>l 30
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737483898880&26
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 0 := 27917287424 >>l 30
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737483898880&18
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 0 := 19327352832 >>l 30
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737483898880&18
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 0 := 19327352832 >>l 30
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737483898880&18
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 0 := 19327352832 >>l 30
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 2 := 140737483898880&18
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 2 := 140737483898880&18
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 1 := 140737483898880&18
(smt.stats   86  12904 248248 743821  6802/6549/276   13475/710    21   67   60.11)
(smt.stats   87  13138 255570 763343  6829/6573/286   13744/711    21   67   60.11)
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 262144 := 140737488350976&262144
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 576038539838619648 := 1899956092796928 >>l 56
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 262144 := 140737488350976&262144
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 576038539838619648 := 1899956092796928 >>l 56
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 262144 := 140737488350976&262144
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 576038539838619648 := 1970324836909056 >>l 56
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 262144 := 140737488350976&262144
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 576038539838619648 := 1970324836909056 >>l 56
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 262144 := 140737488350976&262144
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 576038539838619648 := 1899956092796928 >>l 56
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 64 := 140737488350976&64
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 64 := 140737488350976&64
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 64 := 140737488350976&64
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 64 := 140737488350976&64
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 64 := 140737488350976&64
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 64 := 140737488350976&64
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 32 := 140737488350976&32
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 32 := 140737488350976&32
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 32 := 140737488350976&32
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16 := 140737488350976&16
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16 := 140737488350976&16
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16 := 140737488350976&16
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 16 := 140737488350976&16
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 8 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 9 := 8796093022208 >>l 40
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 9 := 8796093022208 >>l 40
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 9 := 8796093022208 >>l 40
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 1 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 1 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 1 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 8 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 6 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 4 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 6 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 4 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 4 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 4 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 2 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 2 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&16
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 16 := 140737488350976&16
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&32
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 32 := 140737488350976&32
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&64
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 64 := 140737488350976&64
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&16
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 16 := 140737488350976&16
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 8 := 140737488350976&8
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 140737488350976&8
band: (band[47] (if (= #126 46) 9903520314280649661890953216 (if #514 4951760157140324830945476608 #604)) (lshr[47] (bv2int %0) (+ 47 #607))) 8 := 140737488350976&8
ramon: poll                 wall=16.000s usage=16.049s mem=63032KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   10.0238   1370001      6715         16            1      139)
(smt.stats   88  13395 260687 788493  6952/6660/347   14072/765    22   81   60.42)
(smt.stats   89  13677 264363 807961  7195/6817/379   14427/812    23   99   61.01)
ramon: poll                 wall=17.000s usage=17.053s mem=63976KiB load=1.00 rootload=1.01
(smt.stats   90  13987 271098 836098  7297/7028/384   14868/897    24  109   61.21)
(smt.stats   91  14088 275005 842800  7366/7080/384   15013/897    24  109   61.30)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats    :conflicts   :propagations          :lemmas          :deletions     )
(smt.stats   92  14199 279335 863814  7367/7081/384   15124/897    24  109   61.30)
(smt.stats   93  14321 283489 876272  7367/7081/384   15235/937    25  122   61.40)
(smt.stats   94  14455 288482 899549  7380/7090/385   15381/943    26  124   61.49)
(smt.stats   95  14602 294466 918975  7395/7107/387   15577/943    26  124   61.49)
(smt.stats   96  14763 301137 938246  7429/7129/388   15799/984    27  129   61.61)
ramon: poll                 wall=18.000s usage=18.050s mem=64524KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   9.46548   1540001      7549         17            1      156)
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 0&25165823
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 1829587373785087 := 3307330976284672 >>l 17
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 0&25165823
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 1829587373785087 := 1899956092796928 >>l 17
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 0&25165823
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 1829587373785087 := 1899956092796928 >>l 17
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 0&25165823
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 1829587373785087 := 1899956092796928 >>l 17
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 0&25165823
lshr: (lshr[64] (* 65536 (bv2int %0)) (mod (+ 63 #752 #756) 64)) 1829587373785087 := 3307330976284672 >>l 17
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 0&70368735789055
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 70368735789056 := 140737471578111 >>l 1
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 0&70368735789055
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 140737471578110 := 140737471578111 >>l 1
band: (band[47] (if (= #620 63) 1298074214633393312483371019927552 (if #622 649037107316696656241685509963776 #746)) (lshr[64] (* 65536 #313) (mod #759 64))) 0 := 0&70368735789055
lshr: (lshr[47] (bv2int %0) (+ 47 (* 140737488355327 #122))) 70368735789054 := 140737471578111 >>l 1
(smt.stats   97  14940 307036 956220  7502/7186/391   16339/1151    28  141   61.71)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   98  15134 310973 986360  7617/7297/406   16863/1155    28  141   61.90)
ramon: poll                 wall=19.000s usage=19.074s mem=64760KiB load=1.02 rootload=1.02
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   99  15347 315880 1025062  7762/7324/406   17168/1215    29  155   62.59)
(smt.stats  100  15581 321860 1048591  7886/7578/408   17626/1236    30  155   64.23)
ramon: poll                 wall=20.003s usage=20.087s mem=66756KiB load=1.01 rootload=1.01
ramon: end                  Fri Nov  1 22:58:26 2024
ramon: root.execname        z3
ramon: root.utime           20.130s
ramon: root.stime           0.010s
ramon: group.total          20.159s
ramon: group.utime          20.139s
ramon: group.stime          0.020s
ramon: group.mempeak        68248KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.077s
ramon: loadavg              1.00
