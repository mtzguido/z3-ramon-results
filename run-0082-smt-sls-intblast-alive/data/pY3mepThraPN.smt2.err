ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 23:07:54 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27315 MiB
ramon: sys.mem.avail        62083 MiB
ramon: sys.nprocs           1387
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/pY3mepThraPN.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             931117
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(smt.stats    0    101   2906    971  1013/912/92      94/0     5   13   51.77)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 115 := 4095&115
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 115 := 116 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 115 := 4095&115
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 115 := 116 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 185 := 4095&185
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 185 := 186 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 45 := 4095&45
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 45 := 46 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1 := 4095&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 1 := 46 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&1
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&1
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&2
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4095 := 4095&4095
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 4095 := 68719476676 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 45 := 4095&45
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 45 := 46 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 45 := 4095&45
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 45 := 46 << 11
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&94208
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 22 := 23 << 12
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&94208
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 22 := 23 << 12
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&94208
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 22 := 23 << 12
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1 := 4095&4096
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4094 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 8 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 4095&20480
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 8388612 := 8388613 << 12
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4092 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4088 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4080 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4064 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4032 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3968 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3840 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3584 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1056 := 4095&20480
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   69.4444     10000        49          0            1        2)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3600 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3600 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3593 := 4095&20480
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 3592 := 4095&20480
(smt.stats    1    202   3818   2686  1580/1311/127     281/8     9   21   52.35)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4032 := 4095&20480
(smt.stats    2    313   5722   6841  1696/1549/194     514/73    11   35   52.35)
(sat.ddfw       1      1   42.1983     20001        98          1            1        3)
(smt.stats    3    414   8189  11129  1989/1764/197     788/126    13   38   52.55)
(smt.stats    4    525   9597  15335  2062/1880/209     965/171    16   59   52.55)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2049
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2050
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2176
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2064
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2192
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2050
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2050
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2176
(smt.stats    5    647  11224  18082  2227/1940/221    1205/218    18   74   52.84)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2048 := 67108863&2064
(sat.ddfw       1      1   45.1467     40001       196          2            1        5)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2070
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2070
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2070
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2066 := 1073741823&2070
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1050 := 1073741823&2066
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1050 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1050 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 26 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 26 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 26 := 1073741823&2074
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 26 := 1073741823&2074
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations          :lemmas          :deletions    )
(smt.stats    6    748  13528  23015  2332/2116/261    1433/291    20   80   53.13)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 16777260 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2074 := 1073741823&2074
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 68719478810 := 33554440 << 29
(smt.stats    7    859  15403  26994  2417/2204/279    1582/312    22   89   53.23)
(sat.ddfw       1      1   41.4938     70001       343          3            1        8)
(smt.stats    8    981  18346  32625  2487/2262/279    1889/313    22   89   53.42)
(smt.stats    9   1115  22237  44017  2549/2317/280    2416/358    23  107   53.52)
ramon: poll                 wall=1.000s usage=0.840s mem=56024KiB load=0.84 rootload=0.82
(smt.stats   10   1216  25249  50472  2589/2336/280    2590/359    23  107   53.71)
(smt.stats   11   1327  28951  56127  2645/2369/281    2844/387    24  110   53.90)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 848 := 2047&19327352832
(sat.ddfw       1      1   36.9344    110001       539          4            1       12)
(smt.stats   12   1449  31601  63476  2702/2441/281    3175/389    24  110   54.02)
(smt.stats   13   1583  34792  72970  2711/2476/291    3473/619    25  114   54.02)
(smt.stats   14   1730  37497  86111  2722/2487/291    3682/688    26  146   54.11)
(smt.stats   15   1831  39473  91244  2725/2490/291    3810/688    26  146   54.11)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   16   1942  43162 107227  2726/2491/292    3996/710    27  167   54.26)
(sat.ddfw       1      1   32.5514    160000       784          5            1       17)
(smt.stats   17   2065  46380 115563  2794/2503/294    4632/737    28  177   54.26)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&224
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&224
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&160
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&12480
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359750848 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&12480
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359750848 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&12480
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359750848 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&9152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359747520 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&9152
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 34 #851 #853) 64)) 34359747520 := 34359738478 << 5
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 34359738367 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 34359738367 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 17179869240 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 17179869240 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
shl: (shl[35] (bv2int %0) (+ 35 (* 34359738367 #115))) 17179869240 := 17179869239 << 6
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 1 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 63 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 62 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 60 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 56 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 48 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 32 := 63&3520
(smt.stats   18   2199  48293 120933  3003/2565/294    4927/741    28  177   54.65)
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 1 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 2 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 4 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 8 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 16 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 2 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 4 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 8 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 5 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 4 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 2 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 8 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 16 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 0 := 63&3520
band: (band[35] (if (= #119 34) 1 (if #530 3 #624)) (shl[35] (bv2int %0) (+ 35 #627))) 32 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 1 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 2 := 63&3520
band: (band[35] (if (or #639 #640 #641 #642 #643 #644 #645 #646 #647 #648 #649 #650 #651 #652 #653 #654 ...) 0 (if #668 1 #736)) (shl[64] (* 2 #113) (mod #854 64))) 4 := 63&3520
(smt.stats   19   2346  51598 132405  3082/2827/371    5254/770    29  187   54.75)
ramon: poll                 wall=2.000s usage=1.839s mem=57204KiB load=1.00 rootload=0.99
(smt.stats   20   2507  54742 140848  3132/2879/372    5502/811    30  201   54.88)
(smt.stats   21   2608  59139 149947  3146/2887/374    5758/812    30  201   55.00)
(sat.ddfw       1      1    28.958    220001      1078          6            1       23)
(smt.stats   22   2719  63058 158523  3269/2945/375    6119/851    31  217   55.33)
(sat.ddfw       1      1   25.9355    290001      1421          7            1       30)
(smt.stats   23   2841  65951 168031  3519/3021/375    6362/852    31  217   55.61)
(smt.stats   24   2975  69623 182434  3601/3334/382    6961/930    33  223   55.71)
ramon: poll                 wall=3.000s usage=2.839s mem=58060KiB load=1.00 rootload=1.00
(smt.stats   25   3122  74846 195359  3616/3343/382    7589/934    33  223   55.80)
(sat.ddfw       1      1   23.3645    370001      1813          8            1       38)
(smt.stats   26   3283  78467 201179  3794/3352/382    7930/992    34  227   55.99)
ramon: poll                 wall=4.002s usage=3.843s mem=58272KiB load=1.00 rootload=1.01
(sat.ddfw       1      1   21.1964    460001      2254          9            1       47)
(smt.stats   27   3460  81454 212626  4006/3627/386    9041/995    34  227   56.18)
(smt.stats   28   3561  84380 222915  4107/3776/387    9891/1031    35  242   56.38)
ramon: poll                 wall=5.000s usage=4.839s mem=58656KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   29   3672  87460 232052  4273/3868/387   10296/1038    35  242   56.38)
(sat.ddfw       1      1   19.3911    560001      2745         10            1       57)
(smt.stats   30   3794  91383 249236  4422/4042/387   10763/1180    36  246   56.48)
(smt.stats   31   3928  96266 271448  4451/4175/387   11738/1180    36  246   56.72)
ramon: poll                 wall=6.000s usage=5.839s mem=59228KiB load=1.00 rootload=1.00
(smt.stats   32   4075 101664 284259  4493/4199/387   12694/1181    36  246   56.93)
(sat.ddfw       1      1   17.8456    670001      3284         11            1       68)
(smt.stats   33   4236 108060 317918  4593/4264/388   13112/1381    37  258   57.02)
ramon: poll                 wall=7.000s usage=6.837s mem=59368KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   16.5677    790001      3872         12            1       80)
(smt.stats   34   4413 112339 339093  4861/4595/389   14062/1459    38  261   57.21)
(smt.stats   35   4607 118342 370491  4882/4600/389   15092/1461    38  261   57.40)
ramon: poll                 wall=8.000s usage=7.837s mem=59948KiB load=1.00 rootload=1.00
(smt.stats   36   4708 120730 382659  4937/4642/389   15809/1462    38  261   57.40)
(sat.ddfw       1      1   15.4431    920001      4509         13            1       93)
(smt.stats   37   4819 122744 390764  5058/4706/389   16236/1463    38  261   57.59)
(smt.stats   38   4941 125462 408661  5242/4857/389   17025/1464    38  261   57.69)
ramon: poll                 wall=9.000s usage=8.837s mem=60216KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 22)
(smt.stats   39   5075 129644 425183  5311/4987/390   17997/1730    39  263   57.78)
(sat.ddfw       1      1   14.4823   1060001      5196         14            1      108)
(smt.stats   40   5222 136028 446595  5422/5055/391   18921/1734    39  263   58.08)
ramon: poll                 wall=10.000s usage=9.837s mem=60424KiB load=1.00 rootload=1.00
(smt.stats   41   5383 142535 477422  5616/5174/391   19623/1930    40  266   58.37)
(smt.stats   42   5560 147423 499427  5717/5371/391   21037/1931    40  266   58.66)
ramon: poll                 wall=11.000s usage=10.836s mem=60952KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   13.6091   1210001      5931         15            1      123)
(smt.stats   43   5754 153337 528331  5927/5465/391   22272/1937    40  266   58.85)
ramon: poll                 wall=12.000s usage=11.829s mem=61268KiB load=0.99 rootload=0.99
(sat.ddfw       1      1   12.9251   1370001      6715         16            1      139)
(smt.stats   44   5967 158736 554002  6130/5864/392   23905/2039    41  268   59.13)
(smt.stats   45   6068 160864 575779  6141/5875/394   25080/2039    41  268   59.23)
ramon: poll                 wall=13.002s usage=12.830s mem=61592KiB load=1.00 rootload=1.00
(smt.stats   46   6179 164326 597992  6260/5900/394   25465/2039    41  268   59.32)
(smt.stats   47   6301 168300 619328  6331/6028/394   25829/2039    41  268   59.32)
(smt.stats   48   6435 169845 635338  6477/6058/394   26364/2337    42  270   59.51)
(sat.ddfw       1      1   12.2144   1540001      7549         17            1      156)
ramon: poll                 wall=14.002s usage=13.830s mem=61816KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   49   6582 174028 656779  6494/6216/394   27181/2337    42  270   59.61)
(smt.stats   50   6743 180454 678243  6605/6224/394   27839/2338    42  270   59.93)
ramon: poll                 wall=15.000s usage=14.798s mem=62160KiB load=0.97 rootload=0.97
(smt.stats   51   6920 184966 717163  6822/6370/394   28389/2340    42  270   59.93)
(smt.stats   52   7114 190147 767794  6896/6582/394   29248/2341    42  270   60.03)
(sat.ddfw       1      1   11.5622   1720001      8431         18            1      174)
ramon: poll                 wall=16.000s usage=15.794s mem=62596KiB load=1.00 rootload=0.99
(smt.stats   53   7327 197829 826067  7123/6631/394   29988/2353    42  270   60.31)
ramon: poll                 wall=17.000s usage=16.841s mem=63136KiB load=1.05 rootload=1.05
(sat.ddfw       1      1   11.0555   1910001      9362         19            1      193)
(smt.stats   54   7561 201354 858629  7348/6877/394   31430/2361    42  270   60.51)
ramon: poll                 wall=18.000s usage=17.843s mem=63284KiB load=1.00 rootload=1.00
(smt.stats   55   7662 203987 875001  7449/7095/394   31859/2361    42  270   60.51)
(smt.stats   56   7773 208246 906200  7487/7194/394   32617/2361    42  270   61.00)
(smt.stats   57   7895 211931 922931  7559/7203/394   33085/2362    42  270   61.10)
ramon: poll                 wall=19.000s usage=18.853s mem=63428KiB load=1.01 rootload=1.01
(sat.ddfw       1      1   10.5519   2110001     10343         20            1      214)
(smt.stats   58   8029 215793 938075  7600/7301/394   33666/2363    42  270   61.19)
ramon: poll                 wall=20.000s usage=19.853s mem=63392KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 23:08:14 2024
ramon: root.execname        z3
ramon: root.utime           19.880s
ramon: root.stime           0.020s
ramon: group.total          19.911s
ramon: group.utime          19.887s
ramon: group.stime          0.024s
ramon: group.mempeak        63652KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.060s
ramon: loadavg              0.99
