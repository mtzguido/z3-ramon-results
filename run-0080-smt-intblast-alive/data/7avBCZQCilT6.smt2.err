ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 17:39:35 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         30012 MiB
ramon: sys.mem.avail        61765 MiB
ramon: sys.nprocs           1273
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/7avBCZQCilT6.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             4077846
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   4272    566  1157/1010/109     100/21     7   16   19.28)
(smt.stats    1    202   5785   1319  2106/1875/111     201/35     9   18   19.47)
(smt.stats    2    313   7628   2673  2235/2012/121     304/47    12   28   19.47)
(smt.stats    3    415   9765   4417  2365/2156/128     412/60    13   34   19.56)
(smt.stats    4    526  11672   5383  2423/2187/130     518/94    14   43   19.68)
(smt.stats    5    648  15493   8106  2442/2227/130     635/94    14   43   19.79)
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    749  16877  11088  2462/2233/130     734/94    14   43   19.79)
(smt.stats    7    860  20389  16350  2464/2250/131     845/107    15   43   19.89)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 634&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 633024028482732666 := 631 << 1
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 634&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 633024028482732666 := 631 << 1
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 1230550730754&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 1230550730754 := 631 << 1
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 1230550730754&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 1230550730754 := 631 << 1
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 1262&0
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 4398046511103 := 631 << 1
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 1262&0
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 1263 := 631 << 1
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 1262&0
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 1263 := 631 << 1
(smt.stats    8    982  21717  19392  2523/2303/144     962/115    17   53   20.01)
ramon: poll                 wall=1.000s usage=0.938s mem=21164KiB load=0.94 rootload=0.92
(smt.stats    9   1116  23346  21458  2655/2337/144    1109/117    17   53   20.11)
(smt.stats   10   1217  24750  22601  2782/2446/144    1212/121    17   53   20.20)
(smt.stats   11   1328  26280  25334  2922/2570/144    1332/125    17   53   20.30)
ramon: poll                 wall=2.000s usage=1.937s mem=21452KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1450  28077  27316  2948/2708/146    1454/162    18   58   20.30)
(smt.stats   13   1584  30201  31171  2996/2761/151    1612/172    19   60   20.45)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510576&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 4398046510576 := 4398046510833 << 3
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510576&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 4398046510576 := 4398046510833 << 3
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510576&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 4398046510576 := 4398046510833 << 3
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510576&0
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 316659348798960 := 4398046510833 << 3
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046508936&0
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 4398046508935 := 4398046510833 << 3
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046508936&0
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 4398046508935 := 4398046510833 << 3
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046508936&0
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 1 := 4398046510833 << 3
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046508936&0
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 4398046508935 := 4398046510833 << 3
(smt.stats   14   1731  32766  38754  3047/2779/151    1774/207    20   66   20.45)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 8995 := 4398046509049&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 8993 := 4398046509049&8995
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 30786325575673 := 4398046510847 << 17
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046509049&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510589&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510588&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510589&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510588&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510528&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510528&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510080&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046509049&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046509050&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046509052&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046509056&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510588&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510528&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510080&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 8192 := 4398046510080&8995
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 30786325576704 := 4398046510847 << 17
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 8993 := 4398046510588&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 8992 := 4398046510588&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 8192 := 4398046510588&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 8192 := 4398046510556&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 8192 := 4398046509056&8995
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 30786325575680 := 4398046510847 << 17
(smt.stats   15   1832  35218  41828  3114/2866/213    1905/230    22   78   20.75)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 4398046510551 := 4398046510847 << 17
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 4398046510551 := 4398046510847 << 17
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 1 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 1 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 2 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 4 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 8 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 16 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 32 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 64 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 128 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 256 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 512 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 1024 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 2048 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 4096 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 8192 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 128 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 256 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 512 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 1024 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 2048 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 4096 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 8192 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 128 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 128 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 4096 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 4096 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 256 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 256 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 512 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 1024 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 2048 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 32 := 4398012825600&8995
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398012825600&8995
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (or #588 #589 #590) 0 (if #591 1 #699))) 64 := 4398012825600&8995
(smt.stats   16   1943  37051  46188  3225/2988/344    2009/247    24  120   21.14)
(smt.stats   17   2065  40125  50528  3305/3061/347    2140/268    25  129   21.33)
(smt.stats   18   2199  44979  56454  3313/3069/347    2279/268    25  129   21.43)
ramon: poll                 wall=3.000s usage=2.937s mem=22732KiB load=1.00 rootload=1.00
(smt.stats   19   2346  46578  60095  3315/3071/347    2434/278    26  132   21.43)
(smt.stats   20   2507  48698  66184  3319/3075/348    2588/281    27  140   21.63)
(smt.stats   21   2608  49739  69886  3319/3075/349    2690/281    27  140   21.63)
(smt.stats   22   2719  50989  74534  3321/3077/349    2803/281    28  145   21.63)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2302928 := 4398046510782&2302928
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2302848 := 4398046510782&2302928
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 0 := 4398046510782&2302928
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2302924 := 4398046510782&2302928
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2302912 := 4398046510782&2302928
(smt.stats   23   2841  53669  78008  3468/3090/351    2983/289    29  145   21.63)
(smt.stats   24   2975  55542  83657  3618/3371/364    3237/318    30  157   21.82)
(smt.stats   25   3122  58551  91339  3669/3387/366    3629/456    31  159   22.12)
ramon: poll                 wall=4.000s usage=3.937s mem=23596KiB load=1.00 rootload=1.00
(smt.stats   26   3283  63316 103268  3814/3567/367    3823/459    31  159   22.21)
(smt.stats   27   3460  68477 114912  3831/3585/374    4223/592    33  184   22.21)
(smt.stats   28   3561  71375 119373  3843/3590/375    4343/592    33  184   22.21)
(smt.stats   29   3672  75105 131251  3855/3609/376    4482/680    34  185   22.32)
(smt.stats   30   3794  78604 138944  3941/3610/376    4732/693    35  190   22.32)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2310144 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2310144 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2310144 := 4398046510254&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2314240 := 4398046510254&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2363392 := 4398046510254&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2363392 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2310144 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2314240 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2319976 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2310144 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2314240 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2310144 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2314240 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2310144 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2314240 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2363392 := 4398046510250&150924710209
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (or #724 #725 #726 #727) 0 (if #728 1 #866))) 2359296 := 4398046510250&150924710209
(smt.stats   31   3928  81005 146738  4222/3711/376    5072/700    35  190   22.62)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4075  84580 156868  4226/3980/413    5343/781    36  197   22.71)
(smt.stats   33   4236  95255 180282  4229/3983/413    5529/852    37  201   22.81)
(smt.stats   34   4413 105722 201477  4238/3992/414    5778/871    38  207   22.81)
ramon: poll                 wall=5.000s usage=4.936s mem=24140KiB load=1.00 rootload=1.00
(smt.stats   35   4607 112604 214585  4433/4154/417    6116/978    39  215   22.90)
ramon: poll                 wall=6.000s usage=5.936s mem=24264KiB load=1.00 rootload=1.00
(smt.stats   36   4708 116067 219298  4537/4213/417    6332/986    39  215   23.00)
(smt.stats   37   4819 119608 231209  4677/4423/420    6824/1175    40  217   23.00)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   38   4941 123499 243525  4748/4449/420    7166/1178    40  217   23.19)
ramon: poll                 wall=7.000s usage=6.936s mem=24600KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 167)
(smt.stats   39   5075 128022 250983  4861/4557/420    7228/1180    40  217   23.19)
(smt.stats   40   5222 132268 268321  4902/4624/420    7487/1185    40  217   23.19)
ramon: poll                 wall=8.000s usage=7.936s mem=24612KiB load=1.00 rootload=0.99
(smt.stats   41   5383 137362 276677  5140/4670/420    8018/1189    40  217   23.38)
(smt.stats   42   5560 141587 288379  5263/4909/420    8346/1193    40  217   23.47)
ramon: poll                 wall=9.000s usage=8.936s mem=24848KiB load=1.00 rootload=1.00
(smt.stats   43   5754 148025 307616  5325/5065/420    8966/1193    40  217   23.73)
(smt.stats   44   5967 156901 346035  5339/5079/423    9313/1727    43  243   23.83)
(smt.stats   45   6068 161320 364699  5352/5092/424    9425/1727    43  243   23.83)
(smt.stats   46   6179 167452 387291  5372/5106/425    9580/1747    45  249   23.83)
ramon: poll                 wall=10.000s usage=9.935s mem=25248KiB load=1.00 rootload=1.00
(smt.stats   47   6301 172211 394163  5479/5145/425    9797/1748    45  249   23.93)
ramon: poll                 wall=11.000s usage=10.935s mem=25380KiB load=1.00 rootload=1.00
(smt.stats   48   6435 175036 401308  5763/5299/425   10026/1753    45  249   24.02)
(smt.stats   49   6582 179659 410008  5853/5593/426   10260/1828    46  249   24.02)
ramon: poll                 wall=12.000s usage=11.935s mem=25524KiB load=1.00 rootload=1.00
(smt.stats   50   6743 185209 438151  5901/5599/426   10558/1828    46  249   24.21)
ramon: poll                 wall=13.000s usage=12.935s mem=25824KiB load=1.00 rootload=1.00
(smt.stats   51   6920 188389 449425  6297/5688/426   11089/1836    46  249   24.50)
(smt.stats   52   7114 195767 473982  6335/6069/427   11589/1987    47  254   24.50)
(smt.stats   53   7327 203199 506291  6351/6083/427   12119/1988    47  254   24.50)
ramon: poll                 wall=14.000s usage=13.934s mem=26148KiB load=1.00 rootload=1.00
(smt.stats   54   7561 208801 532452  6545/6099/427   12684/1992    47  254   24.69)
(smt.stats   55   7662 212375 551257  6602/6328/430   12932/2222    48  264   24.78)
(smt.stats   56   7773 218706 584303  6607/6330/430   13126/2222    48  264   24.78)
(smt.stats   57   7895 223782 605786  6704/6335/430   13448/2229    48  264   24.78)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   58   8029 225801 613994  6767/6455/430   13638/2230    48  264   24.88)
ramon: poll                 wall=15.000s usage=14.934s mem=26320KiB load=1.00 rootload=1.00
(smt.stats   59   8176 230695 636673  6895/6592/431   13980/2378    49  264   24.88)
(smt.stats   60   8337 238265 665591  7005/6628/431   14490/2381    49  264   24.97)
(smt.stats   61   8514 244126 697191  7089/6760/431   15093/2384    49  264   25.07)
ramon: poll                 wall=16.000s usage=15.934s mem=26552KiB load=1.00 rootload=1.00
(smt.stats   62   8708 248765 713122  7219/6816/431   15438/2388    49  264   25.26)
ramon: poll                 wall=17.001s usage=16.935s mem=26900KiB load=1.00 rootload=1.00
(smt.stats   63   8921 252905 734026  7605/6979/431   15937/2389    49  264   25.35)
ramon: poll                 wall=18.000s usage=17.934s mem=26948KiB load=1.00 rootload=1.00
(smt.stats   64   9155 260571 757737  7676/7355/431   16760/2390    49  264   25.45)
(smt.stats   65   9412 271502 796717  7695/7421/431   17621/2390    49  264   25.45)
(smt.stats   66   9513 274788 813259  7696/7422/431   17968/2390    49  264   25.54)
(smt.stats   67   9624 278015 837569  7697/7423/431   18421/2390    49  264   26.03)
(smt.stats   68   9746 281859 859179  7705/7431/431   18859/2390    49  264   26.03)
ramon: poll                 wall=19.000s usage=18.933s mem=27592KiB load=1.00 rootload=1.00
(smt.stats   69   9880 286892 888170  7713/7433/431   19524/2390    49  264   26.12)
(smt.delete-inactive-clauses  :num-deleted-clauses 111)
(smt.stats   70  10027 289670 908187  7726/7448/431   19666/2390    49  264   26.12)
(smt.stats   71  10188 294165 930741  7734/7454/431   20013/2390    49  264   26.12)
ramon: poll                 wall=20.000s usage=19.933s mem=27684KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 17:39:55 2024
ramon: root.execname        z3
ramon: root.utime           19.980s
ramon: root.stime           0.010s
ramon: group.total          20.000s
ramon: group.utime          19.984s
ramon: group.stime          0.016s
ramon: group.mempeak        27972KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.067s
ramon: loadavg              1.00
