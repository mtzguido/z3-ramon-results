ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 17:30:58 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         30976 MiB
ramon: sys.mem.avail        61767 MiB
ramon: sys.nprocs           1277
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/406wOGUJp4lg.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             4048098
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   4024   1087  1235/1111/90      98/6     3   15   19.10)
(smt.stats    1    202   5989   4944  2029/1694/90     195/23     3   15   19.19)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 61 := 64&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 60 := 64&60
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&61
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 61 := 62 << 7
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&61
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 61 := 62 << 7
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&1
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 1 := 62 << 7
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 64&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&60
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 60 := 62 << 7
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 59 := 64&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 58 := 64&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 64&60
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 60 := 62 << 7
(smt.stats    2    313   9394   7502  2228/2011/109     302/27     4   17   19.51)
(smt.stats    3    414  11479  10067  2334/2101/110     398/27     5   22   19.51)
(smt.stats    4    525  12276  11066  2431/2188/121     486/29     7   35   19.62)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 36028797018963968 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 2&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 18410715276690587648 := 2 << 2
(smt.stats    5    647  13781  12976  2470/2212/127     610/36     8   37   19.91)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&768
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 768 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&769
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 769 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&769
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 769 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 36028797018963967 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 32 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 8 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 385 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 2 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 4 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 32 := 32&384
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 32 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 32 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 31 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 31 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 30 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 28 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 1 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 31 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 30 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 4 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 32 := 6 << 6
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 32 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 8 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 4 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 4 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 4 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 2 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 1 := 384&32
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 32&384
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 1 := 384&32
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  15132  15481  2607/2331/231     721/49    10   46   20.21)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 128 := 2097152&1408
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 256 := 2097152&1408
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 512 := 2097152&1408
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1024 := 2097152&1408
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 128 := 2097152&1408
(smt.stats    7    859  16089  17790  2657/2392/263     856/71    12   69   20.50)
(smt.stats    8    981  18233  20676  2770/2500/278    1043/153    14  158   20.89)
(smt.stats    9   1115  21297  25366  2792/2518/279    1192/153    14  158   20.89)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 5 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 5 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 4 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 4 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 2 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 2 := 16&61
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&61
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 61 := 60 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&59
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 59 := 60 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&59
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 59 := 60 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&4
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 4 := 5 << 5
(smt.stats   10   1216  23090  29280  2826/2540/287    1303/182    16  166   20.98)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 4 := 5 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 4 := 5 << 5
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&160
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&160
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 16 := 16&160
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 3 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 3 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 2 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 2 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 2 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 160&16
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 16&160
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 16 := 160&16
(smt.stats   11   1327  25050  33833  2926/2633/309    1496/199    17  174   21.17)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&536871072
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&1073741856
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 36028798092705824 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&1610612768
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&1073741856
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 36028798092705824 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&1073741856
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 36028798092705824 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&32212254720
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 536870912 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&32212254720
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 536870912 := 30 << 30
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 536870912&32212254720
band: (band[55] (shl[55] (bv2int %0) (mod #110 55)) (if (= #625 54) 1 (if #627 2 #733))) 536870912 := 32212254720&536870912
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  27009  37982  3003/2706/345    1708/221    18  183   21.27)
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&265
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&266
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 266 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&1359
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&1354
shl: (shl[64] (bv2int %0) (mod (+ #110 #901) 64)) 1354 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&2
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 1073741832 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 0 := 1&2
shl: (shl[55] (bv2int %0) (mod (bv2int %0) 55)) 1073741832 := 1 << 1
band: (band[55] (if (or #749 #750 #751 #752 #753 #754 #755 #756 #757 #758) 0 (if #759 1 #865)) (shl[64] (bv2int %0) (mod #902 64))) 1 := 1&2
(smt.stats   13   1585  28952  41788  3128/2745/348    1949/226    18  183   21.76)
(smt.stats   14   1732  29617  45114  3225/2891/358    2110/237    19  194   21.86)
(smt.stats   15   1833  31543  49583  3229/2895/359    2281/244    21  196   22.05)
(smt.stats   16   1944  35430  55200  3270/2936/360    2519/288    22  196   22.15)
(smt.stats   17   2066  39154  60528  3311/2937/360    2796/291    22  196   22.25)
ramon: poll                 wall=1.000s usage=0.932s mem=23640KiB load=0.93 rootload=0.92
(smt.stats   18   2200  42313  65902  3368/3030/362    3134/336    23  200   22.34)
(smt.stats   19   2347  47215  76137  3560/3040/362    3443/344    23  200   22.53)
ramon: poll                 wall=2.000s usage=1.932s mem=24024KiB load=1.00 rootload=1.00
(smt.stats   20   2508  51188  84942  3650/3316/377    3889/405    24  208   22.63)
(smt.stats   21   2609  55841  94520  3652/3318/377    4119/405    24  208   22.63)
(smt.stats   22   2720  63471 112307  3666/3334/377    4240/511    25  236   22.72)
(smt.stats   23   2842  70557 130344  3685/3350/381    4429/537    26  241   22.72)
(smt.stats   24   2976  75067 143104  3746/3356/381    4732/540    26  241   23.01)
(smt.stats   25   3123  84021 158567  3757/3417/382    4927/584    27  242   23.01)
ramon: poll                 wall=3.002s usage=2.933s mem=24600KiB load=1.00 rootload=1.00
(smt.stats   26   3284  91640 176135  3765/3427/382    5230/584    27  242   23.10)
(smt.stats   27   3461  99010 192369  3797/3462/383    5531/643    28  245   23.10)
(smt.stats   28   3562 101257 196341  3840/3471/383    5766/654    28  245   23.20)
(smt.stats   29   3673 104789 201894  3937/3579/385    6077/658    28  245   23.30)
ramon: poll                 wall=4.000s usage=3.931s mem=24780KiB load=1.00 rootload=1.00
(smt.stats   30   3795 107927 207761  4064/3619/385    6266/660    28  245   23.48)
(smt.stats   31   3929 111325 216268  4181/3777/385    6796/742    29  248   23.48)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4076 114949 224489  4186/3845/390    7117/742    29  248   23.48)
(smt.stats   33   4237 121226 241554  4196/3855/390    7439/852    30  277   23.48)
ramon: poll                 wall=5.000s usage=4.931s mem=25376KiB load=1.00 rootload=1.00
(smt.stats   34   4414 127826 261292  4327/3866/391    7979/890    31  277   23.68)
(smt.stats   35   4608 136424 285172  4352/4003/391    8563/891    31  277   23.77)
(smt.stats   36   4709 139140 294926  4354/4013/391    8799/891    31  277   23.77)
(smt.stats   37   4820 142788 304084  4356/4015/391    8948/891    31  277   23.77)
(smt.stats   38   4942 147141 317499  4372/4030/391    9393/891    31  277   23.87)
(smt.delete-inactive-clauses  :num-deleted-clauses 17)
(smt.stats   39   5076 150653 328739  4375/4034/391    9747/891    31  277   23.87)
(smt.stats   40   5223 158244 345674  4387/4043/391   10033/892    31  277   23.87)
ramon: poll                 wall=6.000s usage=5.930s mem=25436KiB load=1.00 rootload=1.00
(smt.stats   41   5384 164321 362654  4427/4060/391   10366/894    31  277   23.96)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   42   5561 168797 376769  4560/4170/392   10883/1167    32  277   24.26)
ramon: poll                 wall=7.000s usage=6.930s mem=26072KiB load=1.00 rootload=1.00
(smt.stats   43   5755 175216 393747  4772/4231/392   11267/1177    32  277   24.53)
(smt.stats   44   5968 181863 410802  4971/4438/392   11868/1180    32  277   24.62)
ramon: poll                 wall=8.000s usage=7.929s mem=26304KiB load=1.00 rootload=1.00
(smt.stats   45   6069 184823 418747  5013/4671/392   12154/1180    32  277   24.62)
(smt.stats   46   6180 190114 440093  5033/4691/392   12529/1180    32  277   24.62)
(smt.stats   47   6302 195867 462459  5045/4703/393   12836/1395    33  284   24.72)
(smt.stats   48   6436 201274 482643  5196/4709/393   13368/1396    33  284   24.81)
(smt.stats   49   6583 205941 495650  5219/4866/393   13881/1396    33  284   24.81)
ramon: poll                 wall=9.000s usage=8.929s mem=26416KiB load=1.00 rootload=1.00
(smt.stats   50   6744 210608 509552  5379/4883/393   14268/1400    33  284   25.01)
ramon: poll                 wall=10.000s usage=9.927s mem=26984KiB load=1.00 rootload=0.99
(smt.stats   51   6921 214985 528749  5706/5062/393   14803/1400    33  284   25.10)
(smt.stats   52   7115 220496 550034  5725/5382/393   15516/1400    33  284   25.20)
(smt.stats   53   7328 229470 580869  5788/5391/394   16221/1743    34  285   25.29)
(smt.stats   54   7562 236184 611372  5803/5461/394   16952/1743    34  285   25.39)
(smt.stats   55   7663 242426 633884  5806/5464/394   17230/1743    34  285   25.39)
ramon: poll                 wall=11.002s usage=10.930s mem=27008KiB load=1.00 rootload=1.01
(smt.stats   56   7774 249147 674840  5808/5466/394   17505/1743    34  285   25.39)
(smt.stats   57   7896 255496 715361  5809/5467/395   17881/1957    35  296   25.48)
(smt.stats   58   8030 258243 731226  5822/5480/395   18405/1957    35  296   25.58)
(smt.stats   59   8177 262774 757771  5827/5485/395   19042/1957    35  296   25.58)
(smt.stats   60   8338 269785 801021  5840/5496/395   19615/1957    35  296   25.68)
(smt.stats   61   8515 275356 826732  5847/5503/395   20041/1957    35  296   25.68)
ramon: poll                 wall=12.000s usage=11.926s mem=27168KiB load=1.00 rootload=0.99
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   62   8709 286031 872550  5851/5507/395   20402/1957    35  296   25.68)
(smt.stats   63   8922 295695 935145  5857/5513/395   21359/1957    35  296   25.79)
(smt.stats   64   9156 300280 958300  5864/5520/395   21741/1957    35  296   25.88)
(smt.stats   65   9413 312608 1030014  5872/5528/396   22474/2213    36  296   25.88)
(smt.stats   66   9514 317027 1045734  5874/5530/396   22760/2213    36  296   25.88)
(smt.stats   67   9625 322626 1082415  5876/5532/396   23041/2213    36  296   25.98)
ramon: poll                 wall=13.000s usage=12.926s mem=27500KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   68   9747 328671 1118483  5877/5533/396   23347/2213    36  296   25.98)
(smt.stats   69   9881 336153 1160750  5877/5533/397   23872/2259    37  317   25.98)
(smt.delete-inactive-clauses  :num-deleted-clauses 1374)
(smt.stats   70  10028 340662 1185666  5880/5536/397   23032/2259    37  317   26.07)
(smt.stats   71  10189 350887 1229961  5882/5536/397   23357/2259    37  317   26.07)
(smt.stats   72  10366 358802 1277370  5898/5552/397   23792/2259    37  317   26.32)
ramon: poll                 wall=14.000s usage=13.926s mem=27852KiB load=1.00 rootload=1.00
(smt.stats   73  10560 364267 1317251  5917/5569/397   24526/2259    37  317   26.32)
(smt.stats   74  10773 373888 1387213  5922/5572/397   25061/2259    37  317   26.32)
(smt.stats   75  11007 379982 1418390  6131/5583/397   25694/2266    37  317   26.51)
ramon: poll                 wall=15.000s usage=14.926s mem=28332KiB load=1.00 rootload=1.00
(smt.stats   76  11264 393443 1507533  6236/5888/401   26267/2615    39  324   26.51)
(smt.stats   77  11546 401345 1557408  6270/5922/402   27193/2615    39  324   26.61)
(smt.stats   78  11647 403839 1576777  6273/5925/402   27462/2615    39  324   26.81)
(smt.stats   79  11758 407823 1595799  6278/5928/402   27664/2651    40  372   26.91)
(smt.stats   80  11880 411941 1613330  6295/5934/402   27973/2652    40  372   26.91)
ramon: poll                 wall=16.002s usage=15.929s mem=28396KiB load=1.00 rootload=1.01
(smt.stats   81  12014 414552 1625895  6307/5959/402   28301/2652    40  372   26.91)
(smt.stats   82  12161 417689 1639035  6579/5959/402   28763/2654    40  372   27.00)
ramon: poll                 wall=17.000s usage=16.925s mem=28840KiB load=1.00 rootload=0.99
(smt.stats   83  12322 419797 1648296  6814/6257/402   29028/2656    40  372   27.19)
(smt.stats   84  12499 421977 1658613  6968/6571/403   29531/2730    41  377   27.19)
(smt.stats   85  12693 433982 1700276  6972/6624/404   29747/2730    41  377   27.19)
ramon: poll                 wall=18.002s usage=17.929s mem=29048KiB load=1.00 rootload=1.00
(smt.stats   86  12906 445934 1749749  6980/6627/404   30421/2730    41  377   27.28)
(smt.stats   87  13140 454911 1788861  6993/6645/404   31084/2855    42  381   27.28)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   88  13397 467646 1844138  7099/6653/405   32043/2864    42  381   27.38)
ramon: poll                 wall=19.000s usage=18.925s mem=29304KiB load=1.00 rootload=1.00
(smt.stats   89  13679 484822 1918531  7180/6823/407   32923/2925    43  391   27.48)
(smt.stats   90  13989 495079 1953125  7569/6846/407   34256/2932    43  391   27.76)
ramon: poll                 wall=20.000s usage=19.925s mem=29560KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 17:31:19 2024
ramon: root.execname        z3
ramon: root.utime           19.980s
ramon: root.stime           0.010s
ramon: group.total          19.999s
ramon: group.utime          19.987s
ramon: group.stime          0.012s
ramon: group.mempeak        29560KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.072s
ramon: loadavg              1.00
