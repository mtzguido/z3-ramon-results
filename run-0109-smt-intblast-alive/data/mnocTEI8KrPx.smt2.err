ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:52:55 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         40766 MiB
ramon: sys.mem.avail        61708 MiB
ramon: sys.nprocs           1253
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/mnocTEI8KrPx.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3073950
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   2958    381  1187/1078/113     103/17    11   17   19.26)
(smt.stats    1    202   4407   1033  1842/1580/115     205/23    12   18   19.36)
(smt.stats    2    313   5588   1834  1968/1713/115     347/24    13   19   19.46)
(smt.stats    3    414   8000   3795  2020/1827/116     469/34    14   23   19.46)
(smt.stats    4    525   8874   4762  2581/2318/121     583/109    17   29   19.65)
(smt.stats    5    647  12012   7663  2704/2407/122     722/111    18   30   19.75)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas         :deletions    )
(smt.stats    6    748  14873   9667  2774/2534/122     850/111    18   30   19.85)
(smt.stats    7    859  17893  12195  2791/2568/123     977/164    19   32   19.85)
(smt.stats    8    981  20342  18672  2813/2592/139    1080/177    21   50   19.94)
ramon: poll                 wall=1.000s usage=0.924s mem=21180KiB load=0.92 rootload=0.92
(smt.stats    9   1115  22902  23357  2843/2602/140    1220/187    22   50   19.94)
(smt.stats   10   1216  23474  24824  2861/2634/140    1323/187    22   50   19.94)
(smt.stats   11   1327  24439  26786  2885/2645/140    1441/191    22   50   20.04)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas          :deletions    )
(smt.stats   12   1449  27947  31088  2890/2667/142    1557/197    23   55   20.04)
(smt.stats   13   1583  30543  33355  2986/2757/145    1697/204    24   56   20.13)
(smt.stats   14   1730  31555  35299  3034/2768/145    1868/215    25   58   20.13)
(smt.stats   15   1831  33743  37947  3088/2818/145    1984/217    25   58   20.23)
(smt.stats   16   1942  34428  39618  3104/2878/145    2111/217    25   58   20.23)
(smt.stats   17   2064  35515  42880  3153/2898/145    2258/220    25   58   20.23)
(smt.stats   18   2198  37176  46608  3199/2941/145    2412/220    25   58   20.23)
(smt.stats   19   2345  39857  49381  3205/2982/145    2559/220    25   58   20.39)
ramon: poll                 wall=2.000s usage=1.923s mem=21840KiB load=1.00 rootload=0.99
(smt.stats   20   2506  42063  51505  3216/2985/145    2725/220    25   58   20.61)
(smt.stats   21   2607  44052  53007  3219/2994/145    2825/220    25   58   20.61)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 11280636117&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 11280636117&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 43 := 11280636160&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 42 := 11280636160&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 40 := 11280636160&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 32 := 11280636160&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 11280636160&168
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 4409327147264 := 4398046511006 << 8
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 16 := 11280636160&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 11280636160&168
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 4409327147264 := 4398046511006 << 8
(smt.stats   22   2718  47411  56241  3303/3010/145    2926/221    25   58   20.61)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4386765875097&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 11280636117&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 11280636160&168
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 4409327147264 := 4398046511006 << 8
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 159 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 158 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 156 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 152 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 128 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 64 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 4398046511005 := 4398046511006 << 8
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
shl: (shl[42] (bv2int %0) (mod (bv2int %0) 42)) 4398046510652 := 4398046511006 << 8
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 1 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 2 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 168 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 164 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 160 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 160 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 160 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 64 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 64 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 31 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 2 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 4 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 8 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 16 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 28 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 24 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 16 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 4 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 16 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 64 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 128 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 24 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 16 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 16 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 16 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 1 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 2 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 2 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 1 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 8 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 64 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 128 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 2 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 2 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 8 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 64 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 64 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 128 := 4398046486016&168
(smt.stats   23   2840  49240  63680  3444/3127/260    3093/288    26   61   21.10)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 4 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 4398046486016&168
band: (band[42] (shl[42] (bv2int %0) (mod #107 42)) (if (= #587 41) 1 (if #589 2 #704))) 4 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 4 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 4 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 32 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 32 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 32 := 4398046486016&168
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 32 := 4398046486016&168
(smt.stats   24   2974  51876  69531  3447/3214/327    3227/320    28  102   21.20)
(smt.stats   25   3121  55898  75053  3478/3239/332    3396/320    28  102   21.29)
(smt.stats   26   3282  61969  83262  3481/3242/333    3560/343    30  110   21.29)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 16 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 16 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 256 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 256 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 256 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 256 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1024 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1024 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1024 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1024 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1024 := 4398046511009&1344
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1280 := 4398046511009&1344
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 4398046511009 := 4398046511009 << 11
(smt.stats   27   3459  66755  91084  3600/3353/375    3811/376    31  120   21.77)
(smt.stats   28   3560  70583  96776  3620/3367/377    3948/378    31  120   21.87)
(smt.stats   29   3671  73984 102462  3808/3538/379    4179/394    32  129   22.17)
(smt.stats   30   3793  75828 105800  4064/3770/380    4425/395    32  129   22.35)
(smt.stats   31   3927  79132 117305  4296/4019/381    5089/441    33  132   22.55)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   32   4074  85136 129111  4351/4038/381    5495/525    34  133   22.74)
ramon: poll                 wall=3.000s usage=2.923s mem=24280KiB load=1.00 rootload=1.00
(smt.stats   33   4235  90911 142004  4394/4108/381    5880/528    34  133   22.83)
(smt.stats   34   4412  98175 162706  4542/4232/382    6414/736    35  133   23.12)
(smt.stats   35   4606 103485 180338  4604/4287/382    6815/740    35  133   23.12)
ramon: poll                 wall=4.000s usage=3.923s mem=24608KiB load=1.00 rootload=1.00
(smt.stats   36   4707 106590 188400  4670/4348/383    6981/839    36  140   23.21)
(smt.stats   37   4818 109641 199214  4728/4416/383    7174/840    36  140   23.21)
(smt.stats   38   4940 113212 217304  4737/4470/386    7404/921    37  149   23.21)
(smt.delete-inactive-clauses  :num-deleted-clauses 75)
(smt.stats   39   5074 115515 229637  4746/4476/390    7678/921    37  149   23.31)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   40   5221 120393 254334  4872/4553/390    8017/1046    38  176   23.41)
ramon: poll                 wall=5.000s usage=4.922s mem=25056KiB load=1.00 rootload=1.00
(smt.stats   41   5382 124612 272647  4896/4595/390    8288/1046    38  176   23.60)
(smt.stats   42   5559 128400 288804  4911/4619/392    8841/1221    39  188   23.69)
ramon: poll                 wall=6.000s usage=5.922s mem=25312KiB load=1.00 rootload=1.00
(smt.stats   43   5753 132791 306680  5183/4627/392    9463/1223    39  188   23.98)
ramon: poll                 wall=7.000s usage=6.922s mem=25608KiB load=1.00 rootload=1.00
(smt.stats   44   5966 137148 335309  5404/4939/392   10127/1233    39  188   24.16)
(smt.stats   45   6067 140167 347623  5478/5125/392   10574/1235    39  188   24.26)
ramon: poll                 wall=8.000s usage=7.922s mem=26172KiB load=1.00 rootload=1.00
(smt.stats   46   6178 143789 370632  5535/5196/392   10890/1240    39  188   24.26)
(smt.stats   47   6300 147685 386221  5589/5255/392   11261/1241    39  188   24.26)
(smt.stats   48   6434 152142 402157  5664/5375/393   11723/1625    40  206   24.45)
(smt.stats   49   6581 156186 423775  5684/5385/393   12299/1627    40  206   24.45)
ramon: poll                 wall=9.000s usage=8.921s mem=26184KiB load=1.00 rootload=0.99
(smt.stats   50   6742 160843 450328  5750/5407/394   12593/1876    41  210   24.55)
(smt.stats   51   6919 164555 470857  5822/5533/395   13015/1876    41  210   24.55)
(smt.stats   52   7113 171009 496095  5917/5538/395   13485/1922    42  215   24.69)
ramon: poll                 wall=10.002s usage=9.925s mem=26304KiB load=1.00 rootload=1.01
(smt.stats   53   7326 180699 530361  5970/5681/396   13875/1922    42  215   24.78)
(smt.stats   54   7560 188822 560765  5975/5686/397   14149/2032    44  227   24.88)
(smt.stats   55   7661 195630 584224  5980/5691/397   14312/2032    44  227   24.88)
(smt.stats   56   7772 199132 600601  5984/5695/398   14527/2080    45  235   24.88)
(smt.stats   57   7894 202764 622299  5991/5700/398   14769/2080    45  235   24.88)
(smt.stats   58   8028 205583 636484  6029/5707/398   15201/2083    45  235   24.88)
ramon: poll                 wall=11.002s usage=10.925s mem=26560KiB load=1.00 rootload=1.00
(smt.stats   59   8175 210114 663084  6107/5767/398   15632/2092    45  235   24.97)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   60   8336 214762 686954  6235/5833/398   15960/2098    45  235   24.97)
(smt.stats   61   8513 218778 715547  6307/5976/398   16375/2105    45  235   25.07)
ramon: poll                 wall=12.000s usage=11.921s mem=26560KiB load=1.00 rootload=0.99
(smt.stats   62   8707 223308 745530  6502/6066/398   17147/2108    45  235   25.16)
(smt.stats   63   8920 228642 787272  6719/6246/398   17688/2115    45  235   25.26)
ramon: poll                 wall=13.000s usage=12.920s mem=26856KiB load=1.00 rootload=1.00
(smt.stats   64   9154 233738 806108  6926/6445/398   18244/2124    45  235   25.47)
ramon: poll                 wall=14.000s usage=13.919s mem=26976KiB load=1.00 rootload=1.00
(smt.stats   65   9411 241099 854855  7122/6821/400   18959/2543    46  241   25.56)
(smt.stats   66   9512 242850 862119  7153/6835/400   19330/2545    46  241   25.66)
(smt.stats   67   9623 245523 878355  7231/6908/400   19552/2546    46  241   25.66)
(smt.stats   68   9745 249686 919549  7249/6960/401   19789/2660    47  244   25.66)
(smt.stats   69   9879 253712 943610  7268/6963/401   20346/2660    47  244   25.75)
ramon: poll                 wall=15.000s usage=14.919s mem=27488KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 457)
(smt.stats   70  10026 256665 956663  7279/6990/401   20321/2660    47  244   25.85)
(smt.stats   71  10187 264496 983876  7396/6999/401   20919/2664    47  244   25.85)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   72  10364 272519 1020837  7493/7200/403   21658/2961    48  250   26.04)
ramon: poll                 wall=16.000s usage=15.919s mem=27744KiB load=1.00 rootload=1.00
(smt.stats   73  10558 279481 1059929  7499/7208/403   22530/2961    48  250   26.13)
(smt.stats   74  10771 292299 1142639  7508/7214/403   23337/2963    48  250   26.13)
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 1 := 1&2
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 1&2
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 197912092999681 := 2 << 2
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 197912092999680 := 1 << 1
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 4398046511104 := 1 << 1
band: (band[42] (shl[64] (bv2int %0) (mod #331 64)) (if (= #723 63) 0 (if #725 1 #869))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #330) 64)) 4398046511104 := 1 << 1
(smt.stats   75  11005 297036 1169271  7676/7345/421   23956/3269    49  273   26.32)
ramon: poll                 wall=17.002s usage=16.923s mem=28000KiB load=1.00 rootload=1.00
(smt.stats   76  11262 303107 1190005  8125/7423/421   24596/3277    49  273   26.51)
ramon: poll                 wall=18.000s usage=17.918s mem=28256KiB load=1.00 rootload=1.00
(smt.stats   77  11544 308766 1229694  8212/7908/424   25179/3387    50  307   26.61)
(smt.stats   78  11645 310714 1241151  8334/7954/424   25375/3389    50  307   26.61)
ramon: poll                 wall=19.000s usage=18.918s mem=28256KiB load=1.00 rootload=1.00
(smt.stats   79  11756 312692 1254951  8531/8044/424   25579/3392    50  307   26.71)
ramon: poll                 wall=20.000s usage=19.906s mem=29224KiB load=0.99 rootload=0.99
(smt.stats   80  11878 315127 1272494  8729/8371/425   25915/3506    51  330   27.37)
ramon: end                  Tue Dec 24 15:53:15 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.010s
ramon: group.total          19.968s
ramon: group.utime          19.952s
ramon: group.stime          0.016s
ramon: group.mempeak        29484KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.060s
ramon: loadavg              1.00
