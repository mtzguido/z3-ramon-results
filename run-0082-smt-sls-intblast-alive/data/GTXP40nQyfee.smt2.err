ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:06:20 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28737 MiB
ramon: sys.mem.avail        62087 MiB
ramon: sys.nprocs           1388
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/GTXP40nQyfee.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             723668
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   61.3497     10000        49          0            1        2)
(sat.ddfw       1      1   31.9521     20001        98          1            1        3)
(smt.stats    0    101   4531    525  1385/1225/108      92/16     6   18   52.15)
(smt.stats    1    202   5679    940  2072/1867/109     188/54     7   19   52.36)
(sat.ddfw       1      1   34.7826     40001       196          2            1        5)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 671&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 671&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 671 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 0&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 0 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 0&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 0 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 0&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 0 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 0&2251799813685248
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 0 := 672 << 52
(smt.stats    2    313   6904   1747  2715/2457/110     298/57     8   20   52.56)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 3026418949592973312&2251799813685248
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 1 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 3026418949592973312&2251799813685248
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 1 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 3026418949592973312&2251799813685248
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 1 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 3026418949592973312&2251799813685248
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 3026418949592973313 := 672 << 52
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2251799813685248 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2251799813685246 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 4 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 8 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 16 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 288 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 385 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 512 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 512 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 512 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 512 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1024 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2048 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2048 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 4096 := 3026418949592973312&2251799813685248
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 8320 := 3026418949592973312&2251799813685248
(smt.stats    3    414   7639   2276  2905/2583/161     475/59     9   21   52.87)
(smt.stats    4    525   8796   5709  2994/2735/216     635/158    13   63   52.96)
ramon: poll                 wall=1.000s usage=0.795s mem=55332KiB load=0.79 rootload=0.79
(smt.stats    5    647   9957   8791  3068/2767/217     740/160    14   63   53.17)
(sat.ddfw       1      1   32.2234     70001       343          3            1        8)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  14397  13907  3083/2820/218     836/160    15   65   53.26)
(smt.stats    7    859  17505  18396  3107/2831/218     944/163    15   65   53.36)
(smt.stats    8    981  19406  22766  3242/2976/229    1111/208    17   70   53.45)
(sat.ddfw       1      1   28.6123    110001       539          4            1       12)
ramon: poll                 wall=2.000s usage=1.836s mem=55940KiB load=1.04 rootload=1.04
(sat.ddfw       1      1   25.2648    160000       784          5            1       17)
(smt.stats    9   1115  22406  24790  3357/2991/229    1236/219    18   84   53.64)
(sat.ddfw       1      1   22.3717    220001      1078          6            1       23)
(smt.stats   10   1216  24766  26814  3450/3106/229    1337/222    18   84   53.74)
ramon: poll                 wall=3.000s usage=2.836s mem=56148KiB load=1.00 rootload=1.00
(smt.stats   11   1327  28375  28613  3649/3264/229    1467/222    18   84   53.84)
(sat.ddfw       1      1   20.0057    290001      1421          7            1       30)
(smt.stats   12   1449  31076  30154  3872/3428/229    1609/224    18   84   53.93)
ramon: poll                 wall=4.003s usage=3.873s mem=56040KiB load=1.03 rootload=1.03
(sat.ddfw       1      1   18.5744    370001      1813          8            1       38)
(smt.stats   13   1583  32576  31562  3997/3608/229    1815/231    18   84   53.93)
(smt.stats   14   1730  34880  35005  4128/3819/230    2005/278    19   84   54.03)
ramon: poll                 wall=5.000s usage=4.994s mem=56380KiB load=1.12 rootload=1.12
(smt.stats   15   1831  37103  39330  4236/3872/230    2120/280    19   84   54.03)
(sat.ddfw       1      1   16.6852    460001      2254          9            1       47)
(smt.stats   16   1942  41396  50052  4291/3998/230    2264/280    19   84   54.17)
(smt.stats   17   2064  45146  53441  4307/4034/231    2461/293    20   87   54.17)
ramon: poll                 wall=6.000s usage=5.999s mem=56300KiB load=1.00 rootload=1.01
(smt.stats   18   2198  48073  58582  4409/4045/231    2629/294    20   87   54.26)
(sat.ddfw       1      1   15.2462    560001      2745         10            1       57)
ramon: poll                 wall=7.003s usage=7.000s mem=56400KiB load=1.00 rootload=1.00
(smt.stats   19   2345  51205  64165  4615/4187/231    2816/295    20   87   54.36)
(smt.stats   20   2506  54220  68648  4739/4381/231    3024/295    20   87   54.36)
(sat.ddfw       1      1   14.0252    670001      3284         11            1       68)
ramon: poll                 wall=8.000s usage=7.998s mem=56568KiB load=1.00 rootload=0.99
(smt.stats   21   2607  56231  73876  4784/4486/231    3141/295    20   87   54.36)
(smt.stats   22   2718  59367  83643  4829/4536/231    3330/296    20   87   54.36)
(smt.stats   23   2840  61342  91201  4953/4576/233    3461/456    21   87   54.55)
ramon: poll                 wall=9.000s usage=9.202s mem=56776KiB load=1.20 rootload=1.21
(smt.stats   24   2974  62635  94099  5208/4772/233    3611/458    21   87   54.74)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions    )
(smt.stats   25   3121  66611 103770  5239/4971/238    3834/497    23   96   54.74)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 48 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 48 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 48 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 48 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 40 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 4611686018427387738&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 32 := 4575657221408451552&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 4575657221408450782&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 4575657221408450756&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 4575657221408450756&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 64 := 4575657221408450756&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1664 := 4575657221408450820&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1664 := 4575657221408450756&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1792 := 4575657221408450820&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1792 := 4575657221408450820&8388608
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2048 := 4575657221408450756&8388608
(smt.stats   26   3282  69599 109205  5387/4974/238    4098/502    23   96   54.93)
(sat.ddfw       1      1    13.132    790001      3872         12            1       80)
(smt.stats   27   3459  72588 123965  5684/5416/298    4688/566    25  110   55.22)
(smt.stats   28   3560  75388 133017  5703/5429/299    4817/632    26  110   55.22)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 4611686018427387901&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 4611686018427387901 := 4611686018427387901 << 1
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 4611686018427387901&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 4611686018427387901 := 4611686018427387901 << 1
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 4575657221408437343&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 9187343239835825247 := 4611686018427387901 << 1
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 4575657221408437385&1
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 9187343239835825289 := 4611686018427387901 << 1
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 1 := 16523&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 16523&4
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 4611686018427404427 := 4611686018427387903 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 16523&4
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 4611686018427404427 := 4611686018427387903 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 139&4
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 139 := 4611686018427387841 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 155&4
shl: (shl[64] (bv2int %0) (mod (+ #107 #429) 64)) 155 := 4611686018427387841 << 3
(smt.stats   29   3671  78451 142996  5811/5519/322    5117/809    28  123   55.32)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 27021597227381763 := 4611686018427387841 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 27021597227381763 := 4611686018427387841 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
shl: (shl[62] (bv2int %0) (mod (bv2int %0) 62)) 0 := 4611686018427387841 << 3
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 1 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 4 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 4 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 3 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 1 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 4 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 3 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 1 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 0 := 4611686018427387400&4
band: (band[62] (shl[62] (bv2int %0) (mod #107 62)) (if (= #645 61) 1 (if #647 2 #767))) 1 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 2 := 4611686018427387400&4
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 4 := 4611686018427387400&4
(smt.stats   30   3793  82788 153134  5870/5543/322    5253/810    28  123   55.51)
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 385 := 387&576460752303423488
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 385 := 387&576460752303423488
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 386 := 397&576460752303423488
band: (band[62] (shl[64] (bv2int %0) (mod #430 64)) (if (= #786 63) 0 (if #788 1 #912))) 386 := 387&576460752303423488
(smt.stats   31   3927  86117 162718  5949/5601/359    5697/825    29  130   55.60)
ramon: poll                 wall=10.000s usage=10.358s mem=57852KiB load=1.16 rootload=1.15
(smt.stats   32   4074  89632 169190  6025/5670/365    5922/857    30  136   55.70)
(sat.ddfw       1      1   12.2031    920001      4509         13            1       93)
ramon: poll                 wall=11.003s usage=11.364s mem=57980KiB load=1.00 rootload=1.01
(smt.stats   33   4235  92994 178053  6235/5915/366    6143/910    31  144   55.96)
ramon: poll                 wall=12.000s usage=12.359s mem=58324KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   11.3812   1060001      5196         14            1      108)
ramon: poll                 wall=13.000s usage=13.363s mem=58160KiB load=1.00 rootload=1.01
(smt.stats   34   4412  96726 204056  6532/6231/368    6421/1010    32  148   56.06)
(smt.stats   35   4607 103142 232698  6629/6321/372    6653/1027    33  151   56.15)
ramon: poll                 wall=14.000s usage=14.365s mem=58356KiB load=1.00 rootload=1.00
(sat.ddfw       1      1     10.68   1210001      5931         15            1      123)
(smt.stats   36   4708 105504 238897  6689/6338/372    6797/1028    33  151   56.34)
ramon: poll                 wall=15.003s usage=15.368s mem=58924KiB load=1.00 rootload=1.00
(smt.stats   37   4819 109028 253276  6950/6542/372    6975/1029    34  159   56.53)
(sat.ddfw       1      1   10.0534   1370001      6715         16            1      139)
ramon: poll                 wall=16.000s usage=16.368s mem=59180KiB load=1.00 rootload=1.00
(smt.stats   38   4941 111771 261768  7112/6655/372    7156/1029    34  159   56.63)
(smt.delete-inactive-clauses  :num-deleted-clauses 159)
(smt.stats   39   5075 114606 271594  7120/6819/373    7347/1093    35  163   56.63)
ramon: poll                 wall=17.000s usage=17.363s mem=59224KiB load=1.00 rootload=0.99
(smt.stats   40   5222 119369 279276  7235/6825/373    7643/1095    35  163   56.73)
(sat.ddfw       1      1   9.49774   1540001      7549         17            1      156)
ramon: poll                 wall=18.000s usage=18.371s mem=59224KiB load=1.01 rootload=1.01
(smt.stats   41   5383 123220 295391  7331/6955/374    7932/1293    36  164   56.82)
ramon: poll                 wall=19.000s usage=19.370s mem=59224KiB load=1.00 rootload=1.00
(smt.stats   42   5560 127273 313816  7539/7221/376    8432/1340    37  171   56.92)
ramon: poll                 wall=20.000s usage=20.372s mem=59480KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 22:06:40 2024
ramon: root.execname        z3
ramon: root.utime           20.420s
ramon: root.stime           0.010s
ramon: group.total          20.441s
ramon: group.utime          20.425s
ramon: group.stime          0.016s
ramon: group.mempeak        59740KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.073s
ramon: loadavg              1.02
