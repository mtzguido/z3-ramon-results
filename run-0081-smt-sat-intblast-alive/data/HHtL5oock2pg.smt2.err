ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 20:06:11 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29333 MiB
ramon: sys.mem.avail        62091 MiB
ramon: sys.nprocs           1395
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/HHtL5oock2pg.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             347252
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   240/240     0/0  63       0    18.54   0.00)
(sat.stats    103    605    0   240/240   103/31  63       0    18.87   0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 274 :time 0.00)
(sat.stats    103    605    0   240/240   103/31  63       0    18.87   0.01)
(sat.stats    103    605    0   240/240   103/31  63       0    18.87   0.01)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 2 :time 0.00)
 (sat-probing :cost 376018.87 :time 0.00)
(sat.stats    103    605    0   242/242    39/30  63       0    18.87   0.01)
(sat.stats    171   1525    1   242/242   107/84  63       0    18.96   0.01)
(sat.stats :conflicts    :restarts     :learned/bin       :gc          :time)
(sat.stats       :decisions    :clauses/bin     :units        :memory       )
(sat.stats    174   1575    2   242/242   110/84  63       0    18.96   0.01)
(sat.stats    177   1616    3   242/242   113/84  63       0    18.96   0.01)
(sat.stats    180   1671    4   242/242   116/84  63       0    18.96   0.01)
(sat.stats    183   1721    5   242/242   119/84  63       0    18.96   0.01)
(sat.stats    186   1781    6   242/242   122/84  63       0    18.96   0.01)
(sat.stats    189   1844    7   242/242   125/84  63       0    18.96   0.01)
(sat.stats    192   1913    8   242/242   128/84  63       0    18.96   0.01)
(sat.stats    195   2013    9   242/242   131/85  63       0    18.96   0.01)
(sat.stats    198   2043   10   242/242   134/88  63       0    18.96   0.01)
(sat.stats    201   2103   11   242/242   137/91  63       0    18.96   0.01)
(sat.stats    204   2190   12   242/242   140/94  63       0    18.96   0.01)
(sat.stats :conflicts   :restarts      :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    210   2347   14   242/242   146/100  63       0    18.96   0.01)
(sat.stats    315   4400   21   242/242   251/166  63       0    19.06   0.03)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 2222 :time 0.00)
(sat.stats    511   9263   41   273/273   447/245  69       0    19.86   0.09)
 (sat-cleaner :elim-literals 47 :elim-clauses 0 :cost 7257 :time 0.00)
(sat.stats   1283  19299   45  4585/4584  1276/321  73       0    20.73   0.74)
(sat.stats   1286  19319   46  4585/4584  1279/323  73       0    20.73   0.74)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 10672 :time 0.00)
(sat.stats   1758  26011   77  4732/4731  1764/474  74       0    20.95   0.85)
ramon: poll                 wall=1.004s usage=0.910s mem=22164KiB load=0.91 rootload=0.89
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 15130 :time 0.00)
(sat.stats :conflicts   :restarts      :learned/bin         :gc          :time)
(sat.stats      :decisions    :clauses/bin        :units        :memory       )
(sat.stats   2442  33510   78  5429/5428  2481/510  76       0    21.05   1.18)
shl: (shl[54] (bv2int %1) (+ 54 (* 18014398509481983 #72))) 832 := 0 << 31
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 17398 :time 0.00)
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&2147483648
shl: (shl[64] (* 2 (bv2int %1)) (mod (+ 53 #827 #831) 64)) 0 := 2 << 30
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 8790 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 2349 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 2147423260 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 2147286184 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 2147483632 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 192 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 3584 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 384 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 256 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 2048 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 1024 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 8192 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 4096 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 16384 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 32768 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 65536 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 131072 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 262144 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 524288 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 1048576 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 2097152 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 4194304 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 8388608 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 16777216 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 33554432 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 67108864 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 134217728 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 268435456 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 536870912 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 1073741824 := 2147483647&2147483648
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 1 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 40356 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 2 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 110792 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 437280 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 16 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 824192 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 64 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 2488320 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 256 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 1024 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 512 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 23326720 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 257802240 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 8192 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 810942464 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 98304 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 65536 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 137101312 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 521666560 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 289406976 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 1048576 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 2097152 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 411041792 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 50331648 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 369098752 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 671088640 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 67108864 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 268435456 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 1073741824 := 2147483647&18014396361998336
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 0 := 2147483647&18014396361998336
band: (band[54] (if (= #359 63) 1 (if #563 3 #820)) (shl[64] (* 2 #345) (mod #835 64))) 536870912 := 2147483647&18014396361998336
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 19031 :time 0.00)
band: (band[54] (if (= #58 53) 1 (if #588 3 #739)) (shl[54] (bv2int %1) (+ 54 #742))) 32 := 2147483647&18014396361998336
ramon: poll                 wall=2.000s usage=1.905s mem=29856KiB load=1.00 rootload=0.98
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 20944 :time 0.00)
ramon: poll                 wall=3.000s usage=2.905s mem=30252KiB load=1.00 rootload=1.00
ramon: poll                 wall=4.004s usage=3.908s mem=30328KiB load=1.00 rootload=1.00
ramon: poll                 wall=5.000s usage=4.903s mem=30468KiB load=1.00 rootload=1.00
(sat.stats   3893  94740  198 56727/56724  4340/1198 486       0    30.97   5.37)
ramon: poll                 wall=6.000s usage=5.903s mem=32020KiB load=1.00 rootload=1.00
ramon: poll                 wall=7.000s usage=6.902s mem=34588KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 27389 :time 0.00)
ramon: poll                 wall=8.000s usage=7.902s mem=36868KiB load=1.00 rootload=0.99
ramon: poll                 wall=9.000s usage=8.902s mem=42424KiB load=1.00 rootload=0.99
ramon: poll                 wall=10.000s usage=9.901s mem=53152KiB load=1.00 rootload=1.00
(sat.stats   5394 118140  549 319873/319870  6719/2874 503       0    58.13  10.28)
ramon: poll                 wall=11.000s usage=10.897s mem=65148KiB load=1.00 rootload=0.99
ramon: poll                 wall=12.000s usage=11.896s mem=73276KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.896s mem=77536KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.896s mem=95408KiB load=1.00 rootload=0.99
ramon: poll                 wall=15.000s usage=14.888s mem=97888KiB load=0.99 rootload=0.99
ramon: poll                 wall=16.000s usage=15.888s mem=102MiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.886s mem=107MiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.886s mem=112MiB load=1.00 rootload=0.98
ramon: poll                 wall=19.000s usage=18.886s mem=117MiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.886s mem=123MiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 20:06:31 2024
ramon: root.execname        z3
ramon: root.utime           19.900s
ramon: root.stime           0.090s
ramon: group.total          19.995s
ramon: group.utime          19.907s
ramon: group.stime          0.088s
ramon: group.mempeak        123MiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.109s
ramon: loadavg              0.99
