ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 21:16:16 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28405 MiB
ramon: sys.mem.avail        62089 MiB
ramon: sys.nprocs           1360
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/squWH6hnjOaK.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             555578
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   138/136     0/0  69       0    18.52   0.00)
(sat.stats    124    834    0   139/137   124/101  69       0    18.62   0.01)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 191 :time 0.00)
(sat.stats    124    834    0   138/136   124/101  72       0    18.62   0.01)
(sat.stats    124    834    0   138/136   124/101  72       0    18.62   0.01)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 0 :time 0.00)
 (sat-probing :cost 253618.72 :time 0.00)
(sat.stats    124    834    0   138/136   132/108  72       0    18.72   0.01)
 (sat-cleaner :elim-literals 2 :elim-clauses 1 :cost 260 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 239 :time 0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 258 :time 0.00)
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 274 :time 0.00)
(sat.stats    289   3463    1   152/151   286/231  82       0    19.10   0.09)
(sat.stats :conflicts    :restarts     :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    292   3523    2   169/168   289/231  82       0    19.10   0.09)
(sat.stats    295   3537    3   169/168   292/232  82       0    19.10   0.10)
(sat.stats    298   3583    4   169/168   295/234  82       0    19.10   0.10)
(sat.stats    301   3625    5   169/168   298/235  82       0    19.10   0.10)
(sat.stats    304   3678    6   170/169   301/235  82       0    19.10   0.10)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 388 :time 0.00)
(sat.stats    307   3729    7   177/176   304/236  85       0    19.10   0.10)
(sat.stats    310   3741    8   179/178   309/238  85       0    19.10   0.10)
(sat.stats    313   3759    9   179/178   312/238  85       0    19.10   0.10)
(sat.stats    316   3782   10   179/178   315/238  85       0    19.10   0.10)
(sat.stats    319   3810   11   179/178   318/238  85       0    19.10   0.10)
(sat.stats    323   3822   12   179/178   322/238  85       0    19.10   0.10)
(sat.stats    326   3856   13   179/178   325/238  85       0    19.10   0.10)
(sat.stats    329   3885   14   185/184   330/241  85       0    19.10   0.11)
 (sat-cleaner :elim-literals 16 :elim-clauses 0 :cost 773 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 920 :time 0.00)
 (sat-cleaner :elim-literals 28 :elim-clauses 0 :cost 1061 :time 0.00)
 (sat-cleaner :elim-literals 30 :elim-clauses 162 :cost 1720 :time 0.00)
(sat.stats :conflicts   :restarts       :learned/bin        :gc          :time)
(sat.stats      :decisions    :clauses/bin        :units        :memory       )
(sat.stats    684  11837   36  1509/1508   497/311  94       0    19.58   0.52)
(sat.stats    709  12558   43  1579/1578   525/314  94       0    19.58   0.56)
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 1 := 1 << 2
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 1642 :time 0.00)
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 70368744164784 := 0 << 2
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 70368744177660 := 70368744177663 << 4
 (sat-cleaner :elim-literals 5 :elim-clauses 0 :cost 1992 :time 0.00)
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 18256115145732259841 := 0 << 4
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 3
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 16730028190751260673 := 0 << 3
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 1
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 18237748903501889537 := 0 << 1
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 5
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 18200805312808615937 := 0 << 5
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 16
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 17762900617791012865 := 0 << 16
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 44
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 17709420372215988225 := 0 << 44
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 35
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 17163007073676427265 := 0 << 35
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 22
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 17696753998264008705 := 0 << 22
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 13
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 16364814408469184513 := 0 << 13
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 8
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 17377350268441591809 := 0 << 8
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 33
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 17970558781859299329 := 0 << 33
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 12
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 18146691748535992321 := 0 << 12
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 39
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 16899053914266009601 := 0 << 39
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 6
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 17213391094507634689 := 0 << 6
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 10
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720878452 := 0 << 10
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 34
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720867990 := 0 << 34
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 42
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720869907 := 0 << 42
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 30
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720861351 := 0 << 30
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 32
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720858765 := 0 << 32
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 37
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720858114 := 0 << 37
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 36
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720872877 := 0 << 36
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 31
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720872306 := 0 << 31
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 28
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720886383 := 0 << 28
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 9
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720877644 := 0 << 9
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 23
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720859675 := 0 << 23
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 24
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720873711 := 0 << 24
(sat.stats   1065  26897   85  3285/3250   905/366 108       0    21.21   0.72)
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 20
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720864158 := 0 << 20
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 21
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720877864 := 0 << 21
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 18
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720857260 := 0 << 18
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 14
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720858768 := 0 << 14
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 11
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720871309 := 0 << 11
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 15
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720862880 := 0 << 15
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 25
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720870394 := 0 << 25
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 27
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720856297 := 0 << 27
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 41
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720877186 := 0 << 41
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 43
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720882694 := 0 << 43
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 45
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720859060 := 0 << 45
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 40
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720857343 := 0 << 40
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 38
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720856303 := 0 << 38
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 29
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720881931 := 0 << 29
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 17
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720868965 := 0 << 17
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 19
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720872588 := 0 << 19
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 26
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720870394 := 0 << 26
shl: (shl[46] (bv2int %1) (mod (bv2int %0) 46)) 0 := 0 << 7
band: (band[46] (if (or #567 #568 #569 #570 #571 #572 #573 #574 #575 #576 #577 #578 #579 #580 #581 #582 ...) 0 1) (shl[46] (bv2int %1) (mod #62 46))) 0 := 0&0
shl: (shl[64] (bv2int %1) (mod (+ #62 #315) 64)) 351843720868126 := 0 << 7
 (sat-cleaner :elim-literals 2 :elim-clauses 1 :cost 3989 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 4124 :time 0.00)
ramon: poll                 wall=1.000s usage=0.998s mem=23948KiB load=1.00 rootload=0.98
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 4626 :time 0.00)
 (sat-cleaner :elim-literals 4 :elim-clauses 1 :cost 4758 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 4806 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 4850 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 4940 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 4983 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 5011 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 1 :cost 5082 :time 0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 5349 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 5400 :time 0.00)
ramon: poll                 wall=2.000s usage=1.996s mem=24968KiB load=1.00 rootload=1.00
(sat.stats   1704  67500  163  3935/3899  1522/516 397       0    23.79   2.05)
 (sat-cleaner :elim-literals 78 :elim-clauses 0 :cost 5788 :time 0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 1 :cost 6046 :time 0.00)
 (sat-cleaner :elim-literals 2 :elim-clauses 1 :cost 6085 :time 0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 6189 :time 0.00)
 (sat-cleaner :elim-literals 1 :elim-clauses 2 :cost 6209 :time 0.00)
ramon: poll                 wall=3.000s usage=2.993s mem=25584KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 7163 :time 0.00)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 7502 :time 0.00)
 (sat-cleaner :elim-literals 5 :elim-clauses 2 :cost 7672 :time 0.00)
ramon: poll                 wall=4.000s usage=3.991s mem=26288KiB load=1.00 rootload=0.99
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 7749 :time 0.00)
(sat.stats   2396 127840  211  4759/4723  2213/747 407       0    24.89   4.16)
ramon: poll                 wall=5.000s usage=4.989s mem=26564KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 3 :elim-clauses 0 :cost 12550 :time 0.00)
 (sat-cleaner :elim-literals 18 :elim-clauses 1 :cost 12879 :time 0.00)
(sat.stats   3626 194507  284  6158/6122  3459/1013 410       0    25.53   5.98)
ramon: poll                 wall=6.000s usage=5.988s mem=26888KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 4 :elim-clauses 0 :cost 14117 :time 0.00)
 (sat-cleaner :elim-literals 4 :elim-clauses 0 :cost 14317 :time 0.00)
 (sat-cleaner :elim-literals 3 :elim-clauses 0 :cost 14794 :time 0.00)
ramon: poll                 wall=7.000s usage=6.987s mem=27188KiB load=1.00 rootload=0.99
 (sat-cleaner :elim-literals 0 :elim-clauses 22 :cost 16875 :time 0.00)
ramon: poll                 wall=8.006s usage=7.991s mem=27540KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.986s mem=27800KiB load=1.00 rootload=1.00
ramon: poll                 wall=10.000s usage=9.985s mem=28012KiB load=1.00 rootload=1.00
ramon: poll                 wall=11.000s usage=10.985s mem=28696KiB load=1.00 rootload=1.00
ramon: poll                 wall=12.000s usage=11.985s mem=28748KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.985s mem=28980KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.984s mem=29468KiB load=1.00 rootload=1.00
ramon: poll                 wall=15.000s usage=14.984s mem=29820KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.984s mem=30152KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.984s mem=30388KiB load=1.00 rootload=0.99
ramon: poll                 wall=18.000s usage=17.983s mem=30636KiB load=1.00 rootload=1.00
(sat.stats :conflicts  :restarts        :learned/bin          :gc         :time )
(sat.stats     :decisions    :clauses/bin          :units         :memory       )
(sat.stats   6754 251728  609 30658/30621  5240/1409 414       0    29.71  18.58)
ramon: poll                 wall=19.000s usage=18.983s mem=31156KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.983s mem=31544KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 21:16:36 2024
ramon: root.execname        z3
ramon: root.utime           19.960s
ramon: root.stime           0.020s
ramon: group.total          19.991s
ramon: group.utime          19.967s
ramon: group.stime          0.024s
ramon: group.mempeak        31800KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.008s
ramon: loadavg              1.00
