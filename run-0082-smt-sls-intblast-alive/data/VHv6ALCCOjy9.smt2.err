ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:36:26 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28142 MiB
ramon: sys.mem.avail        62085 MiB
ramon: sys.nprocs           1380
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/VHv6ALCCOjy9.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             826931
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(smt.stats    0    101   2358   1612  1048/947/103      91/60     6   17   51.96)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   82.6446     10000        49          0            1        2)
(sat.ddfw       1      1   41.8452     20001        98          1            1        3)
(smt.stats    1    202   4914   2268  2058/1791/103     221/80     6   17   52.15)
(sat.ddfw       1      1    45.977     40001       196          2            1        5)
(smt.stats    2    313   5399   2715  2169/1896/104     336/92     7   22   52.25)
(smt.stats    3    414   6348   3897  2221/2021/107     456/96     8   31   52.25)
(smt.stats    4    525   7959   5216  2315/2097/114     558/118    10   33   52.35)
(sat.ddfw       1      1   40.7056     70001       343          3            1        8)
(smt.stats    5    647   9119   7973  2345/2123/115     687/124    11   34   52.35)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  10313  10363  2363/2158/119     781/134    14   40   52.44)
(smt.stats    7    859  11065  11978  2374/2169/121     894/139    15   43   52.44)
(smt.stats    8    981  11668  13148  2377/2172/121    1017/139    15   43   52.55)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 0&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 34359738368 := 34359738367 << 2
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 0&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 34359738368 := 34359738367 << 2
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 0&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 34359738368 := 34359738367 << 2
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 0&1
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 8589934591 := 8589934592 << 2
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 0&1
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 34359738368 := 8589934593 << 2
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 0&1
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 8589934591 := 8589934592 << 2
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 0&1
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 8589934591 := 8589934592 << 2
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1 := 4&1
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 4&1
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 1 := 4&1
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1 := 34359738364&1
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 34359738364&1
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 34359738366 := 34359738367 << 2
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 22906492244&1
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 1 := 22906492244&1
ramon: poll                 wall=1.003s usage=0.844s mem=54844KiB load=0.84 rootload=0.83
(smt.stats    9   1115  14069  15248  2436/2219/153    1132/142    17   70   52.70)
(smt.stats   10   1216  14642  17885  2453/2242/160    1237/144    18   71   52.70)
(smt.stats   11   1327  18890  20672  2490/2268/160    1342/149    19   74   52.90)
(sat.ddfw       1      1   36.3636    110001       539          4            1       12)
(smt.stats   12   1449  19813  23112  2494/2279/162    1455/154    20   81   52.90)
(smt.stats   13   1583  22210  25641  2543/2326/167    1596/161    21   83   52.90)
(smt.stats   14   1730  26626  30459  2564/2340/167    1734/167    22   91   52.99)
(smt.stats   15   1831  29248  32553  2564/2348/167    1838/167    22   91   52.99)
(smt.stats   16   1942  31518  36602  2566/2350/167    1947/167    22   91   53.09)
(smt.stats   17   2064  32319  39614  2570/2354/167    2072/167    22   91   53.09)
(sat.ddfw       1      1   32.1951    160000       784          5            1       17)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 34359738363&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1 := 34359738363&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1 := 1&8589934591
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 576460786663161857 := 25769803776 << 34
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1 := 1&8589934591
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 576460786663161857 := 25769803776 << 34
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1 := 1&8589934591
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 576460786663161857 := 25769803776 << 34
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1 := 34359738364&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 34359738364&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 34359738362&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 34359738364&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 34359738362&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 2 := 34359738362&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 8589934590 := 34359738362&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 8589934584 := 34359738362&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 8589934586 := 34359738362&8589934591
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 576460855382638586 := 34359738363 << 34
(smt.stats   18   2198  34952  44304  2621/2366/174    2209/172    23   95   53.21)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 25803358214 := 25803358213 << 34
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 25803358214 := 25803358213 << 34
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 2 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 2 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 4 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 4 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 2 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 8 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 16 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 32 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 64 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 128 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 64 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 128 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 256 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 512 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 256 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 512 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1024 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 2048 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 4096 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 8192 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 16384 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 32768 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 65536 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 131072 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 262144 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 524288 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1048576 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 2097152 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 4194304 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 8388608 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 16777216 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 33554432 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 67108864 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 134217728 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 268435456 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 536870912 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1073741824 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 2147483648 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 4294967296 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 4294967296 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 4294967296 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 2147483648 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1610612736 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1140850688 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1140850688 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1140850688 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1140850688 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1140850688 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1140850688 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1082130432 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1107296256 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1342177280 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1207959552 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 1090519040 := 17179869184&8589934591
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   19   2346  37036  52262  2842/2621/417    2627/347    24  153   54.48)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 256 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 256 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 128 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 128 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 2 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 2 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 4 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 8 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 16 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 42 := 17179869184&8589934591
ramon: poll                 wall=2.000s usage=1.840s mem=56900KiB load=1.00 rootload=0.99
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 12 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 8 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 8 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 16 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 64 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 128 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 256 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 512 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 1024 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 2048 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 1024 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 2048 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 4096 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 8192 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 16384 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 32768 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 65536 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 131072 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 131072 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 262144 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 524288 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 1048576 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 2097152 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 4194304 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 8388608 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 16777216 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 33554432 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 67108864 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 134217728 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 134217728 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 268435456 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 536870912 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 1073741824 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 2147483648 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 4294967296 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 536870912 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 2147483648 := 17179869184&8589934591
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 17179869184&8589934591
band: (band[35] (shl[35] (bv2int %1) (mod #104 35)) (if (= #563 34) 0 (if #565 1 #658))) 4294967296 := 17179869184&8589934591
(sat.ddfw       1      1   28.6812    220001      1078          6            1       23)
(smt.stats   20   2507  39016  59870  3042/2820/605    2830/347    26  223   55.35)
(smt.stats   21   2608  43044  66444  3090/2854/609    2937/364    27  242   55.54)
(smt.stats   22   2719  47865  73742  3099/2871/609    3118/371    28  243   55.54)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 4429185056&0
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 576460825452085280 := 26877100038 << 1
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 4431869016&0
shl: (shl[64] (bv2int %1) (mod (+ #104 #290) 64)) 576460825454769240 := 26877771028 << 1
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 19629342720&0
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 4431869400 := 26994540544 << 1
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 0 := 19629342720&0
shl: (shl[35] (bv2int %1) (mod (bv2int %0) 35)) 4431869408 := 26994540544 << 1
(smt.stats   23   2841  52362  80899  3155/2880/610    3293/406    29  243   55.97)
(sat.ddfw       1      1   25.7448    290001      1421          7            1       30)
ramon: poll                 wall=3.000s usage=2.841s mem=58560KiB load=1.00 rootload=1.00
(smt.stats   24   2975  55982  90754  3366/3101/635    3647/454    31  280   56.26)
(smt.stats   25   3122  63161 101177  3435/3158/640    3974/591    32  285   56.50)
(sat.ddfw       1      1   23.1683    370001      1813          8            1       38)
(smt.stats   26   3283  73883 127128  3452/3174/648    4176/654    33  409   56.69)
(smt.stats   27   3460  79919 145625  3466/3185/655    4425/706    35  416   56.88)
ramon: poll                 wall=4.000s usage=3.832s mem=59324KiB load=0.99 rootload=0.99
(smt.stats   28   3561  85102 152983  3526/3236/656    4806/706    35  416   56.98)
(smt.stats   29   3672  90605 161277  3530/3240/656    5022/924    36  426   56.98)
(sat.ddfw       1      1   21.0773    460001      2254          9            1       47)
(smt.stats   30   3794  95725 174888  3551/3251/656    5246/925    36  426   57.17)
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 7 := 34359738367&255
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 7 := 34359738367&255
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 7 := 34359738367&255
band: (band[35] (shl[64] (bv2int %1) (mod #291 64)) (if (or #678 #679) 0 (if #680 1 #829))) 7 := 34359738367&255
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   31   3928 100848 190650  3586/3294/669    5569/1041    37  426   57.26)
ramon: poll                 wall=5.000s usage=4.835s mem=60364KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   19.3199    560001      2745         10            1       57)
(smt.stats   32   4075 107294 199374  3708/3319/675    5913/1043    37  426   57.63)
ramon: poll                 wall=6.000s usage=5.834s mem=60432KiB load=1.00 rootload=1.00
(sat.ddfw       1      1    17.834    670001      3284         11            1       68)
ramon: poll                 wall=7.000s usage=6.830s mem=60456KiB load=1.00 rootload=1.00
(smt.stats   33   4236 114355 214736  3950/3579/676    6350/1142    38  457   57.82)
(sat.ddfw       1      1    16.554    790001      3872         12            1       80)
(smt.stats   34   4413 118331 227404  3963/3671/679    6774/1234    39  460   58.01)
(smt.stats   35   4607 121798 240148  4003/3684/684    7136/1277    40  471   58.01)
(smt.stats   36   4708 124747 250350  4158/3735/684    7330/1349    41  498   58.01)
ramon: poll                 wall=8.000s usage=7.831s mem=60512KiB load=1.00 rootload=1.00
(smt.stats   37   4819 127546 264370  4239/3892/684    7516/1352    41  498   58.17)
(sat.ddfw       1      1   15.4468    920001      4509         13            1       93)
(smt.stats   38   4941 130054 275953  4292/4000/687    7858/1367    42  502   58.17)
(smt.delete-inactive-clauses  :num-deleted-clauses 133)
(smt.stats   39   5075 132589 287613  4303/4011/689    8005/1435    43  529   58.36)
ramon: poll                 wall=9.000s usage=8.833s mem=60716KiB load=1.00 rootload=1.00
(smt.stats   40   5222 140290 309909  4369/4023/691    8381/1439    43  529   58.73)
(sat.ddfw       1      1   14.3457   1060001      5196         14            1      108)
ramon: poll                 wall=10.001s usage=9.932s mem=61060KiB load=1.10 rootload=1.10
(smt.stats   41   5383 148632 330635  4529/4094/691    8702/1528    44  561   58.73)
(smt.stats   42   5560 155850 347068  4658/4261/691    9225/1531    44  561   58.82)
ramon: poll                 wall=11.000s usage=10.932s mem=61180KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   13.5086   1210001      5931         15            1      123)
(smt.stats   43   5754 164459 381733  4694/4394/692    9860/1734    45  561   58.82)
(smt.stats   44   5967 172739 426112  4722/4411/694   10255/1893    46  565   58.92)
(smt.stats   45   6068 175680 435861  4729/4437/694   10543/1893    46  565   58.92)
(smt.stats   46   6179 180709 465738  4746/4450/694   10839/1893    46  565   59.02)
ramon: poll                 wall=12.000s usage=11.999s mem=61340KiB load=1.07 rootload=1.07
(smt.stats   47   6301 184523 484910  4918/4504/694   11181/1894    46  565   59.12)
(sat.ddfw       1      1   12.9074   1370001      6715         16            1      139)
(smt.stats   48   6435 187617 495749  5156/4843/696   11834/2075    47  583   59.21)
(smt.stats   49   6582 190967 506954  5162/4849/697   12762/2075    47  583   59.43)
ramon: poll                 wall=13.000s usage=13.273s mem=61868KiB load=1.27 rootload=1.27
(sat.ddfw       1      1    12.467   1540001      7549         17            1      156)
(smt.stats   50   6743 201001 531328  5194/4851/697   13314/2078    47  583   59.71)
ramon: poll                 wall=14.000s usage=14.341s mem=62232KiB load=1.07 rootload=1.07
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   51   6920 209247 550940  5337/4917/697   13928/2266    48  598   60.03)
ramon: poll                 wall=15.000s usage=15.341s mem=62388KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   11.7909   1720001      8431         18            1      174)
(smt.stats   52   7114 215937 569981  5424/5060/697   14276/2276    48  598   60.03)
ramon: poll                 wall=16.003s usage=16.345s mem=62820KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=17.341s mem=62864KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   11.1817   1910001      9362         19            1      193)
(smt.stats   53   7327 226747 595081  5765/5216/697   15070/2288    48  598   60.22)
ramon: poll                 wall=18.000s usage=18.328s mem=62880KiB load=0.99 rootload=0.99
(sat.ddfw       1      1    10.609   2110001     10343         20            1      214)
(smt.stats   54   7561 237141 633883  5898/5514/697   15916/2296    48  598   60.32)
ramon: poll                 wall=19.000s usage=19.298s mem=62680KiB load=0.97 rootload=0.97
ramon: poll                 wall=20.000s usage=20.346s mem=62696KiB load=1.05 rootload=1.05
ramon: end                  Fri Nov  1 22:36:46 2024
ramon: root.execname        z3
ramon: root.utime           20.340s
ramon: root.stime           0.010s
ramon: group.total          20.357s
ramon: group.utime          20.341s
ramon: group.stime          0.016s
ramon: group.mempeak        62952KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.010s
ramon: loadavg              1.02
