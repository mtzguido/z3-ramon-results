ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 14:23:40 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         42972 MiB
ramon: sys.mem.avail        61716 MiB
ramon: sys.nprocs           1269
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/30sajcb0kZAE.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2773636
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   3224    461  1313/1163/111     100/13     7   16   19.34)
(smt.stats    1    202   5496   2174  2167/1971/114     215/27     9   23   19.44)
(smt.stats    2    313   6987   5918  2310/2075/115     330/31    10   23   19.54)
(smt.stats    3    414   8450   9550  2352/2155/117     446/55    12   25   19.54)
(smt.stats    4    525   9164  10978  2442/2239/119     575/86    13   32   19.64)
(smt.stats    5    647  11438  13705  2449/2246/121     692/88    15   32   19.64)
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 288230376151711743&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 288230376151711745 := 0 >>l 48
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 1 := 0 >>l 48
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 1 := 0 >>l 48
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 1 := 18446744073709551552 >>l 48
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 65534 := 65535&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[58] (bv2int %0) (mod (bv2int %1) 58)) 0 := 4398046511104 >>l 42
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 1 := 281474976710592 >>l 48
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 1 := 1&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[58] (bv2int %0) (mod (bv2int %1) 58)) 1 := 4398046511104 >>l 42
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 1 := 1&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2 := 2&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4 := 4&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 8 := 8&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 16 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 32 := 32&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[58] (bv2int %0) (mod (bv2int %1) 58)) 2 := 4398046511104 >>l 42
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2 := 2&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4 := 4&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 8 := 8&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 16 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 32 := 32&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 64 := 64&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 128 := 128&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 256 := 256&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 512 := 512&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 1024 := 1024&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2048 := 2048&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4096 := 4096&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 8192 := 8192&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 16384 := 16384&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 32768 := 32768&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 128 := 128&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 256 := 256&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 512 := 512&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 1024 := 1024&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2048 := 2048&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4096 := 4096&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 8192 := 8192&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 16384 := 16384&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2048 := 2048&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4096 := 4096&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 8192 := 8192&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4096 := 4096&131072
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas        :deletions    )
(smt.stats    6    748  12807  15584  2750/2482/215     796/89    16   36   20.14)
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2048 := 2048&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2048 := 2048&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2048 := 2048&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2048 := 2048&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4096 := 4096&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 8192 := 8192&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4096 := 4096&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4096 := 4096&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 256 := 256&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 256 := 256&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 512 := 512&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 256 := 256&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 16 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 32 := 32&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 32 := 32&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 32 := 32&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4 := 4&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 8 := 8&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4 := 4&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 2 := 2&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[58] (bv2int %0) (mod (bv2int %1) 58)) 2 := 4398046511104 >>l 42
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 1 := 1&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 40 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 32 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 1&131072
lshr: (lshr[58] (bv2int %0) (mod (bv2int %1) 58)) 41 := 4398046511104 >>l 42
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 40 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 32 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 2 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 16 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 32 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 40 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 40 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 38 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 32 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 32 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 41&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 16 := 41&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 31&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 16 := 31&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 32&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 16 := 32&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 16&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 16 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 16&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 16 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 16&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 12 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 16&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 8 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 16&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 4 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 16&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 4 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 16&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 8 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 16&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 8 := 16&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 24&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 8 := 24&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 32&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 2 := 32&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 34&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 2 := 34&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 32&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 4 := 32&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 36&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 4 := 36&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 32&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 4 := 32&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 36&131072
band: (band[58] (lshr[58] (bv2int %0) (mod #105 58)) (if (= #513 57) 288230376151711744 (if #515 144115188075855872 #627))) 4 := 36&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 1 := 36&131072
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 1 := 37&131072
(smt.stats    7    859  14766  20821  3080/2825/340     944/139    20   88   20.43)
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 42&0
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 42 := 2048 >>l 6
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 42&0
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 42 := 2048 >>l 6
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 42&0
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 42 := 2048 >>l 6
(smt.stats    8    983  16193  24406  3219/2947/360    1120/194    22  116   20.82)
(smt.stats    9   1117  19538  32139  3435/3120/368    1328/213    24  126   21.01)
(smt.stats   10   1218  21559  38170  3451/3128/370    1469/235    26  133   21.11)
(smt.stats   11   1329  24169  43030  3557/3220/371    1606/244    27  133   21.24)
ramon: poll                 wall=1.000s usage=0.934s mem=22444KiB load=0.93 rootload=0.92
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1451  26183  49218  3572/3249/375    1858/246    28  140   21.43)
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 0&0
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 288230376151711744 := 288511851128422400 >>l 6
(smt.stats   13   1585  27998  54097  3601/3260/376    2042/271    29  148   21.92)
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 144115188075855872 := 144115188075855872&144115188075855872
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 432345564227567616 := 9223372036854777856 >>l 8
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 144115188075855872 := 288230376151711713&144115188075855872
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 288230376151711713 := 9223372036854773760 >>l 8
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 144115188075855872 := 148618787703226370&144115188075855872
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 148618787703226370 := 288230376151711808 >>l 8
(smt.stats   14   1732  29603  56753  3721/3287/377    2321/296    30  150   22.04)
(smt.stats   15   1833  31089  62771  3988/3472/382    2530/296    30  150   22.21)
(smt.stats   16   1944  32276  66244  4016/3687/382    2705/309    31  151   22.21)
(smt.stats   17   2066  34969  72288  4031/3703/383    3181/490    32  158   22.31)
(smt.stats   18   2200  38572  79213  4151/3713/383    3466/494    32  158   22.40)
ramon: poll                 wall=2.000s usage=1.934s mem=23728KiB load=1.00 rootload=1.00
(smt.stats   19   2347  41088  85540  4350/3842/383    3897/497    32  158   22.59)
(smt.stats   20   2513  44250  96278  4624/4291/389    4562/605    33  158   22.69)
(smt.stats   21   2614  47251 106982  4632/4306/389    4733/605    33  158   22.69)
(smt.stats   22   2725  51331 117964  4717/4318/389    4929/694    34  163   22.88)
ramon: poll                 wall=3.000s usage=2.934s mem=24240KiB load=1.00 rootload=1.00
(smt.stats   23   2847  58799 140070  4892/4505/390    5387/731    35  167   22.88)
(smt.stats   24   2981  63784 153995  4969/4635/391    6112/749    36  170   23.07)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   25   3128  66821 165572  5018/4687/392    6523/1074    37  170   23.07)
(smt.stats   26   3289  69812 178711  5087/4721/394    6861/1155    38  180   23.16)
(smt.stats   27   3466  73212 194060  5188/4782/394    7251/1155    38  180   23.26)
ramon: poll                 wall=4.000s usage=3.933s mem=24536KiB load=1.00 rootload=1.00
(smt.stats   28   3567  75838 203717  5230/4859/394    7458/1158    38  180   23.26)
(smt.stats   29   3678  78016 210704  5320/4911/394    7597/1158    38  180   23.26)
(smt.stats   30   3800  82023 221557  5343/5000/394    7893/1158    38  180   23.35)
(smt.stats   31   3934  85464 232631  5410/5011/394    8152/1160    38  180   23.45)
(smt.stats   32   4081  91363 253064  5425/5093/395    8472/1343    39  184   23.54)
(smt.stats   33   4242  96543 268061  5454/5121/395    8727/1343    39  184   23.54)
(smt.stats   34   4419 102219 283892  5456/5123/399    9027/1472    40  193   23.64)
(smt.stats   35   4613 106392 296197  5545/5125/399    9302/1508    41  213   23.64)
ramon: poll                 wall=5.000s usage=4.933s mem=24980KiB load=1.00 rootload=1.00
(smt.stats   36   4714 108923 304938  5572/5217/399    9434/1508    41  213   23.64)
(smt.stats   37   4825 110998 312410  5701/5292/399    9551/1508    41  213   23.76)
(smt.stats   38   4947 114287 325643  5786/5370/399    9743/1510    41  213   23.76)
(smt.delete-inactive-clauses  :num-deleted-clauses 464)
(smt.stats   39   5081 117224 342277  5850/5482/400    9514/1595    42  213   23.76)
(smt.stats   40   5228 120371 355833  5986/5528/400    9730/1595    42  213   23.85)
(smt.stats   41   5389 124491 375075  6032/5662/400    9965/1595    42  213   23.95)
ramon: poll                 wall=6.000s usage=5.933s mem=25312KiB load=1.00 rootload=1.00
(smt.stats   42   5566 127415 392300  6086/5705/400   10247/1595    42  213   23.95)
(smt.stats   43   5760 133141 418092  6189/5780/401   10814/1652    43  214   24.04)
(smt.stats   44   5973 141425 442863  6254/5915/402   11372/1842    44  215   24.04)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   45   6074 145452 450785  6314/5922/402   11536/1843    44  215   24.04)
(smt.stats   46   6185 149327 457984  6377/5986/402   11667/1847    44  215   24.14)
ramon: poll                 wall=7.000s usage=6.932s mem=25868KiB load=1.00 rootload=1.00
(smt.stats   47   6307 153307 471495  6505/6062/402   11888/1847    44  215   24.23)
(smt.stats   48   6441 156029 491848  6630/6212/402   12204/1848    44  215   24.33)
(smt.stats   49   6588 160821 506419  6676/6303/403   12882/1938    45  219   24.42)
ramon: poll                 wall=8.000s usage=7.932s mem=25880KiB load=1.00 rootload=1.00
(smt.stats   50   6749 166673 523712  6868/6370/403   13279/1939    45  219   24.42)
(smt.stats   51   6926 171470 547382  6894/6530/403   13675/1939    45  219   24.57)
(smt.stats   52   7120 174910 562502  6970/6557/403   14002/1939    45  219   24.66)
(smt.stats   53   7333 177481 589641  7039/6652/403   14281/1939    45  219   24.76)
(smt.stats   54   7567 188107 601772  7153/6710/403   14607/1939    45  219   24.76)
ramon: poll                 wall=9.000s usage=8.932s mem=26188KiB load=1.00 rootload=1.00
(smt.stats   55   7668 191644 608480  7182/6831/403   14716/1939    45  219   24.76)
(smt.stats   56   7779 196503 627446  7214/6855/403   14861/1939    45  219   24.76)
(smt.stats   57   7901 199651 640016  7232/6887/403   14982/1939    45  219   24.76)
(smt.stats   58   8035 202503 647932  7240/6898/403   15135/1939    45  219   24.76)
(smt.stats   59   8182 205800 654828  7274/6911/403   15289/1940    45  219   24.85)
(smt.stats   60   8343 211025 665396  7365/6941/403   15461/1942    45  219   24.85)
(smt.stats   61   8520 216460 678432  7417/7035/404   15663/2224    46  219   24.95)
ramon: poll                 wall=10.000s usage=9.932s mem=26376KiB load=1.00 rootload=1.00
(smt.stats   62   8714 224010 691819  7629/7090/404   15891/2227    46  219   24.95)
(smt.stats   63   8927 232824 714500  7759/7345/404   16133/2229    46  219   25.04)
(smt.stats   64   9161 236031 740920  7771/7427/404   16544/2229    46  219   25.14)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   65   9418 242243 759931  7786/7442/404   16882/2229    46  219   25.14)
(smt.stats   66   9519 244090 771153  7789/7445/404   17177/2229    46  219   25.33)
(smt.stats   67   9630 245927 784910  7805/7461/404   17294/2229    46  219   25.33)
(smt.stats   68   9752 248430 793172  7879/7469/404   17462/2231    46  219   25.33)
ramon: poll                 wall=11.000s usage=10.932s mem=26884KiB load=1.00 rootload=1.00
(smt.stats   69   9886 252183 805215  7939/7552/404   17615/2232    46  219   25.33)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats   70  10033 255447 814264  7999/7612/404   17802/2232    46  219   25.33)
(smt.stats   71  10194 259339 832692  8014/7660/404   18021/2232    46  219   25.33)
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 0&16
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 288230376151711744 := 9223372036852727872 >>l 61
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 4398046543103&16
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 4398046543103&16
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 32770&16
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 32770 := 9223372036854825088 >>l 61
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 4398046543103&16
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 4398046543087&16
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 4398046543087 := 9223653511831486400 >>l 61
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 32769&16
lshr: (lshr[64] (* 64 (bv2int %0)) (mod (+ 6 #105 #350) 64)) 32769 := 9223372036854825024 >>l 61
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 4&16
lshr: (lshr[58] (bv2int %0) (mod (bv2int %1) 58)) 17 := 148614389656716033 >>l 55
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 4&16
lshr: (lshr[58] (bv2int %0) (mod (bv2int %1) 58)) 16 := 148614389656716033 >>l 55
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 0 := 4&16
lshr: (lshr[58] (bv2int %0) (mod (bv2int %1) 58)) 16 := 148618787703226367 >>l 55
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4 := 4&16
band: (band[58] (lshr[64] (* 64 #104) (mod #351 64)) (if (= #650 63) 36893488147419103232 (if #652 18446744073709551616 #776))) 4 := 4&16
(smt.stats   72  10371 263826 851664  8041/7677/404   18311/2239    46  219   25.64)
(smt.stats   73  10565 266393 867478  8112/7738/414   18641/2430    47  221   25.64)
(smt.stats   74  10778 271406 883714  8270/7780/414   18883/2433    47  221   25.73)
ramon: poll                 wall=12.000s usage=11.932s mem=27216KiB load=1.00 rootload=1.00
(smt.stats   75  11012 276203 916401  8312/7960/416   19247/2470    48  243   25.73)
(smt.stats   76  11269 280587 951888  8533/7973/417   19705/2472    48  243   25.83)
(smt.stats   77  11551 285586 979344  8746/8207/417   20071/2474    48  243   25.92)
ramon: poll                 wall=13.000s usage=12.931s mem=27484KiB load=1.00 rootload=1.00
(smt.stats   78  11652 287136 987665  8854/8440/417   20195/2553    49  243   26.02)
(smt.stats   79  11763 289540 999166  8894/8514/417   20345/2553    49  243   26.02)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   80  11885 291217 1007133  8951/8559/417   20487/2553    49  243   26.02)
(smt.stats   81  12019 292595 1020691  9012/8654/418   20678/2553    49  243   26.20)
(smt.stats   82  12166 294248 1031447  9088/8684/418   20842/2579    50  244   26.20)
(smt.stats   83  12327 298017 1049966  9188/8768/418   21039/2581    50  244   26.29)
ramon: poll                 wall=14.000s usage=13.931s mem=27744KiB load=1.00 rootload=1.00
(smt.stats   84  12504 301572 1072307  9234/8881/419   21479/2629    51  245   26.29)
(smt.stats   85  12698 307392 1098338  9270/8887/419   21754/2629    51  245   26.29)
(smt.stats   86  12911 314178 1151566  9389/8974/422   22424/2785    52  248   26.39)
ramon: poll                 wall=15.000s usage=14.931s mem=27988KiB load=1.00 rootload=1.00
(smt.stats   87  13145 319610 1193869  9475/9050/423   23041/2799    53  276   26.48)
(smt.stats   88  13402 326397 1217001  9724/9125/423   23639/2801    53  276   26.67)
ramon: poll                 wall=16.000s usage=15.931s mem=28484KiB load=1.00 rootload=1.00
(smt.stats   89  13684 337443 1255577  9907/9430/423   24451/2803    53  276   26.97)
(smt.stats   90  13994 353451 1325837 10056/9674/424   25217/2959    54  295   27.06)
(smt.stats   91  14095 355484 1337692 10071/9711/424   25731/2959    54  295   27.16)
(smt.stats   92  14206 357804 1349112 10080/9727/424   25906/2959    54  295   27.16)
ramon: poll                 wall=17.000s usage=16.931s mem=28720KiB load=1.00 rootload=1.00
(smt.stats   93  14328 362099 1366385 10107/9727/424   26114/2959    54  295   27.16)
(smt.stats   94  14462 365862 1390910 10168/9764/424   26567/2962    54  295   27.35)
(smt.stats   95  14609 368767 1418703 10172/9819/424   26922/2962    54  295   27.35)
(smt.stats   96  14770 372512 1454430 10180/9827/425   27583/3151    55  300   27.46)
(smt.stats   97  14947 375305 1475837 10190/9830/425   28108/3151    55  300   27.56)
(smt.delete-inactive-clauses  :num-deleted-clauses 194)
(smt.stats   98  15141 377228 1495287 10232/9879/426   28113/3399    56  301   27.56)
ramon: poll                 wall=18.000s usage=17.931s mem=29372KiB load=1.00 rootload=1.00
(smt.stats   99  15354 379615 1510560 10366/9950/427   28322/3401    56  301   27.65)
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats    :conflicts   :propagations            :lemmas           :deletions     )
(smt.stats  100  15588 381876 1522073 10538/10052/427   28546/3402    56  301   27.65)
(smt.stats  101  15845 384732 1535481 10750/10234/427   28817/3403    56  301   27.75)
ramon: poll                 wall=19.000s usage=18.930s mem=29392KiB load=1.00 rootload=1.00
(smt.stats  102  16127 391328 1566993 10899/10546/429   29351/3428    57  316   27.94)
(smt.stats  103  16437 399680 1634514 10913/10552/429   30153/3429    57  316   27.94)
(smt.stats  104  16777 408082 1675348 10947/10567/430   30559/3607    58  321   28.03)
(smt.stats  105  16878 409916 1706817 10982/10602/430   30665/3607    58  321   28.03)
ramon: poll                 wall=20.000s usage=19.930s mem=29560KiB load=1.00 rootload=1.00
(smt.stats  106  16989 412265 1721992 10997/10636/430   30988/3607    58  321   28.03)
ramon: end                  Tue Dec 24 14:24:00 2024
ramon: root.execname        z3
ramon: root.utime           19.990s
ramon: root.stime           0.000s
ramon: group.total          20.002s
ramon: group.utime          19.994s
ramon: group.stime          0.008s
ramon: group.mempeak        29816KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.072s
ramon: loadavg              1.00
