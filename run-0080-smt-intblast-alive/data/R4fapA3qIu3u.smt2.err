ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 18:22:21 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         25675 MiB
ramon: sys.mem.avail        61753 MiB
ramon: sys.nprocs           1393
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/R4fapA3qIu3u.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             30798
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 0&17179869184
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 18014398509481984 := 18446744073709550592 >>l 30
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 1&17179869184
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 1 := 18446744073709550592 >>l 30
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 17179869183&17179869184
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 18014398509481982 := 18014398509481983 >>l 20
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 17179869183&17179869184
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 17179869183 := 18446744073709550592 >>l 30
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 17179869183&17179869184
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 18014398509481982 := 18014398509481983 >>l 20
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 2047 := 2047&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 2047 := 2047&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 1&17179869184
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 1 := 3072 >>l 30
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 1&17179869184
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 2 := 1048576 >>l 20
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 2 := 2&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 4 := 4&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 1&17179869184
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 1 := 18446744073709550592 >>l 30
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 17179869183&17179869184
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 17179869184 := 18014398509481983 >>l 20
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 1 := 17179869183&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 4 := 17179869183&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 4 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 8 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 16 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 32 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 128 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 256 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 512 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 1024 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 2048 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 4096 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 8192 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 16384 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 32768 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 65536 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 131072 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 262144 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 524288 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 1048576 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 2097152 := 17179869182&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 4 := 17179869183&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 12 := 17179869183&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 12 := 17179869183&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 12 := 17179869183&17179869184
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 8 := 17179869183&17179869184
(smt.stats    0    101   3584   1100  1377/1254/232      97/24    13   47   19.66)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 8 := 9&4398046511104
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 8 := 9&4398046511104
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 18 := 19&4398046511104
(smt.stats    1    202   5750   3291  2266/2043/233     220/60    14   48   19.75)
(smt.stats    2    313   9657   6209  2480/2100/238     433/83    15   49   20.05)
(smt.stats    3    414  12346   9624  2744/2502/241     804/208    17   52   20.15)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 0&0
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 18014398509481984 := 18014398509483008 >>l 10
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 0&0
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 18014398509481984 := 18014399583223808 >>l 10
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 0&0
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 18014398509481984 := 18014399583223808 >>l 10
(smt.stats    4    525  13623  14734  2917/2643/253     964/353    19   85   20.25)
(smt.stats    5    647  16476  23656  2983/2723/260    1104/388    21   94   20.35)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations          :lemmas          :deletions    )
(smt.stats    6    748  18999  30033  2996/2734/261    1214/393    22   94   20.45)
(smt.stats    7    859  23776  42147  2998/2736/262    1357/397    23   96   20.45)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 44&512
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 18014398509482028 := 18014398509483008 >>l 55
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 44&512
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 44 := 567296 >>l 55
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 2&512
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 2 := 524288 >>l 55
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 1&512
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 18014398509481983 := 35184372088832 >>l 45
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 1&512
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 35184372088832 := 35184372088832 >>l 45
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 1&512
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 35184372088832 := 35184372088832 >>l 45
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 1 := 44&512
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 1 := 43&512
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 1 := 43&512
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 44&512
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 1 := 44&512
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 44&512
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 2 := 44&512
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 44&512
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 4 := 44&512
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 44&512
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 8 := 44&512
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 44&512
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 16 := 44&512
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 44&512
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 16 := 44&512
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 44&512
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 32 := 44&512
(smt.stats    8    981  26385  46401  3063/2792/321    1523/439    25  114   20.74)
(smt.stats    9   1115  27903  49365  3110/2836/323    1677/459    26  117   21.23)
(smt.stats   10   1216  30393  54608  3342/3010/323    1798/466    26  117   21.23)
(smt.stats   11   1327  34004  64182  3426/3096/323    1913/502    27  119   21.23)
(smt.stats   12   1449  37804  72675  3444/3172/324    2096/551    28  121   21.23)
(smt.stats   13   1583  40617  81627  3537/3210/334    2271/572    29  126   21.23)
(smt.stats   14   1730  43182  90823  3614/3276/335    2413/608    30  151   21.33)
ramon: poll                 wall=1.000s usage=0.934s mem=22748KiB load=0.93 rootload=0.91
(smt.stats   15   1831  44415  95247  3692/3360/335    2527/609    30  151   21.42)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   16   1942  46492 102024  3828/3492/335    2661/612    30  151   21.42)
(smt.stats   17   2064  47488 105633  3882/3568/335    2815/612    30  151   21.42)
(smt.stats   18   2198  48474 110068  3930/3621/335    2969/612    30  151   21.42)
(smt.stats   19   2345  50463 115043  3992/3665/335    3161/616    30  151   21.52)
(smt.stats   20   2506  53430 125539  4015/3740/340    3320/721    31  159   21.52)
(smt.stats   21   2607  55313 135705  4021/3743/340    3456/725    32  162   21.64)
(smt.stats   22   2718  60834 147975  4034/3759/340    3622/725    32  162   21.64)
(smt.stats   23   2840  65263 157556  4046/3769/340    3797/725    32  162   21.64)
(smt.stats   24   2974  68986 169286  4058/3781/348    3955/829    34  189   21.64)
(smt.stats   25   3121  76808 188995  4066/3789/349    4131/829    34  189   21.75)
(smt.stats   26   3282  83453 214254  4066/3789/349    4290/837    35  198   21.75)
(smt.stats   27   3459  90324 236383  4076/3797/349    4529/837    35  198   21.98)
(smt.stats   28   3560  94566 248663  4077/3798/349    4635/837    35  198   21.98)
(smt.stats   29   3671  98158 258337  4078/3799/349    4753/837    35  198   21.98)
(smt.stats   30   3793 102218 268423  4083/3804/350    4918/870    36  204   21.98)
(smt.stats   31   3927 107750 285715  4086/3807/350    5108/870    36  204   21.98)
ramon: poll                 wall=2.000s usage=1.934s mem=23244KiB load=1.00 rootload=1.00
(smt.stats   32   4074 113151 303737  4088/3809/350    5312/870    36  204   21.98)
(smt.stats   33   4235 120459 333518  4091/3812/351    5466/927    37  211   21.98)
(smt.stats   34   4412 126726 353996  4091/3812/351    5647/927    37  211   21.98)
(smt.stats   35   4606 135227 378413  4092/3813/354    5867/925    38  217   22.07)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas         :deletions     )
(smt.stats   36   4707 139854 392116  4092/3813/354    5968/925    38  217   22.07)
(smt.stats   37   4818 144994 407915  4093/3814/354    6091/925    38  217   22.07)
(smt.stats   38   4940 149560 421904  4093/3814/354    6218/925    38  217   22.07)
(smt.delete-inactive-clauses  :num-deleted-clauses 280)
(smt.stats   39   5074 154030 436632  4093/3814/354    6079/925    38  217   22.07)
(smt.stats   40   5221 161713 456974  4093/3814/354    6226/925    38  217   22.07)
(smt.stats   41   5382 166905 472968  4093/3814/354    6397/925    38  217   22.07)
(smt.stats   42   5559 174920 497984  4093/3814/354    6634/925    38  217   22.31)
(smt.stats   43   5753 182887 523702  4093/3814/354    6835/925    38  217   22.31)
(smt.stats   44   5966 190253 545564  4094/3815/354    7051/925    38  217   22.41)
(smt.stats   45   6067 194728 557865  4094/3815/355    7154/1002    39  219   22.41)
(smt.stats   46   6178 199924 571879  4094/3815/355    7266/1002    39  219   22.41)
(smt.stats   47   6300 204818 580155  4097/3818/355    7388/1002    39  219   22.41)
(smt.stats   48   6434 206332 585969  4108/3819/355    7528/1002    39  219   22.41)
ramon: poll                 wall=3.000s usage=2.934s mem=23760KiB load=1.00 rootload=1.00
(smt.stats   49   6581 207729 593296  4143/3833/355    7679/1002    39  219   22.41)
(smt.stats   50   6742 210672 607991  4155/3876/358    7890/1015    40  219   22.50)
(smt.stats   51   6919 215204 629756  4158/3879/358    8072/1015    40  219   22.50)
(smt.stats   52   7113 217699 649518  4159/3880/358    8268/1015    40  219   22.60)
(smt.stats   53   7326 220908 675531  4160/3881/358    8487/1015    40  219   22.60)
(smt.stats   54   7560 228979 705569  4164/3885/359    8732/1056    41  228   22.60)
(smt.stats   55   7661 232284 715284  4166/3887/359    8835/1056    41  228   22.60)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   56   7772 235860 731462  4166/3887/359    8955/1056    41  228   22.60)
(smt.stats   57   7894 239928 743905  4171/3892/359    9086/1056    41  228   22.69)
(smt.stats   58   8028 244495 758754  4173/3894/359    9222/1056    41  228   22.69)
(smt.stats   59   8175 249531 774828  4179/3894/359    9369/1056    41  228   22.69)
(smt.stats   60   8336 252477 794581  4184/3905/359    9543/1056    41  228   22.69)
(smt.stats   61   8513 255313 808261  4225/3913/359    9780/1059    41  228   22.69)
(smt.stats   62   8707 258473 822003  4257/3955/359    9982/1059    41  228   22.69)
ramon: poll                 wall=4.000s usage=3.933s mem=24164KiB load=1.00 rootload=1.00
(smt.stats   63   8921 261603 835088  4339/4057/360   10207/1102    42  229   22.79)
(smt.stats   64   9155 267193 866998  4343/4061/360   10444/1102    42  229   22.89)
(smt.stats   65   9412 271065 890029  4374/4064/360   10711/1102    42  229   22.89)
(smt.stats   66   9513 273052 899630  4384/4102/360   10815/1102    42  229   22.89)
(smt.stats   67   9624 275783 917280  4384/4102/360   10939/1102    42  229   22.89)
(smt.stats   68   9746 277924 935193  4386/4104/360   11065/1102    42  229   22.99)
(smt.stats   69   9880 282472 953461  4393/4105/360   11230/1103    42  229   22.99)
(smt.delete-inactive-clauses  :num-deleted-clauses 391)
(smt.stats   70  10027 287162 971833  4399/4117/360   11119/1103    42  229   22.99)
(smt.stats   71  10188 292652 992231  4399/4117/360   11286/1103    42  229   22.99)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   72  10365 299210 1023701  4400/4118/360   11466/1103    42  229   22.99)
(smt.stats   73  10559 309294 1052513  4403/4121/360   11723/1103    42  229   22.99)
(smt.stats   74  10772 318904 1080278  4404/4122/360   11946/1103    42  229   22.99)
(smt.stats   75  11006 331227 1111223  4405/4123/360   12193/1103    42  229   23.11)
ramon: poll                 wall=5.000s usage=4.933s mem=24516KiB load=1.00 rootload=1.00
(smt.stats   76  11263 341787 1158086  4405/4123/360   12452/1103    42  229   23.11)
(smt.stats   77  11545 354572 1205935  4405/4123/360   12736/1103    42  229   23.11)
(smt.stats   78  11646 359638 1222586  4405/4123/360   12837/1103    42  229   23.11)
(smt.stats   79  11757 364772 1237543  4405/4123/360   12948/1103    42  229   23.11)
(smt.stats   80  11879 371378 1250794  4405/4123/360   13070/1103    42  229   23.11)
(smt.stats   81  12013 378289 1271308  4406/4124/360   13206/1103    42  229   23.56)
(smt.stats   82  12160 385696 1298827  4406/4124/360   13355/1103    42  229   23.56)
(smt.stats   83  12321 392405 1322445  4408/4126/360   13562/1103    42  229   23.56)
(smt.stats   84  12498 400999 1349152  4409/4127/361   13739/1291    43  236   23.56)
(smt.stats   85  12692 412456 1380018  4409/4127/361   13936/1291    43  236   23.56)
(smt.stats   86  12905 422428 1411646  4410/4128/361   14150/1291    43  236   23.56)
ramon: poll                 wall=6.000s usage=5.933s mem=24980KiB load=1.00 rootload=1.00
(smt.stats   87  13139 434086 1431546  4412/4130/361   14382/1291    43  236   23.65)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 2 := 18014398509481983&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 2 := 18014398509481983&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 18014398509481983&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 2286984185774082&4096
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 2286984185774082 := 2341871806232658944 >>l 52
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 2286984185774082&4096
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 2286984185774082 := 2341871806232658944 >>l 52
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 2286984185774082&4096
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 2286984185774082 := 2341871806232658944 >>l 52
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 2286984185774082&4096
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 2286984185774082 := 2341871806232658944 >>l 52
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 520&4096
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 65 := 2286984185774081 >>l 42
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 480 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 480 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 480 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 496 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 496 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 496 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 496 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 512 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 512 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 512 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 416 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 416 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 384 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 384 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 384 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 256 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 256 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 256 := 512&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 64 := 2286984184725505 >>l 42
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 64 := 2286984185774079 >>l 42
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 1 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 2 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 4 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 2 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 8 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 8 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 8 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 32 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 32 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 64 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 128 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 256 := 519&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 519&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 512 := 519&4096
(smt.stats   88  13396 439453 1452468  4569/4271/462   14755/1336    44  257   24.14)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 592&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 256 := 592&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 592&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 512 := 592&4096
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 599&4096
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 16 := 599&4096
(smt.stats   89  13678 444800 1467611  4723/4396/475   15157/1343    44  257   24.34)
(smt.stats   90  13988 453578 1502171  4763/4444/476   15570/1343    44  257   24.54)
(smt.stats   91  14089 456168 1508443  4804/4490/476   15716/1413    45  270   24.54)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   92  14200 460264 1520378  4831/4512/478   15891/1413    45  270   24.64)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 1096&0
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 1096 := 2846274964499080192 >>l 10
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 1544&0
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 1544 := 2846274964499604480 >>l 10
(smt.stats   93  14322 463177 1535370  4911/4529/479   16060/1416    45  270   24.74)
(smt.stats   94  14456 466797 1544237  4952/4622/482   16315/1441    46  275   24.83)
(smt.stats   95  14603 468531 1550818  5007/4643/482   16552/1441    46  275   24.93)
(smt.stats   96  14764 471883 1567784  5044/4701/482   16748/1441    46  275   24.93)
ramon: poll                 wall=7.000s usage=6.933s mem=26588KiB load=1.00 rootload=1.00
(smt.stats   97  14941 475184 1585807  5060/4722/485   17113/1526    47  295   25.12)
(smt.delete-inactive-clauses  :num-deleted-clauses 1)
(smt.stats   98  15135 481221 1604725  5100/4744/485   17520/1528    47  295   25.21)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 32 := 4768&64
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 32 := 4768&64
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 32 := 4768&64
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4768&64
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4768&64
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4832&64
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 4575657221408428768 := 18446744073709550592 >>l 58
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4832&64
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 4575657221408428768 := 18446744073709550592 >>l 58
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4768&64
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4768&64
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4768&64
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4832&64
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 4575657221408428768 := 18446744073709550592 >>l 58
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4768&64
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 64 := 4832&64
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 4575657221408428768 := 18446744073709550592 >>l 58
(smt.stats   99  15348 486522 1625599  5215/4859/505   18021/1537    47  295   25.31)
(smt.stats  100  15582 489705 1637358  5312/4892/505   18300/1659    48  340   25.40)
(smt.stats  101  15839 497526 1667600  5321/4971/505   18642/1660    48  340   25.50)
(smt.stats  102  16121 503878 1704434  5331/4985/505   19131/1660    48  340   25.60)
ramon: poll                 wall=8.000s usage=7.933s mem=27024KiB load=1.00 rootload=1.00
(smt.stats  103  16431 515436 1761271  5361/5015/509   19612/1783    49  344   25.70)
(smt.stats  104  16771 524694 1795800  5436/5051/510   20251/1821    50  353   25.89)
(smt.stats  105  16872 529366 1813474  5459/5094/510   20466/1823    50  353   25.89)
(smt.stats  106  16983 533542 1824970  5467/5114/510   20662/1823    50  353   25.99)
(smt.stats  107  17105 537373 1845708  5474/5121/510   21028/1923    51  358   25.99)
(smt.stats  108  17239 543440 1877479  5478/5125/510   21280/1923    51  358   26.08)
(smt.stats  109  17386 549677 1895409  5558/5178/510   21518/1923    51  358   26.08)
ramon: poll                 wall=9.000s usage=8.932s mem=27644KiB load=1.00 rootload=1.00
(smt.stats  110  17547 553504 1911043  5615/5229/511   21956/1980    52  361   26.18)
(smt.stats  111  17724 559697 1936936  5731/5254/511   22253/1981    52  361   26.28)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats  112  17918 565706 1960956  5825/5360/511   22702/1987    52  361   26.37)
(smt.stats  113  18131 579084 1996120  5826/5449/511   23168/1987    52  361   26.47)
(smt.stats  114  18365 586386 2028595  5851/5461/512   23854/2074    53  368   26.56)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 32768 := 33313&32768
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 18014398509515297 := 18014398509481984 >>l 49
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 32768 := 33313&32768
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 18014398509515297 := 36028797018963968 >>l 49
ramon: poll                 wall=10.000s usage=9.932s mem=28192KiB load=1.00 rootload=0.99
(smt.stats  115  18622 595202 2068844  5913/5510/520   24462/2076    53  368   26.66)
(smt.stats  116  18904 605508 2122457  5976/5586/520   25313/2076    53  368   26.85)
(smt.stats  117  19214 610175 2148987  6001/5591/520   25722/2193    54  397   26.85)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 0&32
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 0 := 0 >>l 59
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 0&32
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 544 := 0 >>l 49
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 8&32
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 8 := 0 >>l 59
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 130&32
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 130 := 0 >>l 59
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 130&32
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 130 := 0 >>l 59
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 4744&32
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 4593671619917910664 := 0 >>l 59
(smt.stats  118  19554 614530 2182592  6096/5639/526   26132/2194    54  397   26.95)
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 4744&32
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 10 #100 #327) 64)) 4593671619917910664 := 0 >>l 59
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 8&32
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 0 := 4520092301787136 >>l 49
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 8&32
lshr: (lshr[54] (bv2int %1) (mod (bv2int %0) 54)) 0 := 4520092301787136 >>l 49
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 8&32
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 3 := 8&32
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 8&32
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 2 := 8&32
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 8&32
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 8 := 8&32
ramon: poll                 wall=11.000s usage=10.932s mem=28692KiB load=1.00 rootload=1.00
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 16 := 16&32
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 16 := 16&32
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 17&32
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 2 := 17&32
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 17&32
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 2 := 17&32
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 17&32
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 2 := 17&32
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 10&32
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 2 := 10&32
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 20&32
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 1 := 20&32
band: (band[54] (lshr[64] (* 1024 #99) (mod #328 64)) (if (= #626 63) 18446744073709551616 (if #628 9223372036854775808 #752))) 0 := 20&32
band: (band[54] (lshr[54] (bv2int %1) (mod #100 54)) (if (= #497 53) 9007199254740992 (if #499 4503599627370496 #603))) 1 := 20&32
(smt.stats  119  19927 621875 2227691  6256/5760/531   26786/2210    54  397   27.34)
(smt.delete-inactive-clauses  :num-deleted-clauses 0)
(smt.stats  120  20028 623274 2238042  6278/5875/546   27051/2264    55  406   27.34)
(smt.stats  121  20139 625814 2255578  6319/5907/547   27285/2269    55  406   27.43)
(smt.stats  122  20261 633126 2288330  6334/5929/548   27591/2269    55  406   27.55)
(smt.stats  123  20395 638905 2305756  6362/5951/548   27851/2269    55  406   27.64)
(smt.stats  124  20542 641768 2320173  6388/5971/550   28385/2329    56  442   27.74)
(smt.stats  125  20703 647182 2338521  6404/5976/550   28646/2330    56  442   27.83)
ramon: poll                 wall=12.000s usage=11.932s mem=29320KiB load=1.00 rootload=1.00
(smt.stats  126  20880 651071 2373424  6419/6003/550   28966/2330    56  442   27.83)
(smt.stats  127  21074 655806 2405757  6479/6051/552   29575/2430    57  491   28.03)
(smt.stats  128  21287 663419 2444127  6489/6061/552   30038/2430    57  491   28.12)
(smt.stats  129  21521 668856 2477898  6499/6071/553   30667/2513    58  499   28.41)
ramon: poll                 wall=13.000s usage=12.932s mem=29932KiB load=1.00 rootload=1.00
(smt.stats  130  21778 679191 2522925  6516/6076/553   30975/2513    58  499   28.41)
(smt.stats  131  22060 687177 2582726  6526/6098/553   31774/2513    58  499   28.60)
ramon: poll                 wall=14.000s usage=13.932s mem=30452KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats  132  22370 698876 2656706  6530/6102/553   32345/2513    58  499   28.69)
(smt.stats  133  22710 711780 2710250  6664/6111/555   33233/2626    59  503   28.79)
ramon: poll                 wall=15.004s usage=14.936s mem=30868KiB load=1.00 rootload=1.01
(smt.stats  134  23083 720568 2755494  6785/6357/556   34044/2629    59  503   29.03)
(smt.stats  135  23493 729691 2824129  6797/6369/556   35047/2629    59  503   29.22)
(smt.stats  136  23594 737346 2862122  6807/6377/559   35168/2768    60  553   29.22)
(smt.stats  137  23705 740300 2886828  6812/6382/559   35405/2768    60  553   29.31)
ramon: poll                 wall=16.000s usage=15.931s mem=31072KiB load=1.00 rootload=0.99
(smt.stats  138  23827 743917 2910109  6822/6385/559   35548/2768    60  553   29.31)
(smt.stats  139  23961 746899 2925976  6862/6424/560   35728/2798    61  576   29.31)
(smt.stats  140  24108 749579 2938520  6871/6441/560   35963/2798    61  576   29.31)
(smt.stats  141  24269 754399 2967721  6986/6442/560   36230/2801    61  576   29.41)
(smt.stats  142  24446 757347 2988820  7083/6593/560   36581/2801    61  576   29.51)
(smt.stats  143  24640 763559 3013791  7108/6661/561   36864/2801    61  576   29.51)
ramon: poll                 wall=17.000s usage=16.931s mem=31296KiB load=1.00 rootload=1.00
(smt.stats  144  24853 771935 3061977  7250/6820/562   37412/2852    62  580   29.70)
(smt.delete-inactive-clauses  :num-deleted-clauses 762)
(smt.stats  145  25087 777550 3100257  7290/6826/562   37068/2853    62  580   29.70)
(smt.stats  146  25344 786418 3166542  7319/6862/562   37539/2853    62  580   29.70)
(smt.stats  147  25626 792782 3208329  7339/6906/562   38071/2916    63  582   29.80)
ramon: poll                 wall=18.000s usage=17.931s mem=31384KiB load=1.00 rootload=1.00
(smt.stats  148  25936 798282 3258651  7350/6910/562   38438/2916    63  582   29.80)
(smt.stats  149  26276 802383 3297935  7357/6927/562   39052/2916    63  582   29.80)
(smt.stats  150  26649 815406 3369215  7392/6958/562   40250/2916    63  582   30.09)
ramon: poll                 wall=19.000s usage=18.931s mem=31756KiB load=1.00 rootload=1.00
(smt.stats  151  27059 821668 3429998  7403/6973/562   41195/2916    63  582   30.28)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats  152  27509 835110 3539940  7409/6979/562   41974/2916    63  582   31.13)
(smt.stats  153  27610 838653 3564225  7417/6982/562   42185/2916    63  582   31.13)
(smt.stats  154  27721 841122 3583890  7428/6998/562   42438/2916    63  582   31.13)
ramon: poll                 wall=20.000s usage=19.930s mem=32888KiB load=1.00 rootload=0.99
ramon: end                  Fri Nov  1 18:22:41 2024
ramon: root.execname        z3
ramon: root.utime           19.960s
ramon: root.stime           0.030s
ramon: group.total          20.001s
ramon: group.utime          19.973s
ramon: group.stime          0.028s
ramon: group.mempeak        33804KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.071s
ramon: loadavg              1.00
