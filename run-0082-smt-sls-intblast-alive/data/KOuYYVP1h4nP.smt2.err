ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:14:38 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28573 MiB
ramon: sys.mem.avail        62087 MiB
ramon: sys.nprocs           1381
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/KOuYYVP1h4nP.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             752982
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1    101.01     10000        49          0            1        2)
(smt.stats    0    101   4271   1950  1221/1099/100      92/14     5   16   51.96)
(smt.stats    1    202   5880   2739  1909/1715/102     186/23     7   22   52.15)
(sat.ddfw       1      1    48.314     20001        98          1            1        3)
(smt.stats    2    313   7845   4616  2023/1815/102     292/30     7   22   52.15)
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 47 := 47&48
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 47 := 47&48
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 46 := 47&48
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 4 := 47&936
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&936
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 9 := 47&936
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&938
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&937
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&937
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&936
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&896
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 47&896
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 47&18
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&10
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&12
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&10
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&12
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&10
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&12
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 8 := 47&16
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 47&18
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 17 := 47&18
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 47&18
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 47&18
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 47&32
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 24 := 47&48
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 24 := 47&48
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 17 := 47&48
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 17 := 47&49
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 1 := 47&49
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 1 := 47&33
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 1 := 47&33
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 1 := 47&17
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 17 := 940 << 9
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 47&17
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 1 := 47&17
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 17 := 940 << 9
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 1 := 47&17
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 17 := 940 << 9
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 1 := 47&17
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 17 := 940 << 9
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 1 := 47&17
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 17 := 1036 << 9
(smt.stats    3    416   9202   7863  2163/1967/198     417/48    11   51   52.46)
(smt.stats    4    531  10073   9416  2347/2136/203     531/106    13   60   52.66)
(sat.ddfw       1      1     46.62     40001       196          2            1        5)
(smt.stats    5    653  11427  12045  2415/2198/208     644/111    15   65   52.66)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    754  11849  12845  2472/2249/209     752/110    16   68   52.95)
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 13106804667810&64
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 13106804667810&64
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 13106804667810&64
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 16 := 13106804667810&64
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 32 := 13106804667810&64
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 32 := 13106804667810&96
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 2251799813685344 := 480 << 47
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 32 := 13106804667810&96
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 2251799813685344 := 480 << 47
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 32 := 13106804667810&96
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 2251799813685344 := 480 << 47
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 32 := 13106804667810&281474976710640
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 32 := 13106804667810&96
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 2814749767106656 := 480 << 47
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 32 := 13106804667810&112
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 2814749767106672 := 480 << 47
(smt.stats    7    865  12576  15766  2874/2470/209     877/119    17   70   53.05)
(smt.stats    8    987  13562  19683  2897/2662/221    1016/126    18   72   53.05)
(sat.ddfw       1      1   39.6301     70001       343          3            1        8)
ramon: poll                 wall=1.000s usage=0.929s mem=55236KiB load=0.93 rootload=0.92
(smt.stats    9   1121  16227  25804  2994/2692/221    1156/149    19   73   53.14)
(sat.ddfw       1      1   33.3611    110001       539          4            1       12)
(smt.stats   10   1222  18147  28479  3084/2793/222    1280/173    20   74   53.24)
(sat.ddfw       1      1   28.5709    160000       784          5            1       17)
(smt.stats   11   1333  20701  31050  3239/2986/224    1397/188    21   81   53.43)
ramon: poll                 wall=2.000s usage=1.932s mem=55620KiB load=1.00 rootload=1.00
(smt.stats   12   1455  23018  32073  3497/3108/224    1532/196    22   83   53.62)
(smt.stats   13   1589  24352  35206  3598/3361/228    1727/209    23   93   53.62)
(sat.ddfw       1      1   25.0004    220001      1078          6            1       23)
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 71 := 12499622&81
(smt.stats   14   1736  26459  40965  3704/3435/229    1919/227    24   93   53.88)
(smt.stats   15   1837  27922  45899  3740/3493/231    2141/253    26   96   53.98)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   16   1948  29197  50710  3766/3508/236    2386/292    27  109   53.98)
(smt.stats   17   2070  31901  54260  3777/3527/239    2533/292    27  109   54.07)
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 13792273858822144 := 98 << 46
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 2 := 98 << 46
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 2 := 98 << 46
(smt.stats   18   2204  34028  59442  3825/3557/239    2741/344    28  126   54.07)
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
shl: (shl[48] (bv2int %0) (+ 48 (* 281474976710655 #104))) 158193906249149 := 49 << 47
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
shl: (shl[48] (bv2int %0) (+ 48 (* 281474976710655 #104))) 158193906249149 := 49 << 47
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
shl: (shl[48] (bv2int %0) (+ 48 (* 281474976710655 #104))) 140737488355329 := 49 << 47
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 6553402333905 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 6553402333904 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 6553402333905 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 6553402333904 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 6553402333902 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 32 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 64 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 128 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 256 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 512 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 1024 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 2048 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 4096 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 4096 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 4096 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 8192 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 16384 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 32768 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 65536 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 4096 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 8192 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 16384 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 32768 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 65536 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 131072 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 65536 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 262144 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 524288 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 1048576 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 2097152 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 4194304 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 8388608 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 8388608 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 16777216 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 33554432 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 67108864 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 134217728 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 268435456 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 536870912 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 1073741824 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 2147483648 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 4294967296 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 8589934592 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 17179869184 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 17179869184 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 34359738368 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 34359738368 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 68719476736 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 137438953472 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 274877906944 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 549755813888 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 1099511627776 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 2199023255552 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 4398046511104 := 6553402333905&140737488355328
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 0 := 6553402333905&140737488355328
band: (band[48] (if (or #594 #595 #596 #597) 0 (if #598 1 #721)) (shl[48] (bv2int %0) (+ 48 #733))) 131072 := 6553402333905&140737488355328
ramon: poll                 wall=3.000s usage=2.932s mem=57384KiB load=1.00 rootload=1.00
(smt.stats   19   2351  36335  66784  4019/3751/443    2948/407    30  169   55.16)
(smt.stats   20   2512  39257  74849  4067/3799/454    3283/498    32  184   55.45)
(sat.ddfw       1      1    22.089    290001      1421          7            1       30)
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 77 := 6103&4189
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 77 := 6103&4189
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 77 := 6103&4189
(smt.stats   21   2613  43727  82173  4138/3810/454    3463/504    32  184   55.45)
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 77 := 6103&4125
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 77 := 6103&4125
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 77 := 6103&4125
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 77 := 6103&4125
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 69 := 6103&4125
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 69 := 6103&4125
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 69 := 6103&4189
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 69 := 6103&4189
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 69 := 6103&4189
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 69 := 6103&4189
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 69 := 6103&4253
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&4253
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&4253
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&4253
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&5981
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&5981
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&4381
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&4381
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&4637
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&4637
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&5213
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&5149
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&4637
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&5405
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&5661
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&5661
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&6173
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&6237
(smt.stats   22   2724  48875  97286  4327/4031/531    3678/545    33  197   55.83)
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&12317
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&12317
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&12317
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&12317
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&11293
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&8221
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 5910974510931997 := 62 << 16
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&140737488355357
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 6051711999279133 := 158329675580510 << 16
band: (band[48] (if (or #564 #569 #574 #579) 0 (if #559 1 #814)) (shl[64] (* 2 #102) (mod #840 64))) 21 := 6103&140737488355357
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 47 #832 #836) 64)) 6051711999279133 := 158329675580510 << 16
(smt.stats   23   2846  52259 107868  4510/4081/536    3993/552    34  202   56.03)
ramon: poll                 wall=4.000s usage=3.933s mem=58368KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   19.7873    370001      1813          8            1       38)
(smt.stats   24   2980  55379 117405  4563/4289/557    4434/635    36  212   56.12)
(smt.stats   25   3127  63957 130812  4648/4348/564    4877/752    37  230   56.54)
ramon: poll                 wall=5.006s usage=4.938s mem=58824KiB load=1.00 rootload=0.99
(sat.ddfw       1      1   17.9104    460001      2254          9            1       47)
(smt.stats   26   3288  71743 144941  4780/4377/564    5328/768    38  231   56.64)
(smt.stats   27   3465  76611 158349  4968/4668/573    5751/858    40  238   56.83)
ramon: poll                 wall=6.002s usage=5.934s mem=59112KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   28   3566  80200 167062  5043/4736/576    6446/1010    41  274   56.93)
(sat.ddfw       1      1   16.3345    560001      2745         10            1       57)
(smt.stats   29   3677  86391 188994  5079/4763/577    6744/1011    41  274   56.93)
(smt.stats   30   3799  91931 210304  5124/4804/579    7253/1026    42  274   57.12)
(smt.stats   31   3933  97087 222369  5133/4813/582    7942/1072    43  286   57.40)
(smt.stats   32   4080 105962 246512  5139/4819/582    8306/1072    43  286   57.49)
ramon: poll                 wall=7.000s usage=6.932s mem=59804KiB load=1.00 rootload=1.00
(smt.stats   33   4241 116849 266290  5195/4826/582    8583/1235    44  301   57.59)
(sat.ddfw       1      1   15.0171    670001      3284         11            1       68)
(smt.stats   34   4418 120322 276026  5377/4888/582    8901/1242    44  301   57.69)
ramon: poll                 wall=8.000s usage=7.932s mem=60236KiB load=1.00 rootload=0.99
(smt.stats   35   4612 128417 293956  5998/5634/585    9391/1280    45  308   57.97)
(smt.stats   36   4713 134763 308374  6003/5683/585    9772/1396    46  319   58.07)
(sat.ddfw       1      1   13.8889    790001      3872         12            1       80)
(smt.stats   37   4824 138864 319730  6007/5687/586    9929/1472    47  326   58.28)
(smt.stats   38   4946 142732 334371  6030/5690/588   10213/1473    47  326   58.38)
ramon: poll                 wall=9.000s usage=8.933s mem=60532KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 187)
(smt.stats   39   5080 149367 347990  6091/5764/590   10351/1514    48  333   58.38)
(smt.stats   40   5227 156730 363996  6152/5804/593   10610/1615    49  335   58.47)
ramon: poll                 wall=10.000s usage=9.925s mem=60732KiB load=0.99 rootload=0.99
(sat.ddfw       1      1    12.925    920001      4509         13            1       93)
(smt.stats   41   5388 164951 387679  6211/5877/594   11178/1622    50  338   58.78)
(smt.stats   42   5565 172054 407753  6278/5925/594   11722/1669    51  340   58.78)
ramon: poll                 wall=11.000s usage=10.929s mem=61192KiB load=1.00 rootload=1.01
(smt.stats   43   5759 182242 446473  6313/5981/596   12334/1736    52  345   58.98)
(smt.stats   44   5972 193240 489220  6339/6007/599   12849/1821    53  364   59.08)
(sat.ddfw       1      1   12.0856   1060001      5196         14            1      108)
ramon: poll                 wall=12.000s usage=11.927s mem=61748KiB load=1.00 rootload=1.00
(smt.stats   45   6073 198138 500588  6489/6014/599   13070/1827    53  364   59.17)
(smt.stats   46   6184 202048 520762  6712/6378/601   13358/1952    54  366   59.39)
ramon: poll                 wall=13.000s usage=12.928s mem=61904KiB load=1.00 rootload=1.00
(sat.ddfw       1      1   11.3447   1210001      5931         15            1      123)
(smt.stats   47   6306 207088 545870  6878/6383/601   13893/1996    55  376   59.49)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   48   6440 211430 566804  7056/6555/601   14304/1999    55  376   59.93)
ramon: poll                 wall=14.000s usage=14.073s mem=62072KiB load=1.15 rootload=1.14
(smt.stats   49   6587 215311 582126  7148/6798/606   14879/2288    56  384   60.04)
(smt.stats   50   6748 219880 604667  7289/6835/606   15413/2288    56  384   60.35)
(sat.ddfw       1      1   10.8262   1370001      6715         16            1      139)
ramon: poll                 wall=15.000s usage=15.074s mem=62516KiB load=1.00 rootload=1.00
(smt.stats   51   6925 227932 626666  7419/7085/611   16375/2448    57  392   60.45)
(smt.stats   52   7119 233420 653994  7443/7109/616   17294/2666    58  448   60.64)
(smt.stats   53   7332 241367 687712  7466/7132/617   17731/2831    59  491   60.64)
ramon: poll                 wall=16.000s usage=16.078s mem=62912KiB load=1.00 rootload=1.00
(smt.stats   54   7566 250342 713775  7534/7200/618   18693/2833    59  491   60.83)
(sat.ddfw       1      1   10.2145   1540001      7549         17            1      156)
ramon: poll                 wall=17.000s usage=17.075s mem=63204KiB load=1.00 rootload=1.00
(smt.stats   55   7667 255273 730250  7621/7203/618   19002/2960    60  511   61.12)
ramon: poll                 wall=18.002s usage=18.080s mem=63468KiB load=1.00 rootload=1.00
(smt.stats   56   7778 257933 741605  7906/7345/618   19429/2961    60  511   61.21)
(sat.ddfw       1      1   9.66962   1720001      8431         18            1      174)
ramon: poll                 wall=19.000s usage=19.067s mem=63652KiB load=0.99 rootload=0.99
(smt.stats   57   7900 262256 764665  8186/7615/618   19925/2962    60  511   61.41)
ramon: poll                 wall=20.000s usage=20.050s mem=63744KiB load=0.98 rootload=0.99
ramon: end                  Fri Nov  1 22:14:58 2024
ramon: root.execname        z3
ramon: root.utime           20.100s
ramon: root.stime           0.020s
ramon: group.total          20.122s
ramon: group.utime          20.102s
ramon: group.stime          0.020s
ramon: group.mempeak        64008KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.076s
ramon: loadavg              1.00
