ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 22:46:51 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         27835 MiB
ramon: sys.mem.avail        62084 MiB
ramon: sys.nprocs           1384
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/bUFwde0kx0az.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=true
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             862288
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   50.49)
(sat.ddfw :unsat :models :kflips/sec  :flips  :restarts  :reinits  :unsat_vars  :shifts)
(sat.ddfw       1      1   87.7193     10000        49          0            1        2)
(smt.stats    0    101   6387    458  1260/1141/101      87/10     7   23   52.14)
(smt.stats    1    202   8908   1204  2051/1842/102     192/10     7   23   52.25)
(smt.stats    2    313  11800   2392  2082/1874/103     298/21     9   29   52.44)
(sat.ddfw       1      1    43.864     20001        98          1            1        3)
(smt.stats    3    414  13263   3768  2392/2158/106     397/22    10   31   52.53)
(smt.stats    4    525  14425   5554  2403/2167/108     504/22    10   31   52.63)
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 17 := 17&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 17&65536
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 17 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 18&65536
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 18 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 1 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228223&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 18&65536
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 18 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 0 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 0 := 17 << 17
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65534 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65532 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 64 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 128 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 512 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8192 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16384 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 32768 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 64 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 186 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 128 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 128 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 512 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 512 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 65532 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 64 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 128 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 512 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8192 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16384 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32768 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8192 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 256 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4096 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2048 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1152 := 2228224&65536
(smt.stats    5    647  16497   7786  2593/2344/320     659/60    13   81   53.41)
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16384 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32768 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32768 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1024 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 1 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 4 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2228224&65536
band: (band[54] (shl[54] (bv2int %0) (mod #101 54)) (if (= #613 53) 1 (if #615 2 #719))) 2 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 32 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 8 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 16 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 65536 := 2228224&65536
(smt.stats :restarts :decisions    :clauses/bin/units         :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas       :deletions     )
(smt.stats    6    748  19255  12832  2694/2450/423     798/87    15  115   53.93)
(sat.ddfw       1      1    45.045     40001       196          2            1        5)
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 128 := 276929&131072
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2160897&131072
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 2160897 := 18 << 18
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 2160961&131072
shl: (shl[64] (bv2int %0) (mod (+ #101 #381) 64)) 2160961 := 18 << 18
(smt.stats    7    859  22542  15593  2917/2498/423    1056/97    15  115   54.51)
band: (band[54] (shl[64] (bv2int %0) (mod #382 64)) (if (= #738 63) 0 (if #740 1 #864))) 0 := 4718592&131072
shl: (shl[54] (bv2int %0) (mod (bv2int %0) 54)) 4751421 := 18 << 18
(smt.stats    8    981  26702  21829  3134/2856/448    1330/254    18  140   54.70)
(sat.ddfw       1      1   39.1134     70001       343          3            1        8)
ramon: poll                 wall=1.000s usage=1.078s mem=57056KiB load=1.08 rootload=1.06
(sat.ddfw       1      1   33.3611    110001       539          4            1       12)
(sat.ddfw       1      1   30.0114    160000       784          5            1       17)
ramon: poll                 wall=2.000s usage=2.206s mem=57324KiB load=1.13 rootload=1.13
(smt.stats    9   1115  30444  26541  3267/2893/451    1457/267    19  165   55.01)
(sat.ddfw       1      1   28.7361    220001      1078          6            1       23)
(sat.ddfw       1      1   24.5442    290001      1421          7            1       30)
ramon: poll                 wall=3.000s usage=3.219s mem=57724KiB load=1.01 rootload=1.01
(sat.ddfw       1      1   22.0022    370001      1813          8            1       38)
ramon: poll                 wall=4.000s usage=4.263s mem=57728KiB load=1.04 rootload=1.05
(smt.stats   10   1216  32006  27849  3480/3072/451    1609/297    20  170   55.20)
(sat.ddfw       1      1   19.4805    460001      2254          9            1       47)
ramon: poll                 wall=5.000s usage=5.214s mem=57728KiB load=0.95 rootload=0.95
(sat.ddfw       1      1   17.5223    560001      2745         10            1       57)
ramon: poll                 wall=6.000s usage=6.178s mem=57732KiB load=0.96 rootload=0.96
(smt.stats   11   1327  32589  28370  3624/3271/451    1747/298    20  170   55.30)
ramon: poll                 wall=7.000s usage=7.130s mem=57736KiB load=0.95 rootload=0.95
(sat.ddfw       1      1   15.6986    670001      3284         11            1       68)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1452  35405  34308  3889/3580/454    2192/350    21  172   55.39)
ramon: poll                 wall=8.000s usage=8.123s mem=57752KiB load=0.99 rootload=1.00
(sat.ddfw       1      1   14.3971    790001      3872         12            1       80)
(smt.stats   13   1586  41359  41036  3961/3617/458    2607/462    22  184   55.68)
ramon: poll                 wall=9.000s usage=9.078s mem=58144KiB load=0.95 rootload=0.95
(smt.stats   14   1733  48649  53007  4073/3722/462    3155/541    24  228   55.87)
(smt.stats   15   1834  54113  61173  4127/3772/462    3384/542    24  228   55.97)
(sat.ddfw       1      1   13.2262    920001      4509         13            1       93)
ramon: poll                 wall=10.000s usage=10.039s mem=58488KiB load=0.96 rootload=0.96
(smt.stats   16   1945  59359  70996  4299/3884/462    3964/631    25  232   56.06)
(smt.stats   17   2067  63722  83927  4325/4000/484    4376/823    27  293   56.35)
ramon: poll                 wall=11.000s usage=11.019s mem=58916KiB load=0.98 rootload=0.98
(sat.ddfw       1      1   12.3044   1060001      5196         14            1      108)
(smt.stats   18   2201  68856  94981  4508/4028/484    4839/832    27  293   56.54)
ramon: poll                 wall=12.003s usage=12.024s mem=59152KiB load=1.00 rootload=1.01
(sat.ddfw       1      1   11.5955   1210001      5931         15            1      123)
ramon: poll                 wall=13.000s usage=13.051s mem=59164KiB load=1.03 rootload=1.02
(smt.stats   19   2348  72351 104744  4867/4232/484    5229/914    28  298   56.73)
(smt.stats   20   2509  76808 118978  5030/4719/486    6196/942    29  299   56.73)
ramon: poll                 wall=14.000s usage=14.048s mem=59436KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   21   2610  82195 132221  5112/4763/487    6490/1079    31  308   56.93)
(smt.stats   22   2721  88458 144002  5331/4813/487    6740/1082    31  308   56.93)
(sat.ddfw       1      1   10.8666   1370001      6715         16            1      139)
(smt.stats   23   2843  94584 159964  5502/5036/487    7028/1091    31  308   57.21)
ramon: poll                 wall=15.000s usage=15.022s mem=59628KiB load=0.97 rootload=0.98
(smt.stats   24   2977  97021 166943  5615/5304/488    7362/1215    32  321   57.40)
ramon: poll                 wall=16.000s usage=16.020s mem=59896KiB load=1.00 rootload=0.99
(smt.stats   25   3124 101589 178959  5685/5314/489    7980/1216    32  321   57.50)
(sat.ddfw       1      1   10.2688   1540001      7549         17            1      156)
ramon: poll                 wall=17.000s usage=17.020s mem=60320KiB load=1.00 rootload=1.00
(smt.stats   26   3285 109196 202120  5887/5515/491    8636/1636    34  331   57.59)
ramon: poll                 wall=18.003s usage=17.960s mem=60132KiB load=0.94 rootload=0.94
(smt.stats   27   3462 115525 221895  6111/5662/492    9464/1713    35  338   57.78)
(smt.stats   28   3563 118994 229940  6195/5851/492    9965/1714    35  338   57.78)
(sat.ddfw       1      1   9.66599   1720001      8431         18            1      174)
(smt.stats   29   3674 124366 245846  6288/5914/492   10267/1720    35  338   57.88)
ramon: poll                 wall=19.000s usage=18.957s mem=60408KiB load=1.00 rootload=1.00
(smt.stats   30   3796 128754 261541  6435/6056/497   10585/1933    36  346   58.07)
ramon: poll                 wall=20.003s usage=19.958s mem=60952KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 22:47:12 2024
ramon: root.execname        z3
ramon: root.utime           20.000s
ramon: root.stime           0.010s
ramon: group.total          20.016s
ramon: group.utime          20.004s
ramon: group.stime          0.012s
ramon: group.mempeak        61208KiB
ramon: group.pidpeak        3
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.065s
ramon: loadavg              1.00
