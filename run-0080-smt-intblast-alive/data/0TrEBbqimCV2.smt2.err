ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 17:22:02 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         31227 MiB
ramon: sys.mem.avail        61767 MiB
ramon: sys.nprocs           1285
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/0TrEBbqimCV2.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             4016744
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    101   4234   1557  1214/1095/91      93/4     3   13   19.09)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&2
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 2 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&2
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 2 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 32&1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 2 := 32&2
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&1
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 1 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 2 := 32&4
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&2
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 2 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 33 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 32 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 31 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 4 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 8 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 16 := 384&32
(smt.stats    1    202   5324   3117  1892/1657/105     193/11     5   19   19.60)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 415 := 6 << 6
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 8 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 16 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 32 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 32 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 32 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 16 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 2 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 4 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 8 := 32&384
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 2 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 1 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 32 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 16 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 8 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 4 := 384&32
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 32&384
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 4 := 384&32
(smt.stats    2    313   6337   5291  1976/1780/223     309/26     8   46   19.70)
(smt.stats    3    414   7596   7631  2012/1817/232     398/55    11   69   20.02)
(smt.stats    4    525   8321   9150  2597/2328/241     517/105    12   75   20.11)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 288230376151711744 := 4503599627370496 << 1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 288230376151711744 := 4503599627370496 << 1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 288230376151711744 := 4503599627370496 << 1
(smt.stats    5    647  11544  14362  2661/2391/248     651/109    13   80   20.50)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 297237575406452736 := 4503599627370496 << 1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18437736874454810624 := 4503599627370496 << 1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 1 := 4503599627370496 << 1
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  13179  17743  2728/2452/251     761/110    14   81   20.59)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 4503599627370497 := 4503599627370496 << 1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&0
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 9007199254740929 := 4503599627370496 << 1
(smt.stats    7    859  15412  23767  2757/2481/261     902/125    16   93   20.59)
(smt.stats    8    981  18864  28508  2780/2503/269    1018/138    19  107   20.70)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&2251799813685248
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&4503599627370496
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18442240474082181120 := 1125899906842636 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&4503599627370496
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18442240474082181120 := 1125899906842636 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&1125899906842688
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18438862774361653312 := 1125899906842636 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&1125899906844608
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18438862774361655232 := 1125899906844544 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&1125899906844608
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18438862774361655232 := 1125899906844544 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&2251799813685248
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&4503599627370496
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 18442240474082181120 := 1125899906842689 << 52
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 2251799813685248&4503599627370496
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 2251799813685185 := 1125899906904063 << 52
(smt.stats    9   1115  22555  33191  2929/2543/281    1168/149    20  117   21.08)
ramon: poll                 wall=1.005s usage=1.004s mem=22576KiB load=1.00 rootload=0.99
(smt.stats   10   1216  24216  35555  3106/2830/287    1273/155    21  131   21.08)
(smt.stats   11   1327  28104  42222  3199/2882/289    1469/166    22  137   21.27)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  30445  45995  3360/2973/289    1704/169    22  137   21.37)
(smt.stats   13   1583  35029  52729  3387/3097/289    1904/182    23  138   21.37)
ramon: poll                 wall=2.000s usage=1.998s mem=22788KiB load=1.00 rootload=0.99
(smt.stats   14   1730  38320  57554  3480/3110/289    2123/184    23  138   21.56)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&3713653725008208
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 1 := 3713653725008208&1
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 1&3713653725008208
band: (band[53] (shl[53] (bv2int %0) (mod #110 53)) (if (= #619 52) 1 (if #621 2 #723))) 1 := 3713653725008208&1
(smt.stats   15   1831  39785  63433  3700/3318/289    2355/188    23  138   21.65)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 1 := 1&6909756686368704
(smt.stats   16   1942  42414  72375  3818/3456/289    2655/188    23  138   21.65)
(smt.stats   17   2064  45832  80614  3898/3545/295    3003/274    24  139   21.76)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 65 := 281474976710656&3288342585064256
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 66 := 281474976710656&3288342585064256
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 66 := 281474976710656&3288342585064256
(smt.stats   18   2198  49934  95853  4090/3632/295    3340/305    25  140   21.86)
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273216 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273344 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273600 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325277696 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325294080 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325326848 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325326848 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325392384 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325916672 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756326965248 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325916672 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756326965248 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756343742464 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756343742464 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756477960192 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756746395648 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134758893879296 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134827613356032 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134965052309504 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 135239930216448 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 136339441844224 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 140737488355328 := 281474976710656&3423098910337543
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273472 := 281474976710656&3423098910337152
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 134756325273472 := 281474976710656&3423098910337152
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337543
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164167 := 8466948896224028 << 49
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337543
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164167 := 8466948896224028 << 49
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337543
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164167 := 8466948896224028 << 49
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337600
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164224 := 8466948896224028 << 49
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3423098910337927
shl: (shl[64] (bv2int %0) (mod (+ #110 #897) 64)) 426761463883164551 := 8466948896224028 << 49
(smt.stats   19   2345  53166 108566  4317/4009/393    3675/348    27  168   22.52)
ramon: poll                 wall=3.000s usage=2.998s mem=23888KiB load=1.00 rootload=1.00
ramon: poll                 wall=4.000s usage=3.997s mem=23940KiB load=1.00 rootload=1.00
band: (band[53] (if (or #739 #740 #741 #742 #743 #744 #745 #746 #747 #748 #749 #750) 0 (if #751 1 #853)) (shl[64] (bv2int %0) (mod #898 64))) 0 := 281474976710656&3377699720527872
shl: (shl[53] (bv2int %0) (mod (bv2int %0) 53)) 3288342585064753 := 8466948896654070 << 49
(smt.stats   20   2506  57071 117779  4506/4188/404    4208/395    28  174   22.62)
ramon: poll                 wall=5.000s usage=4.997s mem=24148KiB load=1.00 rootload=1.00
(smt.stats   21   2607  59745 124571  4572/4256/404    4755/395    28  174   22.71)
(smt.stats   22   2718  63586 130941  4710/4288/404    5090/409    28  174   23.00)
(smt.stats   23   2840  67686 142652  4893/4442/404    5586/424    28  174   23.29)
ramon: poll                 wall=6.000s usage=5.997s mem=24944KiB load=1.00 rootload=1.00
(smt.stats   24   2974  70665 155905  5121/4695/404    6268/427    28  174   23.38)
(smt.stats   25   3121  74815 164973  5238/4835/404    6710/430    28  174   23.57)
(smt.stats   26   3282  78731 178323  5507/4975/404    7771/440    28  174   23.67)
ramon: poll                 wall=7.000s usage=6.997s mem=25204KiB load=1.00 rootload=1.00
(smt.stats   27   3459  83335 196629  5672/5236/404    8758/448    28  174   23.86)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   28   3560  86672 209453  5705/5405/406    9221/1071    29  182   23.96)
(smt.stats   29   3671  91464 231634  5721/5423/412    9743/1168    30  214   23.96)
(smt.stats   30   3793  95229 249586  5930/5448/413   10179/1171    30  214   24.14)
ramon: poll                 wall=8.000s usage=7.996s mem=25712KiB load=1.00 rootload=1.00
(smt.stats   31   3927  99122 266104  6242/5671/413   10914/1314    31  214   24.24)
(smt.stats   32   4074 102682 275856  6311/5959/417   11775/1314    31  214   24.43)
(smt.stats   33   4235 108133 291618  6476/6066/417   12620/1446    32  224   24.62)
(smt.stats   34   4412 113756 315918  6593/6202/417   13815/1451    32  224   24.71)
ramon: poll                 wall=9.000s usage=8.996s mem=26112KiB load=1.00 rootload=1.00
(smt.stats   35   4606 119283 335381  6685/6386/418   15358/1794    33  235   24.81)
(smt.stats   36   4707 121811 348150  6739/6394/418   15749/1796    33  235   24.90)
(smt.stats   37   4818 126380 372141  6906/6474/418   16046/1797    33  235   25.00)
(smt.stats   38   4940 131489 400129  6933/6634/418   16618/1797    33  235   25.00)
(smt.delete-inactive-clauses  :num-deleted-clauses 1238)
ramon: poll                 wall=10.000s usage=9.996s mem=26628KiB load=1.00 rootload=0.99
(smt.stats   39   5074 136910 429287  6982/6643/418   16052/1798    33  235   25.10)
(smt.stats   40   5221 139982 437837  7174/6715/418   16619/1798    33  235   25.19)
ramon: poll                 wall=11.000s usage=10.995s mem=26704KiB load=1.00 rootload=1.00
(smt.stats   41   5382 145664 464291  7521/6936/418   17418/1805    33  235   25.29)
(smt.stats   42   5559 150335 485369  7621/7226/418   18396/1810    33  235   25.39)
(smt.stats   43   5753 156791 513261  7782/7375/418   19163/1813    33  235   25.58)
(smt.stats   44   5966 162919 544020  7947/7502/418   20610/1817    33  235   25.68)
(smt.stats   45   6067 168095 562800  7957/7658/419   20898/2619    34  258   25.68)
ramon: poll                 wall=12.000s usage=11.995s mem=27164KiB load=1.00 rootload=1.00
(smt.stats   46   6178 174531 587795  7974/7665/420   21125/2734    35  272   25.89)
(smt.stats   47   6300 181091 608804  8169/7787/421   21461/2735    35  272   25.98)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   48   6434 185258 623702  8333/7895/421   21822/2735    35  272   25.98)
(smt.stats   49   6581 191115 637989  8352/8045/421   22146/2796    36  290   26.08)
(smt.stats   50   6742 201336 692320  8358/8051/422   22462/2796    36  290   26.35)
ramon: poll                 wall=13.000s usage=12.995s mem=27740KiB load=1.00 rootload=1.00
(smt.stats   51   6919 208880 724097  8383/8070/422   23151/2903    37  304   26.25)
(smt.stats   52   7113 217639 765432  8394/8087/423   23902/2903    37  304   26.35)
(smt.stats   53   7326 226114 815403  8416/8097/423   24827/3013    38  311   26.54)
ramon: poll                 wall=14.000s usage=13.994s mem=28080KiB load=1.00 rootload=1.00
(smt.stats   54   7560 231373 832705  8456/8115/425   25635/3124    39  314   26.54)
(smt.stats   55   7661 232247 836096  8470/8161/425   25857/3124    39  314   26.54)
(smt.stats   56   7772 236610 850321  8480/8173/425   26173/3124    39  314   26.54)
(smt.stats   57   7894 243731 891830  8518/8178/425   26727/3124    39  314   26.63)
(smt.stats   58   8028 248381 906017  8610/8256/425   27296/3265    40  317   26.73)
ramon: poll                 wall=15.000s usage=14.994s mem=28468KiB load=1.00 rootload=1.00
(smt.stats   59   8175 252349 926671  8864/8317/425   27669/3265    40  317   26.92)
(smt.stats   60   8336 258264 961722  8898/8579/425   28090/3267    40  317   27.02)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   61   8513 264015 1003219  8907/8600/427   28881/3318    41  320   27.12)
(smt.stats   62   8707 268197 1025873  9018/8603/427   29534/3321    41  320   27.26)
(smt.stats   63   8920 271969 1043046  9280/8971/428   30070/3596    42  321   27.36)
ramon: poll                 wall=16.000s usage=15.994s mem=28840KiB load=1.00 rootload=1.00
(smt.stats   64   9154 275339 1056661  9330/8975/428   30628/3597    42  321   27.45)
(smt.stats   65   9411 281327 1093760  9442/9073/428   31108/3598    42  321   27.55)
(smt.stats   66   9512 283280 1114963  9460/9151/428   31732/3748    43  322   27.64)
(smt.stats   67   9623 287144 1134999  9490/9159/428   32139/3748    43  322   27.64)
(smt.stats   68   9745 292217 1169587  9593/9187/428   32568/3750    43  322   27.64)
ramon: poll                 wall=17.000s usage=16.994s mem=29152KiB load=1.00 rootload=1.00
(smt.stats   69   9879 298142 1214015  9697/9286/429   33110/3899    44  325   27.74)
(smt.delete-inactive-clauses  :num-deleted-clauses 150)
(smt.stats   70  10026 301523 1227656  9765/9453/430   33465/3899    44  325   27.84)
(smt.stats   71  10187 308511 1249921  9831/9518/431   33897/3980    45  349   27.84)
(smt.stats   72  10364 317166 1321915  9847/9534/433   34562/3980    45  349   27.84)
ramon: poll                 wall=18.000s usage=17.994s mem=29484KiB load=1.00 rootload=1.00
(smt.stats   73  10558 321558 1346293  9861/9546/433   35264/4080    46  377   27.93)
(smt.stats   74  10771 326593 1379169  9940/9560/433   35913/4080    46  377   27.93)
(smt.stats   75  11005 328447 1389254  9971/9648/433   36401/4082    46  377   28.04)
(smt.stats   76  11262 333940 1428942  9996/9672/433   37204/4083    46  377   28.04)
ramon: poll                 wall=19.000s usage=18.993s mem=29692KiB load=1.00 rootload=1.00
(smt.stats   77  11544 342164 1520797 10032/9700/433   38028/4084    46  377   28.23)
(smt.stats   78  11645 344344 1533013 10072/9728/433   38394/4084    46  377   28.33)
(smt.stats   79  11756 348697 1576991 10182/9774/433   39084/4088    46  377   28.33)
ramon: poll                 wall=20.000s usage=19.993s mem=29948KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 17:22:22 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.010s
ramon: group.total          19.999s
ramon: group.utime          19.980s
ramon: group.stime          0.020s
ramon: group.mempeak        30204KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.007s
ramon: loadavg              1.00
