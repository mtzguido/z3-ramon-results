ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 17:43:14 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         29209 MiB
ramon: sys.mem.avail        61765 MiB
ramon: sys.nprocs           1269
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/917WoPSUjbjK.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=false
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             4090512
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.81)
(smt.stats    0    102   5512    686  1209/997/98     113/15     5   17   19.16)
(smt.stats    1    203   7352   1700  2004/1814/104     216/48     8   39   19.25)
(smt.stats    2    314   9216   3480  2059/1871/112     314/62    12   54   19.36)
(smt.stats    3    415  11430   5233  2096/1910/115     400/73    13   60   19.55)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 0&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 0 := 1 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 1 := 3&1
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 3 := 1 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 1 := 2&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 2&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2199023255551 := 1 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 1 := 2&1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 2&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 2 := 1 << 1
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 2&1
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1 := 2&1
(smt.stats    4    526  12481   6098  2243/2042/147     508/94    15   74   19.74)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 21&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 21&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 4 := 22&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 4 := 22&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 4 := 24&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 8 := 24&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 24&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 24&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 22&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 21&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 21&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 2 := 22&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 32&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 32&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 32&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 32&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 2199023255584 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 32 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 32&1048575
shl: (shl[64] (bv2int %0) (mod (+ #101 #317) 64)) 32 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 24 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 19 := 20 << 20
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 19 := 20 << 20
(smt.stats    5    648  15492   8289  2505/2280/226     629/103    18   94   20.14)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 2 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 4 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1048574 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1048572 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1048568 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 64 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 128 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 256 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 512 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1024 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 2048 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 4096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16384 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 65536 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 262144 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 524288 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1026 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 64 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 64 := 20971520&1048575
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts   :propagations          :lemmas         :deletions    )
(smt.stats    6    749  16417   9379  2802/2377/226     853/108    18   94   21.03)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 616 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 608 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 704 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 704 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 640 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 640 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1024 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1024 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 2048 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 4096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16384 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 12288 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 4096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 65536 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 524288 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 16384 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 2048 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 512 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 512 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 512 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 20971520&1048575
band: (band[41] (shl[41] (bv2int %0) (mod #101 41)) (if (= #576 40) 1 (if #578 3 #690))) 1 := 20971520&1048575
(smt.stats    7    860  18430  13203  2924/2627/389    1080/175    20  129   21.22)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262146 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262144 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262080 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 262016 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 261888 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 261632 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 1024 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 2048 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 4096 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 8192 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 16384 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 32768 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 65536 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 131072 := 20971520&1048575
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 524288 := 20971520&1048575
(smt.stats    8    982  19916  16798  3056/2813/495    1399/291    22  162   21.70)
(smt.stats    9   1116  23204  22863  3135/2872/500    1553/321    24  183   21.80)
(smt.stats   10   1217  24334  24277  3326/2892/500    1684/336    25  184   22.28)
ramon: poll                 wall=1.000s usage=0.944s mem=23908KiB load=0.94 rootload=0.93
(smt.stats   11   1328  27128  29908  3531/3131/500    1893/339    25  184   22.48)
ramon: poll                 wall=2.000s usage=1.944s mem=24012KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1450  29081  33197  3740/3461/503    2219/359    26  186   22.67)
(smt.stats   13   1584  36098  47730  3888/3476/511    2834/594    27  214   22.77)
ramon: poll                 wall=3.004s usage=2.947s mem=24412KiB load=1.00 rootload=1.00
(smt.stats   14   1731  42130  58514  4116/3642/511    3238/600    27  214   22.96)
(smt.stats   15   1832  44111  61662  4278/3865/511    3511/604    27  214   23.15)
ramon: poll                 wall=4.000s usage=3.941s mem=24756KiB load=1.00 rootload=1.00
(smt.stats   16   1943  47795  72138  4424/4073/511    4247/607    27  214   23.34)
(smt.stats   17   2065  51939  79673  4479/4187/513    4850/1084    28  218   23.34)
(smt.stats   18   2199  56897  87512  4510/4211/515    5131/1146    29  221   23.43)
(smt.stats   19   2346  63813  96872  4633/4254/515    5599/1197    30  229   23.53)
ramon: poll                 wall=5.000s usage=4.940s mem=24924KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   20   2507  71912 119293  4804/4526/517    6701/1294    31  230   23.72)
(smt.stats   21   2608  79218 130212  4936/4537/517    6930/1465    32  231   23.72)
(smt.stats   22   2719  85582 147015  5184/4671/517    7227/1470    32  231   23.81)
(smt.stats   23   2841  92205 166412  5369/4931/517    7787/1477    32  231   23.91)
ramon: poll                 wall=6.000s usage=5.938s mem=25320KiB load=1.00 rootload=0.99
(smt.stats   24   2975  96916 175282  5538/5235/518    8284/1673    33  235   24.01)
(smt.stats   25   3122 102841 187037  5715/5392/519    9414/1679    33  235   24.20)
ramon: poll                 wall=7.000s usage=6.935s mem=25728KiB load=1.00 rootload=1.00
(smt.stats   26   3283 108927 210614  6059/5486/519   10451/1827    34  237   24.29)
(smt.stats   27   3460 117588 233668  6259/5977/520   11531/2205    35  239   24.76)
(smt.stats   28   3561 120824 244729  6357/6006/520   11790/2210    35  239   24.76)
ramon: poll                 wall=8.000s usage=7.934s mem=26624KiB load=1.00 rootload=1.00
(smt.stats   29   3672 125152 254546  6722/6167/520   12278/2210    35  239   24.95)
(smt.stats   30   3794 133053 269199  6904/6459/520   12643/2210    35  239   25.05)
ramon: poll                 wall=9.000s usage=8.934s mem=26636KiB load=1.00 rootload=1.00
(smt.stats   31   3929 140068 306471  7102/6824/521   13794/2577    36  249   25.25)
(smt.stats   32   4076 146012 324572  7177/6832/521   14295/2584    36  249   25.25)
(smt.stats   33   4237 151144 346125  7648/7335/522   15095/2863    37  255   25.34)
(smt.stats   34   4415 155808 378162  8121/7845/528   16047/3077    38  265   25.63)
(smt.stats   35   4609 160265 399890  8187/7862/528   16803/3077    38  265   25.82)
ramon: poll                 wall=10.000s usage=9.934s mem=27456KiB load=1.00 rootload=1.00
(smt.stats   36   4710 161860 409665  8468/7988/528   16997/3077    38  265   26.01)
(smt.stats   37   4821 164592 432022  8618/8200/528   17460/3077    38  265   26.11)
band: (band[41] (shl[64] (bv2int %0) (mod #318 64)) (if (= #709 63) 0 (if #711 1 #856))) 0 := 248&1
shl: (shl[41] (bv2int %0) (mod (bv2int %0) 41)) 9 := 124 << 1
(smt.stats   38   4943 168558 452558  8693/8327/528   18250/3078    38  265   26.21)
(smt.delete-inactive-clauses  :num-deleted-clauses 186)
(smt.stats   39   5077 173684 477529  8769/8412/529   19409/3393    39  281   26.50)
ramon: poll                 wall=11.000s usage=10.934s mem=28116KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   40   5224 182021 512817  8951/8494/529   20432/3400    39  281   26.59)
(smt.stats   41   5385 190004 563349  9332/8676/530   21621/3738    40  283   26.69)
ramon: poll                 wall=12.000s usage=11.933s mem=28452KiB load=1.00 rootload=1.00
(smt.stats   42   5562 196429 591605  9410/9074/530   23157/3744    40  283   26.97)
(smt.stats   43   5756 205160 631094  9802/9169/530   24552/3753    40  283   27.16)
ramon: poll                 wall=13.000s usage=12.933s mem=28788KiB load=1.00 rootload=1.00
(smt.stats   44   5969 210831 675392 10117/9520/531   27076/4117    41  286   27.55)
(smt.stats   45   6070 214710 683928 10145/9826/531   28582/4119    41  286   27.82)
(smt.stats   46   6181 219470 695738 10338/9896/531   29443/4128    41  286   27.92)
ramon: poll                 wall=14.000s usage=13.933s mem=29412KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions   :clauses/bin/units             :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   47   6303 225353 730552 10564/10101/531   30528/4133    41  286   28.01)
(smt.stats   48   6437 232306 762334 10782/10335/531   31744/4139    41  286   28.22)
(smt.stats   49   6584 238819 791800 10899/10517/531   33349/4142    41  286   28.51)
ramon: poll                 wall=15.000s usage=14.933s mem=30360KiB load=1.00 rootload=1.00
(smt.stats   50   6745 247184 842038 11200/10655/531   34406/4147    41  286   28.41)
(smt.stats   51   6922 255108 872085 11566/10975/531   35453/4154    41  286   28.79)
ramon: poll                 wall=16.000s usage=15.933s mem=30528KiB load=1.00 rootload=1.00
(smt.stats   52   7116 262885 920494 11726/11313/531   37794/4159    41  286   28.98)
(smt.stats   53   7329 271929 965075 11986/11438/531   38474/4162    41  286   29.17)
ramon: poll                 wall=17.000s usage=16.932s mem=30892KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units             :simplify    :memory)
(smt.stats     :conflicts  :propagations            :lemmas           :deletions     )
(smt.stats   54   7563 281395 1013139 12062/11697/532   40816/6224    42  290   29.55)
(smt.stats   55   7664 286723 1037143 12191/11787/532   41369/6225    42  290   29.73)
ramon: poll                 wall=18.000s usage=17.932s mem=31364KiB load=1.00 rootload=0.99
(smt.stats   56   7775 293972 1087436 12270/11897/532   42198/6229    42  290   29.82)
(smt.stats   57   7897 299395 1109849 12430/11996/532   42547/6231    42  290   29.92)
ramon: poll                 wall=19.004s usage=18.935s mem=31536KiB load=1.00 rootload=1.01
(smt.stats   58   8031 302632 1117983 12739/12169/532   42929/6240    42  290   30.11)
(smt.stats   59   8178 306239 1130447 13013/12481/532   43109/6243    42  290   30.20)
ramon: poll                 wall=20.000s usage=19.930s mem=31948KiB load=1.00 rootload=0.99
ramon: end                  Fri Nov  1 17:43:34 2024
ramon: root.execname        z3
ramon: root.utime           19.970s
ramon: root.stime           0.010s
ramon: group.total          19.988s
ramon: group.utime          19.976s
ramon: group.stime          0.012s
ramon: group.mempeak        32204KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.058s
ramon: loadavg              1.00
