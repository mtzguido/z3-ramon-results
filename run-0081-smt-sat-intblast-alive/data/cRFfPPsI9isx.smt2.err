ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Fri Nov  1 20:50:50 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         28709 MiB
ramon: sys.mem.avail        62090 MiB
ramon: sys.nprocs           1399
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/cRFfPPsI9isx.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = smt.bv.solver=2
ramon: argv                 5 = smt.sls.enable=false
ramon: argv                 6 = sat.smt=true
ramon: argv                 7 = -st
ramon: argv                 8 = tactic.default_tactic=(then simplify propagate-values solve-eqs simplify smt)
ramon: argv                 9 = model_validate=true
ramon: childpid             480216
(sat.copy :learned 0)
(sat.solver)
(sat.copy :learned 0)
(sat.stats   :conflicts  :restarts       :learned/bin    :gc          :time)
(sat.stats          :decisions :clauses/bin    :units        :memory       )
(sat.stats      0      0    0   238/238     0/0  69       0    18.52   0.00)
(sat.stats    102    609    0   238/238   102/31  69       0    18.86   0.01)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 269 :time 0.00)
(sat.stats    102    609    0   238/238   102/31  69       0    18.86   0.01)
(sat.stats    102    609    0   238/238   102/31  69       0    18.86   0.01)
(sat.simplify :simplifications 1)
 (sat-scc :elim-vars 2 :time 0.00)
 (sat-probing :cost 372018.86 :time 0.00)
(sat.stats    102    609    0   240/240    38/30  69       0    18.86   0.01)
(sat.stats    167   1665    1   240/240   103/84  69       0    18.96   0.01)
(sat.stats :conflicts    :restarts     :learned/bin       :gc          :time)
(sat.stats       :decisions    :clauses/bin     :units        :memory       )
(sat.stats    170   1728    2   240/240   106/84  69       0    18.96   0.01)
(sat.stats    173   1785    3   240/240   109/84  69       0    18.96   0.01)
(sat.stats    176   1843    4   240/240   112/84  69       0    18.96   0.01)
(sat.stats    179   1900    5   240/240   115/84  69       0    18.96   0.01)
(sat.stats    182   1951    6   240/240   118/84  69       0    18.96   0.01)
(sat.stats    185   2005    7   240/240   121/84  69       0    18.96   0.01)
(sat.stats    188   2081    8   240/240   124/84  69       0    18.96   0.01)
(sat.stats    191   2145    9   240/240   127/84  69       0    18.96   0.01)
(sat.stats    194   2212   10   240/240   130/86  69       0    18.96   0.01)
(sat.stats    197   2246   11   240/240   133/89  69       0    18.96   0.01)
(sat.stats    200   2310   12   240/240   136/92  69       0    18.96   0.01)
(sat.stats :conflicts   :restarts      :learned/bin        :gc          :time)
(sat.stats       :decisions    :clauses/bin      :units        :memory       )
(sat.stats    209   2548   15   240/240   145/101  69       0    18.96   0.01)
 (sat-cleaner :elim-literals 1 :elim-clauses 1 :cost 2224 :time 0.00)
(sat.stats    375   5207   18   403/403   309/151  80       0    19.83   0.24)
ramon: poll                 wall=1.003s usage=1.003s mem=21460KiB load=1.00 rootload=0.99
(sat.stats    643   7067   27  2097/2097   593/161  80       0    20.70   1.72)
(sat.stats    710   7646   47  2313/2313   660/163  80       0    20.83   1.78)
ramon: poll                 wall=2.000s usage=1.999s mem=22276KiB load=1.00 rootload=1.00
(sat.stats   1200  13088   51  4225/4225  1173/171  80       0    21.88   2.56)
 (sat-cleaner :elim-literals 2 :elim-clauses 0 :cost 8495 :time 0.00)
ramon: poll                 wall=3.000s usage=2.999s mem=23076KiB load=1.00 rootload=1.00
(sat.stats   1597  22733  106  6627/6627  1572/239  80       0    22.17   3.05)
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 13266 :time 0.00)
 (sat-cleaner :elim-literals 14 :elim-clauses 0 :cost 14305 :time 0.00)
lshr: (lshr[53] (bv2int %1) (+ 53 (* 9007199254740991 #74))) 1 := 1 >>l 40
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 0&8192
lshr: (lshr[64] (* 1024 (bv2int %1)) (mod (+ 63 #602 #606) 64)) 1 := 0 >>l 50
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 18033 :time 0.00)
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 1 := 1&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 2 := 2&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 4 := 4&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 8 := 8&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 16 := 16&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 32 := 32&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 64 := 64&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 128 := 128&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 256 := 256&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 512 := 512&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 1024 := 1024&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 2048 := 2048&8192
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 4096 := 4096&8192
 (sat-cleaner :elim-literals 1 :elim-clauses 0 :cost 19203 :time 0.00)
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 4098&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 2628 := 8192&4098
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 4098&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 2619 := 8192&4098
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 4098&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 8 := 8192&4098
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 4098&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 2 := 8192&4098
(sat.stats :conflicts  :restarts       :learned/bin         :gc          :time)
(sat.stats      :decisions    :clauses/bin       :units         :memory       )
(sat.stats   2399  46974  193  8084/8081  2399/428 170       0    23.40   3.87)
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 6988&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 2560 := 8192&6988
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 4584&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 80 := 8192&4584
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 6006&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 320 := 8192&6006
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 7854&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 32 := 8192&7854
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 7363&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 128 := 8192&7363
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 4951&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 256 := 8192&4951
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 4632&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 4096 := 8192&4632
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 5186&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 1024 := 8192&5186
band: (band[53] (lshr[53] (bv2int %1) (+ 53 #485)) (if (= #97 52) 4503599627370496 (if #489 2251799813685248 #591))) 0 := 8031&8192
band: (band[53] (if (= #319 63) 9223372036854775808 (if #462 4611686018427387904 #459)) (lshr[64] (* 1024 #72) (mod #609 64))) 2048 := 8192&8031
ramon: poll                 wall=4.000s usage=3.999s mem=24928KiB load=1.00 rootload=0.98
ramon: poll                 wall=5.000s usage=4.998s mem=25832KiB load=1.00 rootload=1.00
(sat.stats   3617 112792  250 12318/12315  3681/540 170       0    25.22   5.93)
ramon: poll                 wall=6.000s usage=5.998s mem=26624KiB load=1.00 rootload=1.00
 (sat-cleaner :elim-literals 0 :elim-clauses 0 :cost 31556 :time 0.00)
ramon: poll                 wall=7.000s usage=6.998s mem=27212KiB load=1.00 rootload=1.00
(sat.stats   5731 161061  501 17934/17931  5079/856 261       0    26.44   7.63)
ramon: poll                 wall=8.000s usage=7.998s mem=27468KiB load=1.00 rootload=1.00
ramon: poll                 wall=9.000s usage=8.998s mem=34928KiB load=1.00 rootload=0.99
ramon: poll                 wall=10.000s usage=9.997s mem=35260KiB load=1.00 rootload=1.00
ramon: poll                 wall=11.000s usage=10.997s mem=35428KiB load=1.00 rootload=0.99
ramon: poll                 wall=12.000s usage=11.996s mem=35636KiB load=1.00 rootload=1.00
ramon: poll                 wall=13.000s usage=12.996s mem=36092KiB load=1.00 rootload=1.00
ramon: poll                 wall=14.000s usage=13.996s mem=36684KiB load=1.00 rootload=1.00
ramon: poll                 wall=15.003s usage=14.998s mem=36776KiB load=1.00 rootload=1.00
ramon: poll                 wall=16.000s usage=15.995s mem=37024KiB load=1.00 rootload=1.00
ramon: poll                 wall=17.000s usage=16.995s mem=37368KiB load=1.00 rootload=1.00
ramon: poll                 wall=18.000s usage=17.995s mem=37660KiB load=1.00 rootload=1.00
ramon: poll                 wall=19.000s usage=18.995s mem=37820KiB load=1.00 rootload=1.00
ramon: poll                 wall=20.000s usage=19.994s mem=38412KiB load=1.00 rootload=1.00
ramon: end                  Fri Nov  1 20:51:10 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.040s
ramon: group.total          20.000s
ramon: group.utime          19.956s
ramon: group.stime          0.044s
ramon: group.mempeak        38696KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.006s
ramon: loadavg              1.00
