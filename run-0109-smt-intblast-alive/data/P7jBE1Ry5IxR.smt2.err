ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:13:45 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         41721 MiB
ramon: sys.mem.avail        61712 MiB
ramon: sys.nprocs           1253
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/P7jBE1Ry5IxR.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             2945495
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.78)
(smt.stats    0    101   4973    590  1169/1042/110     104/20     8   18   19.28)
(smt.stats    1    202   6145   1698  2128/1938/114     212/42    10   27   19.37)
(smt.stats    2    313   7461   2885  2339/2137/121     331/50    11   31   19.52)
(smt.stats    3    414   9947   4505  2347/2145/123     442/64    13   41   19.52)
(smt.stats    4    525  11549   6134  2480/2256/126     566/72    14   42   19.64)
(smt.stats    5    647  14467   8519  2513/2283/127     689/86    15   48   19.74)
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&762
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&760
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&4398046511095
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&4398046511095
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 72057594037927936 := 2358 << 38
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 72057594037927936 := 2358 << 38
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 72057594037927936 := 2358 << 38
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 72057594037927936 := 2358 << 38
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2359 := 274877906943&2359
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 2359 := 2358 << 38
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 274877906943 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 274877906942 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 274877906942 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 274877906940 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 8 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 16 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 32 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 64 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 128 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 256 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 512 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 1024 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2048 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 128 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 256 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 512 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 1024 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2048 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 4096 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 8192 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 16384 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 32768 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 65536 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 131072 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 262144 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 524288 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 65536 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 262144 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 524288 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 1048576 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2097152 := 274877906943&1649267441664
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  17194  10526  2741/2332/148     788/100    16   53   20.35)
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
shl: (shl[42] (bv2int %0) (+ 42 (* 4398046511103 #109))) 1178 := 1179 << 39
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
shl: (shl[42] (bv2int %0) (+ 42 (* 4398046511103 #109))) 1178 := 1179 << 39
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
shl: (shl[42] (bv2int %0) (+ 42 (* 4398046511103 #109))) 1178 := 1179 << 39
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
shl: (shl[42] (bv2int %0) (+ 42 (* 4398046511103 #109))) 1178 := 1179 << 39
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 1 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 274877906942 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 4 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 8 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 16 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 32 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 64 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 16 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 32 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 64 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 128 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 256 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 512 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 1024 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 2048 := 274877906943&1649267441664
(smt.stats    7    859  19745  13514  2749/2430/250     904/121    18   80   20.45)
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 1024 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 512 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 512 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 512 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 512 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 512 := 274877906943&1649267441664
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 274877906943&1649267441664
band: (band[42] (if (= #113 41) 0 (if #584 1 #698)) (shl[42] (bv2int %0) (+ 42 #701))) 128 := 274877906943&1649267441664
(smt.stats    8    981  22134  17545  2761/2542/339    1076/176    21  110   20.45)
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 646512837132290 := 590 << 40
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 646512837132290 := 590 << 40
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&2
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 646512837132290 := 590 << 40
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&3848290697218
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&3848290697218
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&3848290697218
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&3848290697218
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&3848290697218
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&4398046511102
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2 := 1099511627775&3848290697218
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 3 := 1099511627775&3848290697218
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697218
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697220
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697224
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697232
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697224
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697224
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697220
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697248
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697248
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697280
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697248
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697280
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697344
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697280
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697344
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697472
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697472
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697728
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697472
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697728
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290698240
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290697472
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290698240
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290699264
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290699264
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290698240
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290701312
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290701312
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290705408
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290705408
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290713600
(smt.stats    9   1115  24994  22431  2944/2576/361    1280/195    23  123   21.04)
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290731522
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290731536
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&3848290731584
ramon: poll                 wall=1.002s usage=0.931s mem=22348KiB load=0.93 rootload=0.89
(smt.stats   10   1216  26052  24869  3128/2791/481    1555/200    24  147   21.15)
(smt.stats   11   1327  27764  28929  3470/3191/487    1788/340    26  148   21.92)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  33111  40154  3611/3389/493    2158/411    28  158   22.11)
(smt.stats   13   1583  41174  55346  3721/3470/494    2407/512    29  163   22.30)
(smt.stats   14   1730  47082  69258  3740/3494/497    2717/551    31  175   22.40)
(smt.stats   15   1831  50232  76009  3770/3502/497    2880/563    32  179   22.40)
(smt.stats   16   1942  53316  88595  4024/3770/500    3234/648    33  183   22.49)
(smt.stats   17   2064  55685  96896  4273/3771/500    3423/652    33  183   22.59)
(smt.stats   18   2198  58755 115707  4657/4403/502    3900/714    35  196   22.68)
(smt.stats   19   2345  63247 136557  4880/4408/502    4408/722    36  199   22.89)
(smt.stats   20   2506  64750 149132  5344/5090/503    5003/946    37  200   22.99)
ramon: poll                 wall=2.000s usage=1.927s mem=24584KiB load=1.00 rootload=1.00
(smt.stats   21   2607  66899 170713  5347/5093/503    5664/946    37  200   23.20)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   22   2718  69608 197450  5367/5102/504    5854/1396    38  205   23.20)
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 30 := 63&2188
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 28 := 63&2188
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 28 := 63&2172
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 60 := 63&2172
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 650910883645564 := 154 << 6
(smt.stats   23   2840  72121 207405  5559/5121/506    7026/1452    39  206   23.30)
(smt.stats   24   2974  75678 230022  5726/5445/512    7538/1663    40  209   23.40)
(smt.stats   25   3122  82980 240999  5732/5477/512    7844/1663    40  209   23.40)
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 549755813887&1
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 1 := 549755813887&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 72066390130950145 := 88 << 39
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 1 := 549755813887&1
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 650910883643393 := 88 << 39
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 549755813887&0
shl: (shl[42] (bv2int %0) (+ 42 (* 4398046511103 #109))) 1 := 44 << 40
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 549755813887&0
shl: (shl[42] (bv2int %0) (+ 42 (* 4398046511103 #109))) 1 := 44 << 40
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 549755813887&0
shl: (shl[42] (bv2int %0) (+ 42 (* 4398046511103 #109))) 1 := 44 << 40
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 48378511622144 := 86 << 40
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&0
shl: (shl[64] (* 2 (bv2int %0)) (mod (+ 41 #798 #802) 64)) 48378511622144 := 86 << 40
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 0 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 32 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 128 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 128 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 64 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 256 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 16384 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 12288 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 4096 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 8192 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 4096 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 4096 := 1099511627775&32768
band: (band[42] (if (= #335 63) 0 (if #563 1 #791)) (shl[64] (* 2 #107) (mod #806 64))) 2048 := 1099511627775&32768
(smt.stats   26   3283  86725 273164  5846/5532/518    8882/2032    41  222   23.70)
(smt.stats   27   3460  91226 285124  6147/5818/544    9280/2198    42  232   24.09)
(smt.stats   28   3561  93859 302237  6167/5860/545    9846/2294    43  232   24.47)
(smt.stats   29   3672  98183 331820  6275/5943/547   10317/2327    44  234   25.26)
ramon: poll                 wall=3.000s usage=2.927s mem=26888KiB load=1.00 rootload=0.99
(smt.stats   30   3794 102872 351015  6370/6006/547   10908/2331    44  234   25.26)
(smt.stats   31   3928 106456 367691  6526/6172/550   11477/2377    45  235   25.49)
(smt.stats   32   4075 112809 394911  6570/6194/554   11810/2476    46  269   25.68)
ramon: poll                 wall=4.002s usage=3.930s mem=27400KiB load=1.00 rootload=1.01
(smt.stats   33   4236 126279 425567  6737/6246/554   12505/2510    47  276   25.96)
ramon: poll                 wall=5.000s usage=4.926s mem=27912KiB load=1.00 rootload=0.99
(smt.stats   34   4413 139558 480595  6909/6392/554   13695/2516    47  276   26.38)
ramon: poll                 wall=6.000s usage=5.926s mem=28680KiB load=1.00 rootload=1.00
(smt.stats   35   4607 150488 510309  6957/6564/557   14611/2689    48  283   26.47)
(smt.stats   36   4708 156811 543694  6982/6609/558   14901/2797    49  284   26.47)
(smt.stats   37   4819 163518 568767  7107/6618/558   15444/2811    50  288   26.68)
ramon: poll                 wall=7.000s usage=6.926s mem=28680KiB load=1.00 rootload=1.00
(smt.stats   38   4941 169583 596535  7176/6811/559   16305/3130    51  296   26.78)
(smt.delete-inactive-clauses  :num-deleted-clauses 889)
(smt.stats   39   5075 174995 616351  7201/6820/561   16262/3132    51  296   27.12)
(smt.stats   40   5222 182943 655922  7265/6889/562   16982/3270    52  308   27.12)
ramon: poll                 wall=8.000s usage=7.926s mem=28936KiB load=1.00 rootload=1.00
(smt.stats   41   5383 188806 675361  7655/6898/562   17303/3271    52  308   27.22)
ramon: poll                 wall=9.000s usage=8.926s mem=28976KiB load=1.00 rootload=1.00
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   42   5560 197006 728715  7751/7329/562   18775/3271    52  308   27.41)
(smt.stats   43   5754 204842 779651  8001/7386/562   19418/3273    52  308   27.69)
(smt.stats   44   5967 209428 817646  8206/7839/566   21735/3991    54  317   27.98)
ramon: poll                 wall=10.000s usage=9.926s mem=29744KiB load=1.00 rootload=1.00
(smt.stats   45   6068 213744 827406  8243/7845/566   22297/3996    54  317   28.12)
(smt.stats   46   6179 220235 860380  8300/7909/566   22551/4000    54  317   28.22)
ramon: poll                 wall=11.000s usage=10.926s mem=29744KiB load=1.00 rootload=1.00
(smt.stats   47   6301 225486 888554  8355/7960/566   22876/4177    55  334   28.22)
(smt.stats   48   6435 231916 946022  8377/8009/567   25502/5159    56  337   28.41)
(smt.stats   49   6582 239733 957207  8386/8019/567   25786/5159    56  337   28.51)
(smt.stats :restarts :decisions     :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas           :deletions     )
(smt.stats   50   6743 245927 1026909  8393/8026/567   26433/5159    56  337   28.51)
ramon: poll                 wall=12.000s usage=11.926s mem=30256KiB load=1.00 rootload=1.00
(smt.stats   51   6920 257342 1165239  8402/8035/568   27072/5310    57  354   28.62)
(smt.stats   52   7114 268822 1270192  8411/8044/568   28316/5310    57  354   28.81)
(smt.stats   53   7327 276110 1346046  8577/8047/568   29264/5316    57  354   28.81)
ramon: poll                 wall=13.000s usage=12.926s mem=30512KiB load=1.00 rootload=1.00
(smt.stats   54   7561 286057 1400142  8839/8396/569   31018/5867    58  356   29.24)
ramon: poll                 wall=14.000s usage=13.926s mem=31024KiB load=1.00 rootload=1.00
(smt.stats   55   7662 291272 1427650  8924/8478/571   31413/5872    58  356   29.36)
(smt.stats   56   7773 296973 1481582  8935/8558/572   32071/6200    59  384   29.46)
(smt.stats   57   7895 304457 1551565  8941/8564/573   32412/6200    59  384   29.67)
(smt.stats   58   8029 309326 1593596  8944/8567/573   33508/6299    60  387   29.77)
ramon: poll                 wall=15.000s usage=14.926s mem=31596KiB load=1.00 rootload=0.99
(smt.stats   59   8176 317440 1638785  9025/8621/576   33920/6553    61  425   29.86)
(smt.stats   60   8337 324474 1678901  9157/8661/576   35089/6559    61  425   29.86)
(smt.stats   61   8514 331278 1711343  9220/8800/576   35817/6564    61  425   30.00)
ramon: poll                 wall=16.000s usage=15.926s mem=31596KiB load=1.00 rootload=1.00
(smt.stats   62   8708 345219 1787542  9359/8845/576   36608/6566    61  425   30.09)
(smt.stats   63   8921 354369 1829698  9576/8993/576   37778/6569    61  425   30.39)
(smt.stats   64   9155 365462 1905935  9606/9213/577   39056/7006    62  439   30.58)
ramon: poll                 wall=17.000s usage=16.926s mem=32108KiB load=1.00 rootload=1.00
(smt.stats   65   9412 383697 1959979  9789/9236/579   39884/7015    62  439   30.78)
(smt.stats   66   9513 386059 1972637  9807/9428/580   41248/7166    63  449   30.98)
ramon: poll                 wall=18.000s usage=17.926s mem=32620KiB load=1.00 rootload=1.00
(smt.stats   67   9624 391619 1993582  9922/9461/581   41856/7171    63  449   30.98)
(smt.stats   68   9746 395449 2007824  9959/9573/581   42069/7171    63  449   31.11)
(smt.stats   69   9880 400765 2074756  9997/9620/581   42847/7171    63  449   31.20)
ramon: poll                 wall=19.000s usage=18.926s mem=32876KiB load=1.00 rootload=1.00
(smt.delete-inactive-clauses  :num-deleted-clauses 2248)
(smt.stats :restarts :decisions    :clauses/bin/units            :simplify    :memory)
(smt.stats    :conflicts   :propagations           :lemmas           :deletions     )
(smt.stats   70  10027 404863 2124350 10002/9625/581   41564/7564    64  456   31.30)
(smt.stats   71  10188 418123 2265221 10008/9631/582   42615/7564    64  456   31.39)
ramon: poll                 wall=20.000s usage=19.926s mem=33132KiB load=1.00 rootload=1.00
ramon: end                  Tue Dec 24 15:14:05 2024
ramon: root.execname        z3
ramon: root.utime           19.950s
ramon: root.stime           0.050s
ramon: group.total          20.004s
ramon: group.utime          19.952s
ramon: group.stime          0.052s
ramon: group.mempeak        33132KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.077s
ramon: loadavg              1.00
