ramon: cwd                  /home/gh1/A/_work/z3-poly-testing/z3-poly-testing
ramon: start                Tue Dec 24 15:39:11 2024
ramon: nproc                32
ramon: sys.mem              63442 MiB
ramon: sys.mem.free         41048 MiB
ramon: sys.mem.avail        61710 MiB
ramon: sys.nprocs           1254
ramon: argv                 0 = z3
ramon: argv                 1 = inputs/alive-arm-tv-smt-benchmarks/dljLetjnOkXP.smt2
ramon: argv                 2 = -T:20
ramon: argv                 3 = -v:2
ramon: argv                 4 = -st
ramon: argv                 5 = smt.bv.solver=2
ramon: argv                 6 = tactic.default_tactic=(then simplify propagate-values solve-eqs smt)model_validate=true
ramon: childpid             3029992
(smt.searching)
(smt.stats :restarts     :decisions   :clauses/bin/units :simplify   :memory)
(smt.stats        :conflicts    :propagations    :lemmas      :deletions   )
(smt.stats    0      0      0      0     0/0/1       0/0     0    0   17.79)
(smt.stats    0    101   3461    447  1246/1071/105     110/17     3   16   19.14)
(smt.stats    1    202   7719   1512  1311/1166/107     213/26     4   20   19.34)
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 562949953421311&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 562949953421311&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 0&255
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9222809086901354496 := 8 << 8
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 0&255
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9222809086901354496 := 8 << 8
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 16&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 16&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 0&255
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9222809086901354496 := 8 << 8
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2046&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2044&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2040&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2044&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2040&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2032&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2016&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 32&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 32&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 64&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 32&255
(smt.stats    2    313   9492   2812  2187/1933/119     321/27     5   28   19.64)
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 64&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 10&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 14&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 11 := 14&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 10 := 14&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 10 := 14&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 9 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 12&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 64 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 64 := 128&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 256&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 384&255
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 384 := 8 << 8
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 64 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1 := 2048&255
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 2048&255
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 1 := 8 << 8
(smt.stats    3    414  11287   4522  2267/2067/234     489/56     8   52   19.96)
(smt.stats    4    525  12214   5740  2674/2437/240     571/126    11   65   20.06)
(smt.stats    5    647  15765  10127  2710/2470/245     701/131    13   82   20.06)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats      :conflicts  :propagations           :lemmas         :deletions    )
(smt.stats    6    748  19972  14288  2728/2484/248     815/160    15   86   20.16)
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 128&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 128&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 128&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223372036854775936 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223372036854775936 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223372036854775936 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223934986808197248 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 128 := 128&65535
shl: (shl[64] (bv2int %0) (mod (+ #113 #764) 64)) 9223372036854775936 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 211 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
shl: (shl[49] (bv2int %0) (mod (bv2int %0) 49)) 211 := 212 << 16
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 256 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1024 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2048 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4096 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16384 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32768 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 65280 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 256 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1024 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2048 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4096 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 16384 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 32768 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 49152 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 49152 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 49152 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 14848 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 14848 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 14336 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 12288 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2048 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 4096 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8192 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 512 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 256 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 8 := 13893632&65535
(smt.stats    7    859  23745  18237  2835/2499/249     987/170    16   86   20.55)
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 2 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 1024 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 1 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 2 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 4 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 8 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 65520 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 32 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 64 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 1328 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 194 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 160 := 13893632&65535
band: (band[49] (shl[64] (bv2int %0) (mod #765 64)) (if (= #779 63) 0 (if #781 1 #918))) 0 := 13893632&65535
band: (band[49] (shl[49] (bv2int %0) (mod #113 49)) (if (= #616 48) 1 (if #618 3 #754))) 160 := 13893632&65535
(smt.stats    8    981  25215  20180  3041/2595/330    1188/213    17  102   21.04)
(smt.stats    9   1115  28081  23528  3191/2944/400    1398/360    19  141   21.23)
ramon: poll                 wall=1.000s usage=0.918s mem=22472KiB load=0.92 rootload=0.91
(smt.stats   10   1216  33223  27462  3222/2954/400    1579/362    19  141   21.44)
(smt.stats   11   1327  40246  40402  3238/2989/402    1755/442    20  146   21.63)
(smt.stats :restarts :decisions    :clauses/bin/units          :simplify    :memory)
(smt.stats     :conflicts   :propagations          :lemmas         :deletions     )
(smt.stats   12   1449  43396  51124  3265/3017/422    1919/500    23  180   21.63)
ramon: poll                 wall=2.000s usage=1.918s mem=23004KiB load=1.00 rootload=0.99
(smt.stats   13   1583  45858  55043  3352/3020/422    2063/573    24  207   21.82)
(smt.stats   14   1730  50944  65347  3684/3238/422    2325/579    24  207   22.11)
ramon: poll                 wall=3.000s usage=2.917s mem=23560KiB load=1.00 rootload=1.00
(smt.stats   15   1831  52049  66954  3888/3495/423    2497/671    25  209   22.20)
(smt.stats   16   1942  52934  69061  4100/3762/423    2722/671    25  209   22.30)
(smt.stats   17   2064  56813  78269  4198/3873/425    2988/743    26  211   22.42)
ramon: poll                 wall=4.000s usage=3.917s mem=24392KiB load=1.00 rootload=1.00
(smt.stats   18   2198  60692  91802  4377/3959/425    3335/830    27  211   22.69)
(smt.stats   19   2345  64672 106473  4531/4145/425    3610/830    27  211   22.79)
ramon: poll                 wall=5.000s usage=4.917s mem=24364KiB load=1.00 rootload=1.00
(smt.stats   20   2506  67557 116477  4697/4324/425    3948/833    27  211   22.98)
ramon: poll                 wall=6.000s usage=5.916s mem=24400KiB load=1.00 rootload=1.00
(smt.stats   21   2607  69436 123390  4932/4522/425    4151/839    27  211   23.17)
ramon: poll                 wall=7.003s usage=6.919s mem=24572KiB load=1.00 rootload=1.00
(smt.stats   22   2718  71964 133844  5149/4683/425    4341/842    27  211   23.27)
(smt.stats   23   2840  75141 152043  5247/4904/425    5150/845    27  211   23.36)
ramon: poll                 wall=8.000s usage=7.916s mem=24788KiB load=1.00 rootload=1.00
(smt.stats   24   2974  78977 172942  5266/4984/425    5561/845    27  211   23.46)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations           :lemmas          :deletions     )
(smt.stats   25   3121  85994 208591  5289/5018/428    6192/1492    28  219   23.55)
ramon: poll                 wall=9.000s usage=8.915s mem=24948KiB load=1.00 rootload=1.00
(smt.stats   26   3282  90467 230227  5457/5041/430    6469/1493    28  219   23.65)
(smt.stats   27   3459  93760 247250  5707/5436/431    7146/1538    30  225   23.74)
ramon: poll                 wall=10.000s usage=9.915s mem=25232KiB load=1.00 rootload=0.99
(smt.stats   28   3560  95931 252811  5778/5439/431    7492/1542    30  225   23.84)
(smt.stats   29   3671  99609 279936  5942/5585/431    7937/1542    30  225   23.84)
(smt.stats   30   3793 103238 304126  6065/5689/431    8190/1542    30  225   23.93)
ramon: poll                 wall=11.000s usage=10.915s mem=25372KiB load=1.00 rootload=1.00
(smt.stats   31   3927 106731 330004  6230/5844/431    8404/1542    30  225   24.02)
(smt.stats   32   4074 109904 341467  6398/6013/432    8701/1768    31  228   24.11)
ramon: poll                 wall=12.000s usage=11.913s mem=26044KiB load=1.00 rootload=1.00
(smt.stats   33   4235 113631 363246  6670/6168/432    9214/1772    31  228   24.51)
ramon: poll                 wall=13.000s usage=12.913s mem=26056KiB load=1.00 rootload=1.00
(smt.stats   34   4412 117902 381659  7013/6515/432    9558/1776    31  228   24.60)
ramon: poll                 wall=14.000s usage=13.851s mem=26168KiB load=0.94 rootload=0.94
(smt.stats   35   4606 123350 396516  7172/6797/436    9970/1995    32  238   24.70)
ramon: poll                 wall=15.000s usage=14.847s mem=26312KiB load=1.00 rootload=1.00
(smt.stats   36   4707 125058 402172  7284/6917/436   10126/1995    32  238   24.89)
(smt.stats   37   4818 126264 405499  7574/7198/437   10249/1995    32  238   24.98)
ramon: poll                 wall=16.000s usage=15.847s mem=26436KiB load=1.00 rootload=0.99
(smt.stats   38   4940 127988 414299  7960/7481/437   10458/2032    33  243   25.08)
(smt.delete-inactive-clauses  :num-deleted-clauses 736)
(smt.stats   39   5074 132833 435226  7984/7712/437   10265/2032    33  243   25.08)
(smt.stats   40   5221 139800 465144  8133/7809/439   10809/2209    34  251   25.18)
ramon: poll                 wall=17.000s usage=16.847s mem=26656KiB load=1.00 rootload=1.00
(smt.stats   41   5382 146727 489914  8191/7885/439   11188/2418    35  251   25.18)
(smt.stats   42   5559 152536 502790  8245/7974/443   11771/2520    36  252   25.27)
ramon: poll                 wall=18.000s usage=17.847s mem=26764KiB load=1.00 rootload=1.00
(smt.stats   43   5753 161480 538811  8369/7988/443   12307/2523    36  252   25.37)
(smt.stats   44   5966 170283 565665  8559/8289/445   13110/2762    37  269   25.46)
(smt.stats :restarts :decisions    :clauses/bin/units           :simplify    :memory)
(smt.stats     :conflicts  :propagations          :lemmas           :deletions     )
(smt.stats   45   6067 173765 575955  8584/8294/448   13492/2762    37  269   25.46)
ramon: poll                 wall=19.000s usage=18.847s mem=27068KiB load=1.00 rootload=1.00
(smt.stats   46   6178 178889 586623  8743/8321/448   13689/2766    37  269   25.72)
ramon: poll                 wall=20.000s usage=19.846s mem=27268KiB load=1.00 rootload=1.00
(smt.stats   47   6300 182249 596847  8973/8494/448   13913/2955    38  306   25.81)
ramon: end                  Tue Dec 24 15:39:31 2024
ramon: root.execname        z3
ramon: root.utime           19.890s
ramon: root.stime           0.010s
ramon: group.total          19.919s
ramon: group.utime          19.899s
ramon: group.stime          0.020s
ramon: group.mempeak        27524KiB
ramon: group.pidpeak        2
ramon: status               exited
ramon: exitcode             0
ramon: walltime             20.074s
ramon: loadavg              0.99
